/** @jsxImportSource @emotion/react */

import { Link } from 'react-router-dom';
import CodeBlock from 'docs/server/ui/codeBlock/CodeBlock.tsx';
import HR from 'docs/server/ui/hr/HR.tsx';

import Page from 'docs/server/ui/page/Page.tsx';
import { H3, H4 } from 'docs/server/ui/typography/Typography.tsx';
import NotificationAPI from 'docs/server/routes/apisAndHooks/notificationAPI/NotificationAPI.tsx';
import SimplePropertiesList from 'docs/server/ui/propertiesList/SimplePropertiesList.tsx';
import apiData from 'docs/server/apiData/apiData.ts';
import { adjustAutogeneratedProperties } from 'docs/server/ui/propertiesList/util.ts';

export default function Notifications() {
  return (
    <Page
      pretitle="REST API"
      pretitleLinkTo="/rest-apis"
      title="Notifications"
      pageSubtitle={`All available operations for sending and manipulating notifications`}
      showTableOfContents={true}
    >
      <section>
        <H3>List all notifications</H3>
        <p>
          This endpoint returns information about all of the notifications that
          a specific user has received.
        </p>
        <H4>HTTP Request</H4>
        <CodeBlock
          snippetList={[
            {
              language: 'http',
              languageDisplayName: 'HTTP',
              snippet:
                'GET https://api.cord.com/v1/users/<USER_ID>/notifications',
            },
            {
              language: 'bash',
              languageDisplayName: 'cURL',
              snippet: `curl "https://api.cord.com/v1/users/<USER_ID>/notifications" \\
  -H 'Authorization: Bearer <ACCESS_TOKEN>'`,
            },
            {
              language: 'bash',
              languageDisplayName: 'CLI',
              snippet: `# you can install @cord-sdk/cli for a simpler experience
cord notification ls <USER_ID>`,
            },
          ]}
        />
        <H4>Request Body</H4>
        <p>
          <em>This REST endpoint has no request body.</em>
        </p>
        <H4 data-collapsible>Request Parameters</H4>
        <p>
          The endpoint accepts an optional <code>filter</code> query request
          parameter. Use this to filter notifications based on their properties.
        </p>
        <SimplePropertiesList
          properties={apiData.types.ServerListNotificationParameters.properties}
          level={5}
        />
        <H4 data-collapsible>Response</H4>
        <p>
          The response is a JSON array of objects with the following fields:
        </p>
        <SimplePropertiesList
          showRequired={false}
          properties={apiData.types.CoreNotificationData.properties}
          level={5}
        />
      </section>
      <HR />
      <section>
        <H3>Create a notification</H3>
        <p>
          This endpoint creates and sends a notification. These notifications
          will appear in the{' '}
          <Link to="/components/cord-notification-list">
            standalone notification list
          </Link>
          , the{' '}
          <Link to="/components/cord-notification-list-launcher">
            notification list launcher
          </Link>
          , and the <Link to={NotificationAPI.uri}>notification API</Link>.
        </p>
        <H4>HTTP Request</H4>
        <CodeBlock
          snippetList={[
            {
              language: 'http',
              languageDisplayName: 'HTTP',
              snippet: `POST https://api.cord.com/v1/notifications`,
            },
            {
              language: 'bash',
              languageDisplayName: 'cURL',
              snippet: `curl "https://api.cord.com/v1/users/<USER_ID>/notifications" \\
  -X POST \\
  -H 'Authorization: Bearer <ACCESS_TOKEN>'\\
  -H 'Content-Type: application/json'`,
            },
            {
              language: 'bash',
              languageDisplayName: 'CLI',
              snippet: `# you can install @cord-sdk/cli for a simpler experience
cord notification create`,
            },
          ]}
        />
        <H4 data-collapsible>Request Body</H4>
        <SimplePropertiesList
          level={5}
          properties={adjustAutogeneratedProperties(
            apiData.types.ServerCreateNotification.properties,
            {
              // Remove deprecated items.
              hide: ['actor_id', 'recipient_id'],
              // Not technically required in the schema due to deprecations, but
              // should be documented as such.
              makeRequired: ['recipientID'],
            },
          )}
        />
        <HR />
        <H4>Example Request</H4>
        <p>
          In this example, suppose a user with the ID <code>123</code> and name
          "Alice Applegate" exists, as well as another user with the ID{' '}
          <code>456 </code> and name "Bob Bloke". Here is an example request to
          send a notification from Alice to Bob. When Bob receives this
          notification, it will say "Alice Applegate sent Bob Bloke a delicious
          sandwich", and will link to
          <code>http://www.example.com/</code> when Bob clicks it.
        </p>
        <CodeBlock
          snippetList={[
            {
              language: 'bash',
              languageDisplayName: 'cURL',
              snippet: `curl "https://api.cord.com/v1/notifications" \\
  -X POST \\
  -H 'Authorization: Bearer <ACCESS_TOKEN>' \\
  -H 'Content-Type: application/json' \\
  -d '{
    "actorID": "123",
    "recipientID": "456",
    "template": "{{actor}} sent {{recipient}} a delicious sandwich",
    "url": "http://www.example.com/",
    "type": "url"
  }'`,
            },
            {
              language: 'bash',
              languageDisplayName: 'CLI',
              snippet: `cord notification create 
--author-id=123 
--recipient-id=456 
--template="{{actor}} send {{recipient}} a delicious sandwich" 
--url=http://www.example.com
--type=url`,
            },
          ]}
        />
        <p>If the request succeeds, the response will be:</p>
        <CodeBlock
          snippetList={[
            {
              language: 'json',
              languageDisplayName: 'JSON',
              snippet: `{
    "success": true,
    "message": "Notification created.",
    "notificationID": "<NEW_ID>"
}`,
            },
          ]}
        />
        <p>
          If the request does not succeed, the response will instead contain an
          <code>error</code> and <code>message</code> explaining what went
          wrong:
        </p>
        <CodeBlock
          snippetList={[
            {
              language: 'json',
              languageDisplayName: 'JSON',
              snippet: `{
  "error": "<ERROR_CODE>",
  "message": "An explanation of the error code."
}`,
            },
          ]}
        />
        <HR />
        <H4>Another Example</H4>
        <p>
          Suppose a new user with ID <code>789</code> and name "Carol Capable"
          joins the project, and we would like to notify Alice that this
          happened. Here is an example request to send such a notification to
          Alice. When Alice receives this notification, it will say "Carol
          Capable joined the team", and will link to{' '}
          <code>http://www.example.com/</code> when Alice clicks it.
        </p>
        <CodeBlock
          snippetList={[
            {
              language: 'json',
              languageDisplayName: 'JSON',
              snippet: `curl "https://api.cord.com/v1/notifications" \\
  -X POST \\
  -H 'Authorization: Bearer <ACCESS_TOKEN>' \\
  -H 'Content-Type: application/json' \\
  -d '{
    "actorID": "789",
    "recipientID": "123",
    "template": "{{actor}} joined the team",
    "url": "http://www.example.com/",
    "type": "url"
  }'`,
            },
            {
              language: 'bash',
              languageDisplayName: 'CLI',
              snippet: `# you can install @cord-sdk/cli for a simpler experience
cord notification create
    --actor-id=789
    --recipient-id=123
    --template="{{actor}} joined the team"
    --url=http://www.example.com/
    --type=url
  }'`,
            },
          ]}
        />
        <p>
          The response to this request will look the same as the response to the
          first example.
        </p>
        <HR />
        <H4>Current Limitations</H4>
        <ul>
          <li>
            Sending a notification does not currently have the ability to
            additionally notify the recipient via Email and/or Slack.
          </li>
        </ul>
      </section>
      <HR />
      <section>
        <H3>Delete a notification</H3>
        <p>This endpoint deletes a notification.</p>
        <H4>HTTP Request</H4>
        <CodeBlock
          snippetList={[
            {
              language: 'http',
              languageDisplayName: 'HTTP',
              snippet:
                'DELETE https://api.cord.com/v1/notifications/<NOTIFICATION_ID>',
            },
            {
              language: 'bash',
              languageDisplayName: 'cURL',
              snippet: `curl "https://api.cord.com/v1/notifications/<NOTIFICATION_ID>" \\
  -X DELETE \\
  -H 'Authorization: Bearer <ACCESS_TOKEN>'`,
            },
            {
              language: 'bash',
              languageDisplayName: 'CLI',
              snippet: `# you can install @cord-sdk/cli for a simpler experience
cord notification delete <ID>`,
            },
          ]}
        />
        <H4>Request Body</H4>
        <p>
          <em>This REST endpoint has no request body.</em>
        </p>
        <H4>Response</H4>
        <p>If successful, the response will be:</p>
        <CodeBlock
          snippetList={[
            {
              language: 'json',
              languageDisplayName: 'JSON',
              snippet: `{
  "success": true,
  "message": "ðŸ’€ You successfully deleted notification abc123"
}`,
            },
          ]}
        />
      </section>
    </Page>
  );
}
