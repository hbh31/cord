/** @jsxImportSource @emotion/react */

import { useContext } from 'react';
import SimplePropertiesList from 'docs/server/ui/propertiesList/SimplePropertiesList.tsx';
import apiData from 'docs/server/apiData/apiData.ts';
import Page from 'docs/server/ui/page/Page.tsx';
import { H2, H4 } from 'docs/server/ui/typography/Typography.tsx';
import HR from 'docs/server/ui/hr/HR.tsx';
import CodeBlock from 'docs/server/ui/codeBlock/CodeBlock.tsx';
import {
  PreferenceContext,
  ClientLanguageDisplayNames,
} from 'docs/server/state/PreferenceContext.tsx';
import UserAPI from 'docs/server/routes/apisAndHooks/userAPI/UserAPI.tsx';
import CordDocsMarkdown from 'docs/server/ui/markdown/CordDocsMarkdown.tsx';
import PropertiesList from 'docs/server/ui/propertiesList/PropertiesList.tsx';
import { adjustAutogeneratedProperties } from 'docs/server/ui/propertiesList/util.ts';

const uri = '/js-apis-and-hooks/user-api/observeUserData';
const title = 'Observe user data';
const subtitle = 'Observe user details for your UI';

const jsMethodData =
  apiData['types']['ICordUserSDK'].methods.methods['observeUserData'];
const reactMethodData = apiData['react']['user']['useUserData'];

function UserObserveUserData() {
  const { clientLanguage } = useContext(PreferenceContext);
  return (
    <Page
      pretitle={UserAPI.title}
      pretitleLinkTo={UserAPI.uri}
      title={title}
      pageSubtitle={subtitle}
      showTableOfContents
    >
      <section>
        <H2>Overview</H2>
        <CordDocsMarkdown value={jsMethodData.overloads[0].summary} />
        <CodeBlock
          savePreferenceFor="client"
          snippetList={[
            {
              language: 'javascript',
              languageDisplayName: ClientLanguageDisplayNames.REACT,
              snippet: reactMethodData.overloads[0].examples.Overview,
            },
            {
              language: 'javascript',
              languageDisplayName: ClientLanguageDisplayNames.VANILLA_JS,
              snippet: jsMethodData.overloads[0].examples.Overview,
            },
          ]}
        />
      </section>
      <HR />
      <section>
        <H2>Usage</H2>
        <CodeBlock
          savePreferenceFor="client"
          snippetList={[
            {
              language: 'javascript',
              languageDisplayName: ClientLanguageDisplayNames.REACT,
              snippet: reactMethodData.overloads[0].examples.Usage,
            },
            {
              language: 'javascript',
              languageDisplayName: ClientLanguageDisplayNames.VANILLA_JS,
              snippet: jsMethodData.overloads[0].examples.Usage,
            },
          ]}
        />
        <br /> {/* just need some space between them */}
        <CodeBlock
          savePreferenceFor="client"
          snippetList={[
            {
              language: 'javascript',
              languageDisplayName: ClientLanguageDisplayNames.REACT,
              snippet: reactMethodData.overloads[1].examples.Usage,
            },
            {
              language: 'javascript',
              languageDisplayName: ClientLanguageDisplayNames.VANILLA_JS,
              snippet: jsMethodData.overloads[1].examples.Usage,
            },
          ]}
        />
      </section>
      <HR />
      <section>
        <H2>Available Data</H2>
        <p>The API provides an object which has the following fields:</p>
        <SimplePropertiesList
          level={3}
          showRequired={false}
          properties={adjustAutogeneratedProperties(
            apiData.types.ClientUserData.properties,
            {
              moveToFront: [
                'id',
                'name',
                'shortName',
                'profilePictureURL',
                'metadata',
              ],
            },
          )}
        />
      </section>
      <HR />
      <section>
        <H2>What this function returns</H2>
        {clientLanguage === ClientLanguageDisplayNames.REACT ? (
          <>
            <H4>Fetching a single user</H4>
            <CordDocsMarkdown
              value={reactMethodData.overloads[0].returns.description}
            />
            <H4>Fetching multiple users</H4>
            <CordDocsMarkdown
              value={reactMethodData.overloads[1].returns.description}
            />
          </>
        ) : (
          <CordDocsMarkdown
            value={jsMethodData.overloads[0].returns.description}
          />
        )}
      </section>
      <HR />
      <section>
        <H2>Arguments this function takes</H2>
        <p>This function can be called in two ways:</p>
        <PropertiesList
          savePreferenceFor="client"
          headings={{
            [ClientLanguageDisplayNames.REACT]: 'Fetching a single user',
            [ClientLanguageDisplayNames.VANILLA_JS]: 'Fetching a single user',
          }}
          properties={{
            [ClientLanguageDisplayNames.REACT]: reactMethodData.overloads[0]
              .parameters as any,
            [ClientLanguageDisplayNames.VANILLA_JS]: jsMethodData.overloads[0]
              .parameters as any,
          }}
        />
        <PropertiesList
          savePreferenceFor="client"
          headings={{
            [ClientLanguageDisplayNames.REACT]: 'Fetching multiple users',
            [ClientLanguageDisplayNames.VANILLA_JS]: 'Fetching multiple users',
          }}
          properties={{
            [ClientLanguageDisplayNames.REACT]: reactMethodData.overloads[1]
              .parameters as any,
            [ClientLanguageDisplayNames.VANILLA_JS]: jsMethodData.overloads[1]
              .parameters as any,
          }}
        />
      </section>
    </Page>
  );
}

export default {
  uri,
  title,
  subtitle,
  Element: UserObserveUserData,
};
