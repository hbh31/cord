// @generated
// npm run docs-codegen
/* eslint-disable */
export default {
  types: {
    Point2D: {
      name: 'Point2D',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { x: { type: 'number' }, y: { type: 'number' } },
        propertyOrder: ['x', 'y'],
        required: ['x', 'y'],
      },
    },
    ScreenshotOptions: {
      name: 'ScreenshotOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          blur: { type: 'boolean' },
          show_blurred: {
            type: 'string',
            enum: ['everywhere', 'outside_page'],
          },
          capture_when: {
            type: '("new-annotation" | "share-via-email" | "new-thread" | "new-message")[]',
            items: {
              type: 'string',
              enum: [
                'new-annotation',
                'share-via-email',
                'new-thread',
                'new-message',
              ],
            },
          },
          show_screenshot: { type: 'boolean' },
        },
        propertyOrder: [
          'blur',
          'show_blurred',
          'capture_when',
          'show_screenshot',
        ],
        required: [],
      },
    },
    CordSDKInitOptions: {
      name: 'CordSDKInitOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          navigate: { anyOf: [{ type: 'null' }, { type: 'NavigateFn' }] },
          enable_tasks: { type: 'boolean' },
          enable_annotations: { type: 'boolean' },
          enable_slack: { type: 'boolean' },
          thread_options: {
            type: 'ThreadOptions',
            properties: {
              additional_subscribers_on_create: {
                type: 'string[]',
                items: { type: 'string' },
              },
            },
            propertyOrder: ['additional_subscribers_on_create'],
            required: ['additional_subscribers_on_create'],
          },
          screenshot_options: {
            type: 'ScreenshotOptions',
            properties: {
              blur: { type: 'boolean' },
              show_blurred: {
                type: 'string',
                enum: ['everywhere', 'outside_page'],
              },
              capture_when: {
                type: '("new-annotation" | "share-via-email" | "new-thread" | "new-message")[]',
                items: {
                  type: 'string',
                  enum: [
                    'new-annotation',
                    'share-via-email',
                    'new-thread',
                    'new-message',
                  ],
                },
              },
              show_screenshot: { type: 'boolean' },
            },
            propertyOrder: [
              'blur',
              'show_blurred',
              'capture_when',
              'show_screenshot',
            ],
            required: [],
          },
          custom_renderers: { type: 'CustomRenderers' },
          custom_event_metadata: { type: 'JsonObject' },
          translations: {
            type: 'Translations',
            description:
              "A set of translations to use in Cord components.  This is an object where the keys are language codes and the values are objects representing translation keys.  See [the detailed guide to customizing Cord's text](/customization/translations) for more details.",
          },
          language: {
            type: 'string',
            description:
              'The user language to display in components.  This must be used in combination with the `translations` option to have any effect.',
          },
          beforeMessageCreate: {
            anyOf: [{ type: 'null' }, { type: 'BeforeMessageCreateFunction' }],
          },
          client_auth_token: { type: 'string' },
          react_package_version: { type: 'string' },
          onInitError: { type: 'InitErrorCallback' },
        },
        propertyOrder: [
          'navigate',
          'enable_tasks',
          'enable_annotations',
          'enable_slack',
          'thread_options',
          'screenshot_options',
          'custom_renderers',
          'custom_event_metadata',
          'translations',
          'language',
          'beforeMessageCreate',
          'client_auth_token',
          'react_package_version',
          'onInitError',
        ],
        required: [],
      },
    },
    CordSDKOptions: {
      name: 'CordSDKOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          navigate: { anyOf: [{ type: 'null' }, { type: 'NavigateFn' }] },
          enable_tasks: { type: 'boolean' },
          enable_annotations: { type: 'boolean' },
          enable_slack: { type: 'boolean' },
          thread_options: {
            type: 'ThreadOptions',
            properties: {
              additional_subscribers_on_create: {
                type: 'string[]',
                items: { type: 'string' },
              },
            },
            propertyOrder: ['additional_subscribers_on_create'],
            required: ['additional_subscribers_on_create'],
          },
          screenshot_options: {
            type: 'ScreenshotOptions',
            properties: {
              blur: { type: 'boolean' },
              show_blurred: {
                type: 'string',
                enum: ['everywhere', 'outside_page'],
              },
              capture_when: {
                type: '("new-annotation" | "share-via-email" | "new-thread" | "new-message")[]',
                items: {
                  type: 'string',
                  enum: [
                    'new-annotation',
                    'share-via-email',
                    'new-thread',
                    'new-message',
                  ],
                },
              },
              show_screenshot: { type: 'boolean' },
            },
            propertyOrder: [
              'blur',
              'show_blurred',
              'capture_when',
              'show_screenshot',
            ],
            required: [],
          },
          custom_renderers: { type: 'CustomRenderers' },
          custom_event_metadata: { type: 'JsonObject' },
          translations: {
            type: 'Translations',
            description:
              "A set of translations to use in Cord components.  This is an object where the keys are language codes and the values are objects representing translation keys.  See [the detailed guide to customizing Cord's text](/customization/translations) for more details.",
          },
          language: {
            type: 'string',
            description:
              'The user language to display in components.  This must be used in combination with the `translations` option to have any effect.',
          },
          beforeMessageCreate: {
            anyOf: [{ type: 'null' }, { type: 'BeforeMessageCreateFunction' }],
          },
        },
        propertyOrder: [
          'navigate',
          'enable_tasks',
          'enable_annotations',
          'enable_slack',
          'thread_options',
          'screenshot_options',
          'custom_renderers',
          'custom_event_metadata',
          'translations',
          'language',
          'beforeMessageCreate',
        ],
        required: [],
      },
    },
    AnnotationCapturePosition: {
      name: 'AnnotationCapturePosition',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          x: { type: 'number' },
          y: { type: 'number' },
          element: { type: 'HTMLElement' },
        },
        propertyOrder: ['x', 'y', 'element'],
        required: ['x', 'y', 'element'],
      },
    },
    AnnotationCaptureResult: {
      name: 'AnnotationCaptureResult',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          extraLocation: { type: 'Partial<L>' },
          label: { type: 'string' },
        },
        propertyOrder: ['extraLocation', 'label'],
        required: [],
      },
    },
    AnnotationRenderPosition: {
      name: 'AnnotationRenderPosition',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          coordinates: {
            type: 'object',
            properties: {
              x: { type: ['string', 'number'] },
              y: { type: ['string', 'number'] },
            },
            propertyOrder: ['x', 'y'],
            required: ['x', 'y'],
          },
          element: { type: 'HTMLElement' },
        },
        propertyOrder: ['coordinates', 'element'],
        required: [],
      },
    },
    Annotation: {
      name: 'Annotation',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { id: { type: 'string' }, location: { type: 'L' } },
        propertyOrder: ['id', 'location'],
        required: ['id', 'location'],
      },
    },
    AnnotationWithThreadID: {
      name: 'AnnotationWithThreadID',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: 'string' },
          location: { type: 'L' },
          threadID: { type: 'string' },
        },
        propertyOrder: ['id', 'location', 'threadID'],
        required: ['id', 'location', 'threadID'],
      },
    },
    AnnotationHandler: {
      name: 'AnnotationHandler',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          getAnnotationPosition: {
            type: 'AnnotationPositionRendererCallback<L>',
          },
          onAnnotationCapture: {
            type: '(capturePosition: AnnotationCapturePosition, element: HTMLElement) => void | AnnotationCaptureResult<{}> | undefined',
          },
          onAnnotationClick: {
            type: '(annotation: AnnotationWithThreadID<L>) => unknown',
          },
        },
        propertyOrder: [
          'getAnnotationPosition',
          'onAnnotationCapture',
          'onAnnotationClick',
        ],
        required: [
          'getAnnotationPosition',
          'onAnnotationCapture',
          'onAnnotationClick',
        ],
      },
    },
    ICordAnnotationSDK: {
      name: 'ICordAnnotationSDK',
      methods: {
        methodOrder: [
          'setAnnotationHandler',
          'viewportCoordinatesToString',
          'stringToViewportCoordinates',
        ],
        required: [
          'setAnnotationHandler',
          'viewportCoordinatesToString',
          'stringToViewportCoordinates',
        ],
        methods: {
          setAnnotationHandler: {
            name: 'setAnnotationHandler',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['type', 'locationString', 'handler'],
              required: ['type', 'locationString', 'handler'],
              properties: {
                type: { type: 'T' },
                locationString: { type: 'string' },
                handler: {
                  anyOf: [
                    { type: 'null' },
                    { type: 'AnnotationHandler<L>[T]' },
                  ],
                },
              },
            },
            returns: { type: 'void' },
          },
          viewportCoordinatesToString: {
            name: 'viewportCoordinatesToString',
            summary:
              'Takes viewport coordinates and serializes them into a string which can later be turned back into viewport coordinates. This process encodes information about DOM structure and other information beyond just the coordinates so that they can be deserialized even by different users with different window sizes and even if the DOM has changed.  \n\nThis function is used by Cord whenever an annotation is created in order to save the position of that annotation to the Cord backend.',
            examples: {},
            parameters: {
              propertyOrder: ['coords'],
              required: ['coords'],
              properties: {
                coords: {
                  description:
                    "The current coordinates relative to the browser's viewport.",
                  type: 'Point2D',
                  properties: { x: { type: 'number' }, y: { type: 'number' } },
                  propertyOrder: ['x', 'y'],
                  required: ['x', 'y'],
                },
              },
            },
            returns: {
              description:
                'An opaque serialized string, which can only be passed to `stringToViewportCoordinates`.',
              type: 'Promise<string | null>',
            },
          },
          stringToViewportCoordinates: {
            name: 'stringToViewportCoordinates',
            summary:
              'Takes a serialized string from `viewportCoordinatesToString` and converts it back into viewport coordinates. The new coordinates are adjusted for changes in window size, DOM structure, etc. This means that even if the string was generated by a user on a different computer with a different window size, the resulting coordinates should point to an element that "feels like" "the same" element, even if its coordinates are quite different from when the string was originally generated.  \n\nThis process can fail, for example if the DOM has changed too much or the original element simply does not exist in the DOM any more, and will return `null` in such cases.  \n\nThis function is used by Cord whenever an annotation is rendered in order to position the annotation on the screen.',
            examples: {},
            parameters: {
              propertyOrder: ['str'],
              required: ['str'],
              properties: {
                str: {
                  description:
                    'A serialized string generated by `viewportCoordinatesToString`.',
                  type: 'string',
                },
              },
            },
            returns: {
              description: 'Viewport coordinates or `null`, as above.',
              type: 'Promise<Point2D | null>',
            },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    ICordSDK: {
      name: 'ICordSDK',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          options: {
            type: 'CordSDKInitOptions',
            properties: {
              navigate: { anyOf: [{ type: 'null' }, { type: 'NavigateFn' }] },
              enable_tasks: { type: 'boolean' },
              enable_annotations: { type: 'boolean' },
              enable_slack: { type: 'boolean' },
              thread_options: {
                type: 'ThreadOptions',
                properties: {
                  additional_subscribers_on_create: {
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                },
                propertyOrder: ['additional_subscribers_on_create'],
                required: ['additional_subscribers_on_create'],
              },
              screenshot_options: {
                type: 'ScreenshotOptions',
                properties: {
                  blur: { type: 'boolean' },
                  show_blurred: {
                    type: 'string',
                    enum: ['everywhere', 'outside_page'],
                  },
                  capture_when: {
                    type: '("new-annotation" | "share-via-email" | "new-thread" | "new-message")[]',
                    items: {
                      type: 'string',
                      enum: [
                        'new-annotation',
                        'share-via-email',
                        'new-thread',
                        'new-message',
                      ],
                    },
                  },
                  show_screenshot: { type: 'boolean' },
                },
                propertyOrder: [
                  'blur',
                  'show_blurred',
                  'capture_when',
                  'show_screenshot',
                ],
                required: [],
              },
              custom_renderers: { type: 'CustomRenderers' },
              custom_event_metadata: { type: 'JsonObject' },
              translations: {
                description:
                  "A set of translations to use in Cord components.  This is an object where the keys are language codes and the values are objects representing translation keys.  See [the detailed guide to customizing Cord's text](/customization/translations) for more details.",
                type: 'Translations',
              },
              language: {
                description:
                  'The user language to display in components.  This must be used in combination with the `translations` option to have any effect.',
                type: 'string',
              },
              beforeMessageCreate: {
                anyOf: [
                  { type: 'null' },
                  { type: 'BeforeMessageCreateFunction' },
                ],
              },
              client_auth_token: { type: 'string' },
              react_package_version: { type: 'string' },
              onInitError: { type: 'InitErrorCallback' },
            },
            propertyOrder: [
              'navigate',
              'enable_tasks',
              'enable_annotations',
              'enable_slack',
              'thread_options',
              'screenshot_options',
              'custom_renderers',
              'custom_event_metadata',
              'translations',
              'language',
              'beforeMessageCreate',
              'client_auth_token',
              'react_package_version',
              'onInitError',
            ],
            required: [],
          },
          annotation: {
            type: 'ICordAnnotationSDK',
            properties: {
              setRenderHandler: {
                type: '<L extends Location>(location: L, handler: AnnotationPositionRendererCallback<L>) => void',
              },
              clearRenderHandler: { type: '(location: Location) => void' },
              setCaptureHandler: {
                type: '<L extends Location>(location: L, handler: (capturePosition: AnnotationCapturePosition, element: HTMLElement) => void | AnnotationCaptureResult<{}> | undefined) => void',
              },
              clearCaptureHandler: { type: '(location: Location) => void' },
              setClickHandler: {
                type: '<L extends Location>(location: L, handler: (annotation: AnnotationWithThreadID<L>) => unknown) => void',
              },
              clearClickHandler: { type: '(location: Location) => void' },
              redrawAnnotations: { type: '() => void' },
              viewportCoordinatesToString: {
                description:
                  'Takes viewport coordinates and serializes them into a string which can later be turned back into viewport coordinates. This process encodes information about DOM structure and other information beyond just the coordinates so that they can be deserialized even by different users with different window sizes and even if the DOM has changed.  \n\nThis function is used by Cord whenever an annotation is created in order to save the position of that annotation to the Cord backend.',
                type: '(coords: Point2D) => Promise<string | null>',
              },
              stringToViewportCoordinates: {
                description:
                  'Takes a serialized string from `viewportCoordinatesToString` and converts it back into viewport coordinates. The new coordinates are adjusted for changes in window size, DOM structure, etc. This means that even if the string was generated by a user on a different computer with a different window size, the resulting coordinates should point to an element that "feels like" "the same" element, even if its coordinates are quite different from when the string was originally generated.  \n\nThis process can fail, for example if the DOM has changed too much or the original element simply does not exist in the DOM any more, and will return `null` in such cases.  \n\nThis function is used by Cord whenever an annotation is rendered in order to position the annotation on the screen.',
                type: '(str: string) => Promise<Point2D | null>',
              },
            },
            propertyOrder: [
              'setRenderHandler',
              'clearRenderHandler',
              'setCaptureHandler',
              'clearCaptureHandler',
              'setClickHandler',
              'clearClickHandler',
              'redrawAnnotations',
              'viewportCoordinatesToString',
              'stringToViewportCoordinates',
            ],
            required: [
              'setRenderHandler',
              'clearRenderHandler',
              'setCaptureHandler',
              'clearCaptureHandler',
              'setClickHandler',
              'clearClickHandler',
              'redrawAnnotations',
              'viewportCoordinatesToString',
              'stringToViewportCoordinates',
            ],
          },
          presence: {
            type: 'ICordPresenceSDK',
            properties: {
              setPresent: {
                type: '(location: Location, options?: SetPresentOptions | undefined) => Promise<true>',
              },
              observePresence: {
                description:
                  'This method allows you to observe users who are [present](/js-apis-and-hooks/presence-api) at a particular [location](/reference/location), including live updates.',
                type: '(location: Location, callback: PresenceUpdateCallback, options?: ObservePresenceOptions | undefined) => number',
              },
              unobservePresence: { type: '(ref: number) => boolean' },
              unobserveLocationData: { type: '(ref: number) => boolean' },
            },
            propertyOrder: [
              'setPresent',
              'observePresence',
              'unobservePresence',
              'unobserveLocationData',
            ],
            required: [
              'setPresent',
              'observePresence',
              'unobservePresence',
              'unobserveLocationData',
            ],
          },
          user: {
            type: 'ICordUserSDK',
            properties: {
              setNotificationPreferences: {
                description:
                  'This method allows you to set notification preferences for the current viewer.',
                type: '(preferences: Partial<NotificationPreferences>) => Promise<true>',
              },
              observeUserData: {
                description:
                  'This method allows you to observe data about a user, including live updates.',
                type: '{ (userID: string, callback: SingleUserUpdateCallback): number; (userIDs: string[], callback: MultipleUserUpdateCallback): number; }',
              },
              unobserveUserData: { type: '(ref: number) => boolean' },
              observeViewerData: {
                description:
                  'This method allows you to observe data about the logged-in user, including live updates.',
                type: '(callback: ViewerUserUpdateCallback) => number',
              },
              unobserveViewerData: { type: '(ref: number) => boolean' },
              observeGroupMembers: {
                description:
                  'This method allows you to observe the members of a group the current user is a member of - either the current group the viewer is logged into, or, if specified as an option, another group the viewer is a member of.',
                type: '(callback: GroupMembersDataCallback, options?: ObserveGroupMembersOptions | undefined) => number',
              },
              unobserveGroupMembers: { type: '(ref: number) => boolean' },
              observeOrgMembers: {
                type: '(callback: OrgMembersDataCallback, options?: ObserveOrgMembersOptions | undefined) => number',
              },
              unobserveOrgMembers: { type: '(ref: number) => boolean' },
              connectToSlack: {
                description:
                  "Calling this method will trigger a popup window to appear containing a flow for the user to link their Cord user to a Slack user. Completion of the flow will additionally connect the user's Slack workspace to their Cord group if that Cord group is not already connected to a Slack workspace. Calling this method will not do anything if the Cord user is already linked to a Slack user.",
                type: '{ (callback: ConnectToSlackCallback): Promise<void>; (options?: ConnectToSlackOptions | undefined): Promise<void>; }',
              },
              disconnectSlackWorkspace: {
                description:
                  'This method will disconnect the Slack workspace from the Cord group. This means all users who were connected to Slack will also be disconnected.',
                type: '(options?: DisconnectSlackWorkspaceOptions | undefined) => Promise<boolean>',
              },
              searchUsers: {
                description:
                  'This method allows searching for users with various options. Using the `searchQuery` will filter users by what their name start with.',
                type: '(options?: SearchUsersOptions | undefined) => Promise<SearchUsersResult>',
              },
            },
            propertyOrder: [
              'setNotificationPreferences',
              'observeUserData',
              'unobserveUserData',
              'observeViewerData',
              'unobserveViewerData',
              'observeGroupMembers',
              'unobserveGroupMembers',
              'observeOrgMembers',
              'unobserveOrgMembers',
              'connectToSlack',
              'disconnectSlackWorkspace',
              'searchUsers',
            ],
            required: [
              'setNotificationPreferences',
              'observeUserData',
              'unobserveUserData',
              'observeViewerData',
              'unobserveViewerData',
              'observeGroupMembers',
              'unobserveGroupMembers',
              'observeOrgMembers',
              'unobserveOrgMembers',
              'connectToSlack',
              'disconnectSlackWorkspace',
              'searchUsers',
            ],
          },
          thread: {
            type: 'ICordThreadSDK',
            properties: {
              unobserveLocationSummary: { type: '(ref: number) => boolean' },
              observeThreadCounts: {
                description:
                  'This API allows you to observe the count of all the threads in a project that are visible to the current user.',
                type: '(callback: ThreadActivitySummaryUpdateCallback, options?: ObserveThreadCountsOptions | undefined) => number',
              },
              unobserveThreadCounts: { type: '(ref: number) => boolean' },
              unobserveLocationData: { type: '(ref: number) => boolean' },
              observeThreads: {
                description:
                  'This API allows you to observe threads data within your project, that are visible to the current user, including live updates. You can use the available filter options to fine tune the threads returned.',
                type: '(callback: ThreadsCallback, options?: ObserveThreadsOptions | undefined) => number',
              },
              unobserveThreads: { type: '(ref: number) => boolean' },
              unobserveThreadSummary: { type: '(ref: number) => boolean' },
              unobserveThreadData: { type: '(ref: number) => boolean' },
              observeThread: {
                description:
                  'This method allows you to observe all messages and data for a thread, including live updates.',
                type: '(threadID: string, callback: ThreadCallback, options?: ThreadObserverOptions | undefined) => number',
              },
              unobserveThread: { type: '(ref: number) => boolean' },
              observeMessage: {
                description:
                  'This method allows you fetch data for a single message, including live updates.',
                type: '(messageID: string, callback: MessageCallback) => number',
              },
              unobserveMessage: { type: '(ref: number) => boolean' },
              setSubscribed: {
                description:
                  'Set the subscribed status for an existing thread for the current user. A subscribed user will be notified of any new thread activity.',
                type: '(threadID: string, subscribed: boolean) => Promise<true>',
              },
              setSeen: {
                description:
                  'Mark entire threads as seen or unseen for the current user.  This does not affect whether the user is subscribed to the thread or not.',
                type: '{ (threadID: string, seen: boolean): Promise<true>; (filter: ClientThreadFilter, seen: boolean): Promise<true>; }',
              },
              createThread: {
                description:
                  "Create a new empty thread i.e. a thread without messages. Please note that because the new thread won't have any messages, it will not be displayed on any of the thread-related components like [ThreadedComments](/components/cord-threaded-comments), [ThreadList](/components/cord-thread-list) or [Thread](/components/cord-thread). If you would like to create a thread containing a message instead, please use the [SendMessage API](/js-apis-and-hooks/thread-api/sendMessage) and pass in thread data via the `createThread` argument.",
                type: '(data: ClientCreateThread) => Promise<true>',
              },
              updateThread: {
                description: 'Update an existing thread with new data.',
                type: '(threadID: string, data: ClientUpdateThread) => Promise<true>',
              },
              shareThread: {
                description:
                  'Shares the most recent message, including a link to the thread, via email.',
                type: '(threadID: string, options: ShareThreadOptions) => Promise<true>',
              },
              sendMessage: {
                description:
                  'Add a new message to a thread.  The message will be authored by the current user and belong to their current group.',
                type: '(threadID: string, data: ClientCreateMessage) => Promise<true>',
              },
              searchMessages: {
                description:
                  'This method allows you search for messages by content.',
                type: '(searchOptions: SearchOptionsType) => Promise<SearchResultData[] | undefined>',
              },
            },
            propertyOrder: [
              'unobserveLocationSummary',
              'observeThreadCounts',
              'unobserveThreadCounts',
              'unobserveLocationData',
              'observeThreads',
              'unobserveThreads',
              'unobserveThreadSummary',
              'unobserveThreadData',
              'observeThread',
              'unobserveThread',
              'observeMessage',
              'unobserveMessage',
              'setSubscribed',
              'setSeen',
              'createThread',
              'updateThread',
              'shareThread',
              'sendMessage',
              'searchMessages',
            ],
            required: [
              'unobserveLocationSummary',
              'observeThreadCounts',
              'unobserveThreadCounts',
              'unobserveLocationData',
              'observeThreads',
              'unobserveThreads',
              'unobserveThreadSummary',
              'unobserveThreadData',
              'observeThread',
              'unobserveThread',
              'observeMessage',
              'unobserveMessage',
              'setSubscribed',
              'setSeen',
              'createThread',
              'updateThread',
              'shareThread',
              'sendMessage',
              'searchMessages',
            ],
          },
          notification: {
            type: 'ICordNotificationSDK',
            properties: {
              observeNotificationCounts: {
                description:
                  'This method allows you to observe the count of unread notifications for the current user, including live updates.',
                type: '(callback: NotificationSummaryUpdateCallback, options?: ObserveNotificationSummaryOptions | undefined) => number',
              },
              unobserveNotificationCounts: { type: '(ref: number) => boolean' },
              observeNotifications: {
                description:
                  'This method allows you to observe the available notifications for the current user, including live updates.',
                type: '(callback: NotificationDataUpdateCallback, options?: ObserveNotificationDataOptions | undefined) => number',
              },
              unobserveNotifications: { type: '(ref: number) => boolean' },
              markAsRead: {
                description: 'Mark a specific notification as read.',
                type: '(notificationID: string) => Promise<void>',
              },
              markAsUnread: {
                description: 'Mark a specific notification as unread.',
                type: '(notificationID: string) => Promise<void>',
              },
              markAllAsRead: {
                description:
                  'Mark all notifications as read (that, optionally, match a filter).',
                type: '(options?: MarkAllNotificationsAsReadOptions | undefined) => Promise<void>',
              },
              delete: {
                description: 'Delete a notification',
                type: '(notificationID: string) => Promise<true>',
              },
            },
            propertyOrder: [
              'observeNotificationCounts',
              'unobserveNotificationCounts',
              'observeNotifications',
              'unobserveNotifications',
              'markAsRead',
              'markAsUnread',
              'markAllAsRead',
              'delete',
            ],
            required: [
              'observeNotificationCounts',
              'unobserveNotificationCounts',
              'observeNotifications',
              'unobserveNotifications',
              'markAsRead',
              'markAsUnread',
              'markAllAsRead',
              'delete',
            ],
          },
          file: {
            type: 'ICordFileSDK',
            properties: {
              uploadFile: {
                description:
                  "Upload a file to Cord's file storage for use in other Cord APIs, such as [attaching to a message](/js-apis-and-hooks/thread-api/sendMessage#addAttachments). Because uploading the file contents may take a long time, this works in two steps.  First, the file record is created, and then the file is uploaded directly from the browser to the file storage. You can reference the file in other APIs as soon as the first step is complete.  \n\nCertain types of files, such as executable code, cannot be uploaded. Trying to do so will generate an error.  \n\nFiles that are uploaded but never attached to a message will eventually be garbage collected.",
                type: '(data: ClientCreateFile) => Promise<UploadFileResult>',
              },
            },
            propertyOrder: ['uploadFile'],
            required: ['uploadFile'],
          },
          experimental: { type: 'Record<string, never>' },
          groupID: { type: 'string' },
        },
        propertyOrder: [
          'options',
          'annotation',
          'presence',
          'user',
          'thread',
          'notification',
          'file',
          'experimental',
          'groupID',
        ],
        required: [
          'options',
          'annotation',
          'presence',
          'user',
          'thread',
          'notification',
          'file',
          'experimental',
        ],
      },
    },
    PagePresenceWebComponentEvents: {
      name: 'PagePresenceWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { update: { type: '[foo: number]' } },
        propertyOrder: ['update'],
        required: ['update'],
      },
    },
    PresenceFacepileWebComponentEvents: {
      name: 'PresenceFacepileWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { update: { type: '[foo: number]' } },
        propertyOrder: ['update'],
        required: ['update'],
      },
    },
    PresenceObserverWebComponentEvents: {
      name: 'PresenceObserverWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { change: { type: '[present: boolean]' } },
        propertyOrder: ['change'],
        required: ['change'],
      },
    },
    SidebarWebComponentEvents: {
      name: 'SidebarWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          open: { type: '[{ width?: number | undefined; }]' },
          close: { type: '[]' },
          threadopen: { type: '[threadID: string]' },
          threadclose: { type: '[threadID: string]' },
        },
        propertyOrder: ['open', 'close', 'threadopen', 'threadclose'],
        required: ['open', 'close', 'threadopen', 'threadclose'],
      },
    },
    SidebarLauncherWebComponentEvents: {
      name: 'SidebarLauncherWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { click: { type: '[]' } },
        propertyOrder: ['click'],
        required: ['click'],
      },
    },
    FloatingThreadsWebComponentEvents: {
      name: 'FloatingThreadsWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          start: { type: '[]' },
          finish: { type: '[threadID: string]' },
          cancel: { type: '[]' },
        },
        propertyOrder: ['start', 'finish', 'cancel'],
        required: ['start', 'finish', 'cancel'],
      },
    },
    ThreadWebComponentEvents: {
      name: 'ThreadWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          threadinfochange: { type: '[threadInfo: ThreadInfo]' },
          close: { type: '[threadInfo: ThreadCallbackInfoWithThreadID]' },
          resolved: { type: '[threadInfo: ThreadCallbackInfo]' },
          render: { type: '[]' },
          loading: { type: '[]' },
        },
        propertyOrder: [
          'threadinfochange',
          'close',
          'resolved',
          'render',
          'loading',
        ],
        required: [
          'threadinfochange',
          'close',
          'resolved',
          'render',
          'loading',
        ],
      },
    },
    ThreadInfo: {
      name: 'ThreadInfo',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          thread: {
            type: 'ThreadSummary',
            properties: {
              unread: {
                description:
                  "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                type: 'number',
              },
              viewerIsThreadParticipant: {
                description:
                  'Whether the current viewer has either left a message or reacted to this thread.',
                type: 'boolean',
              },
              firstMessage: {
                description:
                  'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'ClientMessageData',
                    properties: {
                      seen: {
                        description:
                          'Whether the message has been seen by the current viewer.',
                        type: 'boolean',
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                ],
              },
              lastMessage: {
                description:
                  'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'ClientMessageData',
                    properties: {
                      seen: {
                        description:
                          'Whether the message has been seen by the current viewer.',
                        type: 'boolean',
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                ],
              },
              id: { description: 'The ID for this thread.', type: 'string' },
              groupID: {
                description: 'The group ID this thread is in.',
                type: 'string',
              },
              total: {
                description:
                  'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                type: 'number',
              },
              userMessages: {
                description:
                  'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                type: 'number',
              },
              actionMessages: {
                description:
                  'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                type: 'number',
              },
              deletedMessages: {
                description: 'The number of deleted messages in this thread.',
                type: 'number',
              },
              resolved: {
                description:
                  'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                type: 'boolean',
              },
              resolvedTimestamp: {
                description:
                  'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              participants: {
                description:
                  'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                type: 'ThreadParticipant[]',
                items: {
                  type: 'ThreadParticipant',
                  properties: {
                    lastSeenTimestamp: {
                      description:
                        'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    userID: {
                      description:
                        "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
                  required: ['lastSeenTimestamp', 'userID', 'displayName'],
                },
              },
              subscribers: {
                description:
                  'All of the users who are subscribed to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              repliers: {
                description:
                  'All of the users who have replied to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              mentioned: {
                description:
                  'All of the users who were mentioned in a message in this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              actionMessageRepliers: {
                description:
                  "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                type: 'string[]',
                items: { type: 'string' },
              },
              typing: {
                description:
                  'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                type: 'string[]',
                items: { type: 'string' },
              },
              name: {
                description:
                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                type: 'string',
              },
              location: {
                description:
                  'The [location](/reference/location) of this thread.',
                type: 'Location',
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'An optional space separated list of classnames to add to the thread.',
                type: ['null', 'string'],
              },
            },
            propertyOrder: [
              'unread',
              'viewerIsThreadParticipant',
              'firstMessage',
              'lastMessage',
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
            required: [
              'unread',
              'viewerIsThreadParticipant',
              'firstMessage',
              'lastMessage',
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
          },
          messageCount: { type: 'number' },
        },
        propertyOrder: ['thread', 'messageCount'],
        required: ['thread', 'messageCount'],
      },
    },
    ThreadCallbackInfo: {
      name: 'ThreadCallbackInfo',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          thread: {
            type: 'ThreadSummary',
            properties: {
              unread: {
                description:
                  "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                type: 'number',
              },
              viewerIsThreadParticipant: {
                description:
                  'Whether the current viewer has either left a message or reacted to this thread.',
                type: 'boolean',
              },
              firstMessage: {
                description:
                  'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'ClientMessageData',
                    properties: {
                      seen: {
                        description:
                          'Whether the message has been seen by the current viewer.',
                        type: 'boolean',
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                ],
              },
              lastMessage: {
                description:
                  'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'ClientMessageData',
                    properties: {
                      seen: {
                        description:
                          'Whether the message has been seen by the current viewer.',
                        type: 'boolean',
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                ],
              },
              id: { description: 'The ID for this thread.', type: 'string' },
              groupID: {
                description: 'The group ID this thread is in.',
                type: 'string',
              },
              total: {
                description:
                  'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                type: 'number',
              },
              userMessages: {
                description:
                  'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                type: 'number',
              },
              actionMessages: {
                description:
                  'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                type: 'number',
              },
              deletedMessages: {
                description: 'The number of deleted messages in this thread.',
                type: 'number',
              },
              resolved: {
                description:
                  'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                type: 'boolean',
              },
              resolvedTimestamp: {
                description:
                  'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              participants: {
                description:
                  'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                type: 'ThreadParticipant[]',
                items: {
                  type: 'ThreadParticipant',
                  properties: {
                    lastSeenTimestamp: {
                      description:
                        'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    userID: {
                      description:
                        "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
                  required: ['lastSeenTimestamp', 'userID', 'displayName'],
                },
              },
              subscribers: {
                description:
                  'All of the users who are subscribed to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              repliers: {
                description:
                  'All of the users who have replied to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              mentioned: {
                description:
                  'All of the users who were mentioned in a message in this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              actionMessageRepliers: {
                description:
                  "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                type: 'string[]',
                items: { type: 'string' },
              },
              typing: {
                description:
                  'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                type: 'string[]',
                items: { type: 'string' },
              },
              name: {
                description:
                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                type: 'string',
              },
              location: {
                description:
                  'The [location](/reference/location) of this thread.',
                type: 'Location',
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'An optional space separated list of classnames to add to the thread.',
                type: ['null', 'string'],
              },
            },
            propertyOrder: [
              'unread',
              'viewerIsThreadParticipant',
              'firstMessage',
              'lastMessage',
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
            required: [
              'unread',
              'viewerIsThreadParticipant',
              'firstMessage',
              'lastMessage',
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
          },
        },
        propertyOrder: ['thread'],
        required: ['thread'],
      },
    },
    ThreadCallbackInfoWithThreadID: {
      name: 'ThreadCallbackInfoWithThreadID',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          threadID: { type: 'string' },
          thread: {
            anyOf: [
              { type: 'null' },
              {
                type: 'ThreadSummary',
                properties: {
                  unread: {
                    description:
                      "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                    type: 'number',
                  },
                  viewerIsThreadParticipant: {
                    description:
                      'Whether the current viewer has either left a message or reacted to this thread.',
                    type: 'boolean',
                  },
                  firstMessage: {
                    description:
                      'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  lastMessage: {
                    description:
                      'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  id: {
                    description: 'The ID for this thread.',
                    type: 'string',
                  },
                  groupID: {
                    description: 'The group ID this thread is in.',
                    type: 'string',
                  },
                  total: {
                    description:
                      'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  userMessages: {
                    description:
                      'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  actionMessages: {
                    description:
                      'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  deletedMessages: {
                    description:
                      'The number of deleted messages in this thread.',
                    type: 'number',
                  },
                  resolved: {
                    description:
                      'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                    type: 'boolean',
                  },
                  resolvedTimestamp: {
                    description:
                      'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  participants: {
                    description:
                      'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                    type: 'ThreadParticipant[]',
                    items: {
                      type: 'ThreadParticipant',
                      properties: {
                        lastSeenTimestamp: {
                          description:
                            'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        userID: {
                          description:
                            "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'lastSeenTimestamp',
                        'userID',
                        'displayName',
                      ],
                      required: ['lastSeenTimestamp', 'userID', 'displayName'],
                    },
                  },
                  subscribers: {
                    description:
                      'All of the users who are subscribed to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  repliers: {
                    description:
                      'All of the users who have replied to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  mentioned: {
                    description:
                      'All of the users who were mentioned in a message in this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  actionMessageRepliers: {
                    description:
                      "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  typing: {
                    description:
                      'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  name: {
                    description:
                      'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                    type: 'string',
                  },
                  location: {
                    description:
                      'The [location](/reference/location) of this thread.',
                    type: 'Location',
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'An optional space separated list of classnames to add to the thread.',
                    type: ['null', 'string'],
                  },
                },
                propertyOrder: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
                required: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
              },
            ],
          },
        },
        propertyOrder: ['threadID', 'thread'],
        required: ['threadID', 'thread'],
      },
    },
    ThreadListWebComponentEvents: {
      name: 'ThreadListWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          threadclick: {
            type: '[threadID: string, threadSummary: ThreadSummary]',
          },
          threadmouseenter: { type: '[string, { thread: ThreadSummary; }]' },
          threadmouseleave: { type: '[string, { thread: ThreadSummary; }]' },
          threadresolve: {
            type: '[{ threadID: string; thread: ThreadSummary; }]',
          },
          threadreopen: {
            type: '[{ threadID: string; thread: ThreadSummary; }]',
          },
          render: { type: '[]' },
          loading: { type: '[]' },
        },
        propertyOrder: [
          'threadclick',
          'threadmouseenter',
          'threadmouseleave',
          'threadresolve',
          'threadreopen',
          'render',
          'loading',
        ],
        required: [
          'threadclick',
          'threadmouseenter',
          'threadmouseleave',
          'threadresolve',
          'threadreopen',
          'render',
          'loading',
        ],
      },
    },
    ComposerWebComponentEvents: {
      name: 'ComposerWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          focus: {
            type: '[{ threadId: string; thread: ThreadSummary | null; }]',
          },
          blur: {
            type: '[{ threadId: string; thread: ThreadSummary | null; }]',
          },
          close: {
            type: '[{ threadId: string; thread: ThreadSummary | null; }]',
          },
          send: {
            type: '[{ threadId: string; messageId: string; thread: ThreadSummary | null; }]',
          },
          threadreopen: {
            type: '[{ threadId: string; thread: ThreadSummary; }]',
          },
        },
        propertyOrder: ['focus', 'blur', 'close', 'send', 'threadreopen'],
        required: ['focus', 'blur', 'close', 'send', 'threadreopen'],
      },
    },
    InboxLauncherWebComponentEvents: {
      name: 'InboxLauncherWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { click: { type: '[]' } },
        propertyOrder: ['click'],
        required: ['click'],
      },
    },
    InboxWebComponentEvents: {
      name: 'InboxWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { closeRequested: { type: '[]' } },
        propertyOrder: ['closeRequested'],
        required: ['closeRequested'],
      },
    },
    NotificationListLauncherWebComponentEvents: {
      name: 'NotificationListLauncherWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { click: { type: '[]' } },
        propertyOrder: ['click'],
        required: ['click'],
      },
    },
    NotificationWebComponentEvents: {
      name: 'NotificationWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          click: {
            type: '[MouseEvent, { notification: CoreNotificationData; message: ClientMessageData | null; location: Location | null; destinationUrl: string; }]',
          },
        },
        propertyOrder: ['click'],
        required: ['click'],
      },
    },
    PinWebComponentEvents: {
      name: 'PinWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          resolve: { type: '[ThreadSummary | null]' },
          click: { type: '[ThreadSummary | null]' },
          mouseenter: { type: '[ThreadSummary | null]' },
          mouseleave: { type: '[ThreadSummary | null]' },
        },
        propertyOrder: ['resolve', 'click', 'mouseenter', 'mouseleave'],
        required: ['resolve', 'click', 'mouseenter', 'mouseleave'],
      },
    },
    MessageInfo: {
      name: 'MessageInfo',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          threadId: { type: 'string' },
          messageId: { type: 'string' },
          thread: {
            type: 'ThreadSummary',
            properties: {
              unread: {
                description:
                  "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                type: 'number',
              },
              viewerIsThreadParticipant: {
                description:
                  'Whether the current viewer has either left a message or reacted to this thread.',
                type: 'boolean',
              },
              firstMessage: {
                description:
                  'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'ClientMessageData',
                    properties: {
                      seen: {
                        description:
                          'Whether the message has been seen by the current viewer.',
                        type: 'boolean',
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                ],
              },
              lastMessage: {
                description:
                  'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'ClientMessageData',
                    properties: {
                      seen: {
                        description:
                          'Whether the message has been seen by the current viewer.',
                        type: 'boolean',
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                ],
              },
              id: { description: 'The ID for this thread.', type: 'string' },
              groupID: {
                description: 'The group ID this thread is in.',
                type: 'string',
              },
              total: {
                description:
                  'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                type: 'number',
              },
              userMessages: {
                description:
                  'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                type: 'number',
              },
              actionMessages: {
                description:
                  'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                type: 'number',
              },
              deletedMessages: {
                description: 'The number of deleted messages in this thread.',
                type: 'number',
              },
              resolved: {
                description:
                  'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                type: 'boolean',
              },
              resolvedTimestamp: {
                description:
                  'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              participants: {
                description:
                  'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                type: 'ThreadParticipant[]',
                items: {
                  type: 'ThreadParticipant',
                  properties: {
                    lastSeenTimestamp: {
                      description:
                        'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    userID: {
                      description:
                        "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
                  required: ['lastSeenTimestamp', 'userID', 'displayName'],
                },
              },
              subscribers: {
                description:
                  'All of the users who are subscribed to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              repliers: {
                description:
                  'All of the users who have replied to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              mentioned: {
                description:
                  'All of the users who were mentioned in a message in this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              actionMessageRepliers: {
                description:
                  "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                type: 'string[]',
                items: { type: 'string' },
              },
              typing: {
                description:
                  'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                type: 'string[]',
                items: { type: 'string' },
              },
              name: {
                description:
                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                type: 'string',
              },
              location: {
                description:
                  'The [location](/reference/location) of this thread.',
                type: 'Location',
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'An optional space separated list of classnames to add to the thread.',
                type: ['null', 'string'],
              },
            },
            propertyOrder: [
              'unread',
              'viewerIsThreadParticipant',
              'firstMessage',
              'lastMessage',
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
            required: [
              'unread',
              'viewerIsThreadParticipant',
              'firstMessage',
              'lastMessage',
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
          },
          message: {
            type: 'ClientMessageData',
            properties: {
              seen: {
                description:
                  'Whether the message has been seen by the current viewer.',
                type: 'boolean',
              },
              id: {
                description:
                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                type: 'string',
              },
              authorID: {
                description: 'The ID for the user that sent the message.',
                type: 'string',
              },
              groupID: {
                description: 'The ID for the group this message belongs to.',
                type: 'string',
              },
              threadID: {
                description: 'The ID for the thread this message is part of.',
                type: 'string',
              },
              content: {
                description: 'The content of the message.',
                type: 'MessageContent',
                items: {
                  anyOf: [
                    {
                      type: 'MessageAssigneeNode',
                      properties: {
                        type: { type: 'MessageNodeType.ASSIGNEE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'indent'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageCodeNode',
                      properties: {
                        type: { type: 'MessageNodeType.CODE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageLinkNode',
                      properties: {
                        type: { type: 'MessageNodeType.LINK' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        url: { type: 'string' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'url'],
                      required: ['type', 'children', 'url'],
                    },
                    {
                      type: 'MessageMentionNode',
                      properties: {
                        type: { type: 'MessageNodeType.MENTION' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageNumberBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.NUMBER_BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        bulletNumber: { type: 'number' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'bulletNumber',
                        'indent',
                      ],
                      required: ['type', 'children', 'bulletNumber'],
                    },
                    {
                      type: 'MessageParagraphNode',
                      properties: {
                        type: { type: 'MessageNodeType.PARAGRAPH' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageQuoteNode',
                      properties: {
                        type: { type: 'MessageNodeType.QUOTE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageTextNode',
                      properties: {
                        type: { type: 'undefined' },
                        class: { type: 'string' },
                        text: { type: 'string' },
                        bold: { type: 'boolean' },
                        italic: { type: 'boolean' },
                        underline: { type: 'boolean' },
                        code: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'text',
                        'bold',
                        'italic',
                        'underline',
                        'code',
                      ],
                      required: ['text'],
                    },
                    {
                      type: 'MessageTodoNode',
                      properties: {
                        type: { type: 'MessageNodeType.TODO' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        todoID: { type: 'string' },
                        done: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'todoID',
                        'done',
                      ],
                      required: ['type', 'children', 'todoID', 'done'],
                    },
                    {
                      type: 'MessageMarkdownNode',
                      properties: {
                        type: { type: 'MessageNodeType.MARKDOWN' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                  ],
                },
              },
              plaintext: {
                description:
                  'A plaintext version of the structured message content.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                type: ['null', 'string'],
              },
              createdTimestamp: {
                description:
                  'The timestamp when this message was created.  The default value is the current time.',
                type: 'Date',
              },
              deletedTimestamp: {
                description:
                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              updatedTimestamp: {
                description:
                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              iconURL: {
                description:
                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                type: ['null', 'string'],
              },
              translationKey: {
                description:
                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                type: ['null', 'string'],
              },
              type: {
                description:
                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                type: 'string',
                enum: ['action_message', 'user_message'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'A optional space separated list of classnames to add to the message.',
                type: ['null', 'string'],
              },
              attachments: {
                description: 'The items attached to this message.',
                type: 'MessageAttachment[]',
                items: {
                  anyOf: [
                    {
                      type: 'MessageFileAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `file` for file attachments.',
                          type: '"file"',
                        },
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                    {
                      type: 'MessageAnnotationAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                          type: '"annotation"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the annotation, if any.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          ],
                        },
                        locationData: {
                          description:
                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                          type: ['null', 'string'],
                        },
                        customData: {
                          description:
                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'CustomAnnotationData',
                              properties: {
                                location: {
                                  description:
                                    'The custom location you produced for this annotation at annotation capture time.',
                                  type: 'Location',
                                },
                                coordsRelativeToTarget: {
                                  description:
                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                  type: 'object',
                                  properties: {
                                    x: { type: 'number' },
                                    y: { type: 'number' },
                                  },
                                  propertyOrder: ['x', 'y'],
                                  required: ['x', 'y'],
                                },
                                label: {
                                  description:
                                    'Your custom user-visible label for the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                              required: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                            },
                          ],
                        },
                        textContent: {
                          description:
                            'The text that was selected when creating the annotation, if any.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                      required: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                    },
                    {
                      type: 'MessageScreenshotAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                          type: '"screenshot"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'screenshot'],
                      required: ['type', 'screenshot'],
                    },
                    {
                      type: 'MessageLinkPreviewAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `link_preview` for file link previews.',
                          type: '"link_preview"',
                        },
                        id: {
                          description: 'The ID of the link preview attachment.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The url from which the preview was generated.',
                          type: 'string',
                        },
                        imageURL: {
                          description:
                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                          type: ['null', 'string'],
                        },
                        title: {
                          description:
                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                          type: ['null', 'string'],
                        },
                        description: {
                          description:
                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                      required: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                    },
                  ],
                },
              },
              reactions: {
                description: 'The reactions to this message.',
                type: 'Reaction[]',
                items: {
                  type: 'Reaction',
                  properties: {
                    reaction: {
                      description: 'The emoji reaction.',
                      type: 'string',
                    },
                    userID: {
                      description:
                        'The ID of the user who reacted to the message.',
                      type: 'string',
                    },
                    timestamp: {
                      description:
                        'The timestamp of when the reaction was created.',
                      type: 'Date',
                    },
                  },
                  propertyOrder: ['reaction', 'userID', 'timestamp'],
                  required: ['reaction', 'userID', 'timestamp'],
                },
              },
              seenBy: {
                description:
                  'A list of IDs of the users that have seen the message.',
                type: 'string[]',
                items: { type: 'string' },
              },
              skipLinkPreviews: {
                description:
                  "If set, Cord won't analyze links in the message to generate previews.",
                type: 'boolean',
              },
            },
            propertyOrder: [
              'seen',
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
            required: [
              'seen',
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
          },
        },
        propertyOrder: ['threadId', 'messageId', 'thread', 'message'],
        required: ['threadId', 'messageId', 'thread', 'message'],
      },
    },
    MessageWebComponentEvents: {
      name: 'MessageWebComponentEvents',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          click: { type: '[messageInfo: MessageInfo]' },
          mouseenter: { type: '[messageInfo: MessageInfo]' },
          mouseleave: { type: '[messageInfo: MessageInfo]' },
          editstart: { type: '[messageInfo: MessageInfo]' },
          editend: { type: '[messageInfo: MessageInfo]' },
          threadresolve: {
            type: '[{ threadID: string; thread: ThreadSummary; }]',
          },
          threadreopen: {
            type: '[{ threadID: string; thread: ThreadSummary; }]',
          },
          render: { type: '[]' },
          loading: { type: '[]' },
        },
        propertyOrder: [
          'click',
          'mouseenter',
          'mouseleave',
          'editstart',
          'editend',
          'threadresolve',
          'threadreopen',
          'render',
          'loading',
        ],
        required: [
          'click',
          'mouseenter',
          'mouseleave',
          'editstart',
          'editend',
          'threadresolve',
          'threadreopen',
          'render',
          'loading',
        ],
      },
    },
    DocumentAnnotationResult: {
      name: 'DocumentAnnotationResult',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          annotation: {
            type: 'MessageAnnotation',
            properties: {
              id: { type: 'string' },
              location: {
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'DocumentLocation',
                    properties: {
                      selector: { type: 'string' },
                      x: { type: 'number' },
                      y: { type: 'number' },
                      iframeSelectors: {
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      onChart: { type: ['boolean', 'null'] },
                      textConfig: {
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'LocationTextConfig',
                            properties: {
                              selectedCharOffset: { type: 'number' },
                              textToMatch: { type: 'string' },
                              textToMatchOffset: { type: 'number' },
                              nodeIndex: { type: 'number' },
                              xVsPointer: { type: 'number' },
                              yVsPointer: { type: 'number' },
                            },
                            propertyOrder: [
                              'selectedCharOffset',
                              'textToMatch',
                              'textToMatchOffset',
                              'nodeIndex',
                              'xVsPointer',
                              'yVsPointer',
                            ],
                            required: [
                              'selectedCharOffset',
                              'textToMatch',
                              'textToMatchOffset',
                              'nodeIndex',
                              'xVsPointer',
                              'yVsPointer',
                            ],
                          },
                        ],
                      },
                      elementIdentifier: {
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'object',
                            properties: {
                              version: { type: 'string', enum: ['1', '2'] },
                              identifier: { type: 'JsonObject' },
                            },
                            propertyOrder: ['version', 'identifier'],
                            required: ['version', 'identifier'],
                          },
                        ],
                      },
                      highlightedTextConfig: {
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'HighlightedTextConfig',
                            properties: {
                              startElementSelector: { type: 'string' },
                              endElementSelector: { type: 'string' },
                              startNodeIndex: { type: 'number' },
                              startNodeOffset: { type: 'number' },
                              endNodeIndex: { type: 'number' },
                              endNodeOffset: { type: 'number' },
                              selectedText: { type: 'string' },
                              textToDisplay: { type: ['null', 'string'] },
                            },
                            propertyOrder: [
                              'startElementSelector',
                              'endElementSelector',
                              'startNodeIndex',
                              'startNodeOffset',
                              'endNodeIndex',
                              'endNodeOffset',
                              'selectedText',
                              'textToDisplay',
                            ],
                            required: [
                              'startElementSelector',
                              'endElementSelector',
                              'startNodeIndex',
                              'startNodeOffset',
                              'endNodeIndex',
                              'endNodeOffset',
                              'selectedText',
                              'textToDisplay',
                            ],
                          },
                        ],
                      },
                      multimediaConfig: {
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'MultimediaConfig',
                            properties: { currentTime: { type: 'number' } },
                            propertyOrder: ['currentTime'],
                            required: ['currentTime'],
                          },
                        ],
                      },
                      additionalTargetData: {
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'AdditionalTargetData',
                            properties: {
                              targetType: {
                                type: 'string',
                                enum: [
                                  'monacoEditor',
                                  'reactTree',
                                  'konvaCanvas',
                                ],
                              },
                              monacoEditor: {
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'object',
                                    properties: {
                                      monacoID: { type: ['null', 'string'] },
                                      lineNumber: { type: 'number' },
                                    },
                                    propertyOrder: ['monacoID', 'lineNumber'],
                                    required: ['monacoID', 'lineNumber'],
                                  },
                                ],
                              },
                              reactTree: {
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'object',
                                    properties: {
                                      key: { type: 'string' },
                                      treeID: { type: ['null', 'string'] },
                                    },
                                    propertyOrder: ['key', 'treeID'],
                                    required: ['key', 'treeID'],
                                  },
                                ],
                              },
                              konvaCanvas: {
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                ],
                              },
                            },
                            propertyOrder: [
                              'targetType',
                              'monacoEditor',
                              'reactTree',
                              'konvaCanvas',
                            ],
                            required: [
                              'targetType',
                              'monacoEditor',
                              'reactTree',
                              'konvaCanvas',
                            ],
                          },
                        ],
                      },
                    },
                    propertyOrder: [
                      'selector',
                      'x',
                      'y',
                      'iframeSelectors',
                      'onChart',
                      'textConfig',
                      'elementIdentifier',
                      'highlightedTextConfig',
                      'multimediaConfig',
                      'additionalTargetData',
                    ],
                    required: [
                      'selector',
                      'x',
                      'y',
                      'iframeSelectors',
                      'onChart',
                      'textConfig',
                      'elementIdentifier',
                      'highlightedTextConfig',
                      'multimediaConfig',
                      'additionalTargetData',
                    ],
                  },
                ],
              },
              customLocation: {
                anyOf: [{ type: 'null' }, { type: 'Location' }],
              },
              customHighlightedTextConfig: {
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'HighlightedTextConfig',
                    properties: {
                      startElementSelector: { type: 'string' },
                      endElementSelector: { type: 'string' },
                      startNodeIndex: { type: 'number' },
                      startNodeOffset: { type: 'number' },
                      endNodeIndex: { type: 'number' },
                      endNodeOffset: { type: 'number' },
                      selectedText: { type: 'string' },
                      textToDisplay: { type: ['null', 'string'] },
                    },
                    propertyOrder: [
                      'startElementSelector',
                      'endElementSelector',
                      'startNodeIndex',
                      'startNodeOffset',
                      'endNodeIndex',
                      'endNodeOffset',
                      'selectedText',
                      'textToDisplay',
                    ],
                    required: [
                      'startElementSelector',
                      'endElementSelector',
                      'startNodeIndex',
                      'startNodeOffset',
                      'endNodeIndex',
                      'endNodeOffset',
                      'selectedText',
                      'textToDisplay',
                    ],
                  },
                ],
              },
              customLabel: { type: ['null', 'string'] },
              coordsRelativeToTarget: {
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'object',
                    properties: {
                      x: { type: 'number' },
                      y: { type: 'number' },
                    },
                    propertyOrder: ['x', 'y'],
                    required: ['x', 'y'],
                  },
                ],
              },
              sourceID: { type: 'string' },
              draft: { type: 'boolean' },
            },
            propertyOrder: [
              'id',
              'location',
              'customLocation',
              'customHighlightedTextConfig',
              'customLabel',
              'coordsRelativeToTarget',
              'sourceID',
              'draft',
            ],
            required: [
              'id',
              'location',
              'customLocation',
              'customHighlightedTextConfig',
              'customLabel',
              'coordsRelativeToTarget',
              'sourceID',
            ],
          },
          screenshot: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  name: { type: 'string' },
                  mimeType: { type: 'string' },
                  url: { type: 'string' },
                  uploadStatus: {
                    type: 'string',
                    enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                  },
                  size: { type: 'number' },
                },
                propertyOrder: [
                  'id',
                  'name',
                  'mimeType',
                  'url',
                  'uploadStatus',
                  'size',
                ],
                required: [
                  'id',
                  'name',
                  'mimeType',
                  'url',
                  'uploadStatus',
                  'size',
                ],
              },
            ],
          },
          blurredScreenshot: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: {
                  id: { type: 'string' },
                  name: { type: 'string' },
                  mimeType: { type: 'string' },
                  url: { type: 'string' },
                  uploadStatus: {
                    type: 'string',
                    enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                  },
                  size: { type: 'number' },
                },
                propertyOrder: [
                  'id',
                  'name',
                  'mimeType',
                  'url',
                  'uploadStatus',
                  'size',
                ],
                required: [
                  'id',
                  'name',
                  'mimeType',
                  'url',
                  'uploadStatus',
                  'size',
                ],
              },
            ],
          },
        },
        propertyOrder: ['annotation', 'screenshot', 'blurredScreenshot'],
        required: ['annotation', 'screenshot', 'blurredScreenshot'],
      },
    },
    MessageAnnotation: {
      name: 'MessageAnnotation',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: 'string' },
          location: {
            anyOf: [
              { type: 'null' },
              {
                type: 'DocumentLocation',
                properties: {
                  selector: { type: 'string' },
                  x: { type: 'number' },
                  y: { type: 'number' },
                  iframeSelectors: {
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  onChart: { type: ['boolean', 'null'] },
                  textConfig: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'LocationTextConfig',
                        properties: {
                          selectedCharOffset: { type: 'number' },
                          textToMatch: { type: 'string' },
                          textToMatchOffset: { type: 'number' },
                          nodeIndex: { type: 'number' },
                          xVsPointer: { type: 'number' },
                          yVsPointer: { type: 'number' },
                        },
                        propertyOrder: [
                          'selectedCharOffset',
                          'textToMatch',
                          'textToMatchOffset',
                          'nodeIndex',
                          'xVsPointer',
                          'yVsPointer',
                        ],
                        required: [
                          'selectedCharOffset',
                          'textToMatch',
                          'textToMatchOffset',
                          'nodeIndex',
                          'xVsPointer',
                          'yVsPointer',
                        ],
                      },
                    ],
                  },
                  elementIdentifier: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'object',
                        properties: {
                          version: { type: 'string', enum: ['1', '2'] },
                          identifier: { type: 'JsonObject' },
                        },
                        propertyOrder: ['version', 'identifier'],
                        required: ['version', 'identifier'],
                      },
                    ],
                  },
                  highlightedTextConfig: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'HighlightedTextConfig',
                        properties: {
                          startElementSelector: { type: 'string' },
                          endElementSelector: { type: 'string' },
                          startNodeIndex: { type: 'number' },
                          startNodeOffset: { type: 'number' },
                          endNodeIndex: { type: 'number' },
                          endNodeOffset: { type: 'number' },
                          selectedText: { type: 'string' },
                          textToDisplay: { type: ['null', 'string'] },
                        },
                        propertyOrder: [
                          'startElementSelector',
                          'endElementSelector',
                          'startNodeIndex',
                          'startNodeOffset',
                          'endNodeIndex',
                          'endNodeOffset',
                          'selectedText',
                          'textToDisplay',
                        ],
                        required: [
                          'startElementSelector',
                          'endElementSelector',
                          'startNodeIndex',
                          'startNodeOffset',
                          'endNodeIndex',
                          'endNodeOffset',
                          'selectedText',
                          'textToDisplay',
                        ],
                      },
                    ],
                  },
                  multimediaConfig: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'MultimediaConfig',
                        properties: { currentTime: { type: 'number' } },
                        propertyOrder: ['currentTime'],
                        required: ['currentTime'],
                      },
                    ],
                  },
                  additionalTargetData: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'AdditionalTargetData',
                        properties: {
                          targetType: {
                            type: 'string',
                            enum: ['monacoEditor', 'reactTree', 'konvaCanvas'],
                          },
                          monacoEditor: {
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'object',
                                properties: {
                                  monacoID: { type: ['null', 'string'] },
                                  lineNumber: { type: 'number' },
                                },
                                propertyOrder: ['monacoID', 'lineNumber'],
                                required: ['monacoID', 'lineNumber'],
                              },
                            ],
                          },
                          reactTree: {
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'object',
                                properties: {
                                  key: { type: 'string' },
                                  treeID: { type: ['null', 'string'] },
                                },
                                propertyOrder: ['key', 'treeID'],
                                required: ['key', 'treeID'],
                              },
                            ],
                          },
                          konvaCanvas: {
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'object',
                                properties: {
                                  x: { type: 'number' },
                                  y: { type: 'number' },
                                },
                                propertyOrder: ['x', 'y'],
                                required: ['x', 'y'],
                              },
                            ],
                          },
                        },
                        propertyOrder: [
                          'targetType',
                          'monacoEditor',
                          'reactTree',
                          'konvaCanvas',
                        ],
                        required: [
                          'targetType',
                          'monacoEditor',
                          'reactTree',
                          'konvaCanvas',
                        ],
                      },
                    ],
                  },
                },
                propertyOrder: [
                  'selector',
                  'x',
                  'y',
                  'iframeSelectors',
                  'onChart',
                  'textConfig',
                  'elementIdentifier',
                  'highlightedTextConfig',
                  'multimediaConfig',
                  'additionalTargetData',
                ],
                required: [
                  'selector',
                  'x',
                  'y',
                  'iframeSelectors',
                  'onChart',
                  'textConfig',
                  'elementIdentifier',
                  'highlightedTextConfig',
                  'multimediaConfig',
                  'additionalTargetData',
                ],
              },
            ],
          },
          customLocation: { anyOf: [{ type: 'null' }, { type: 'Location' }] },
          customHighlightedTextConfig: {
            anyOf: [
              { type: 'null' },
              {
                type: 'HighlightedTextConfig',
                properties: {
                  startElementSelector: { type: 'string' },
                  endElementSelector: { type: 'string' },
                  startNodeIndex: { type: 'number' },
                  startNodeOffset: { type: 'number' },
                  endNodeIndex: { type: 'number' },
                  endNodeOffset: { type: 'number' },
                  selectedText: { type: 'string' },
                  textToDisplay: { type: ['null', 'string'] },
                },
                propertyOrder: [
                  'startElementSelector',
                  'endElementSelector',
                  'startNodeIndex',
                  'startNodeOffset',
                  'endNodeIndex',
                  'endNodeOffset',
                  'selectedText',
                  'textToDisplay',
                ],
                required: [
                  'startElementSelector',
                  'endElementSelector',
                  'startNodeIndex',
                  'startNodeOffset',
                  'endNodeIndex',
                  'endNodeOffset',
                  'selectedText',
                  'textToDisplay',
                ],
              },
            ],
          },
          customLabel: { type: ['null', 'string'] },
          coordsRelativeToTarget: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: { x: { type: 'number' }, y: { type: 'number' } },
                propertyOrder: ['x', 'y'],
                required: ['x', 'y'],
              },
            ],
          },
          sourceID: { type: 'string' },
          draft: { type: 'boolean' },
        },
        propertyOrder: [
          'id',
          'location',
          'customLocation',
          'customHighlightedTextConfig',
          'customLabel',
          'coordsRelativeToTarget',
          'sourceID',
          'draft',
        ],
        required: [
          'id',
          'location',
          'customLocation',
          'customHighlightedTextConfig',
          'customLabel',
          'coordsRelativeToTarget',
          'sourceID',
        ],
      },
    },
    DocumentLocation: {
      name: 'DocumentLocation',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          selector: { type: 'string' },
          x: { type: 'number' },
          y: { type: 'number' },
          iframeSelectors: { type: 'string[]', items: { type: 'string' } },
          onChart: { type: ['boolean', 'null'] },
          textConfig: {
            anyOf: [
              { type: 'null' },
              {
                type: 'LocationTextConfig',
                properties: {
                  selectedCharOffset: { type: 'number' },
                  textToMatch: { type: 'string' },
                  textToMatchOffset: { type: 'number' },
                  nodeIndex: { type: 'number' },
                  xVsPointer: { type: 'number' },
                  yVsPointer: { type: 'number' },
                },
                propertyOrder: [
                  'selectedCharOffset',
                  'textToMatch',
                  'textToMatchOffset',
                  'nodeIndex',
                  'xVsPointer',
                  'yVsPointer',
                ],
                required: [
                  'selectedCharOffset',
                  'textToMatch',
                  'textToMatchOffset',
                  'nodeIndex',
                  'xVsPointer',
                  'yVsPointer',
                ],
              },
            ],
          },
          elementIdentifier: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: {
                  version: { type: 'string', enum: ['1', '2'] },
                  identifier: { type: 'JsonObject' },
                },
                propertyOrder: ['version', 'identifier'],
                required: ['version', 'identifier'],
              },
            ],
          },
          highlightedTextConfig: {
            anyOf: [
              { type: 'null' },
              {
                type: 'HighlightedTextConfig',
                properties: {
                  startElementSelector: { type: 'string' },
                  endElementSelector: { type: 'string' },
                  startNodeIndex: { type: 'number' },
                  startNodeOffset: { type: 'number' },
                  endNodeIndex: { type: 'number' },
                  endNodeOffset: { type: 'number' },
                  selectedText: { type: 'string' },
                  textToDisplay: { type: ['null', 'string'] },
                },
                propertyOrder: [
                  'startElementSelector',
                  'endElementSelector',
                  'startNodeIndex',
                  'startNodeOffset',
                  'endNodeIndex',
                  'endNodeOffset',
                  'selectedText',
                  'textToDisplay',
                ],
                required: [
                  'startElementSelector',
                  'endElementSelector',
                  'startNodeIndex',
                  'startNodeOffset',
                  'endNodeIndex',
                  'endNodeOffset',
                  'selectedText',
                  'textToDisplay',
                ],
              },
            ],
          },
          multimediaConfig: {
            anyOf: [
              { type: 'null' },
              {
                type: 'MultimediaConfig',
                properties: { currentTime: { type: 'number' } },
                propertyOrder: ['currentTime'],
                required: ['currentTime'],
              },
            ],
          },
          additionalTargetData: {
            anyOf: [
              { type: 'null' },
              {
                type: 'AdditionalTargetData',
                properties: {
                  targetType: {
                    type: 'string',
                    enum: ['monacoEditor', 'reactTree', 'konvaCanvas'],
                  },
                  monacoEditor: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'object',
                        properties: {
                          monacoID: { type: ['null', 'string'] },
                          lineNumber: { type: 'number' },
                        },
                        propertyOrder: ['monacoID', 'lineNumber'],
                        required: ['monacoID', 'lineNumber'],
                      },
                    ],
                  },
                  reactTree: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'object',
                        properties: {
                          key: { type: 'string' },
                          treeID: { type: ['null', 'string'] },
                        },
                        propertyOrder: ['key', 'treeID'],
                        required: ['key', 'treeID'],
                      },
                    ],
                  },
                  konvaCanvas: {
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'object',
                        properties: {
                          x: { type: 'number' },
                          y: { type: 'number' },
                        },
                        propertyOrder: ['x', 'y'],
                        required: ['x', 'y'],
                      },
                    ],
                  },
                },
                propertyOrder: [
                  'targetType',
                  'monacoEditor',
                  'reactTree',
                  'konvaCanvas',
                ],
                required: [
                  'targetType',
                  'monacoEditor',
                  'reactTree',
                  'konvaCanvas',
                ],
              },
            ],
          },
        },
        propertyOrder: [
          'selector',
          'x',
          'y',
          'iframeSelectors',
          'onChart',
          'textConfig',
          'elementIdentifier',
          'highlightedTextConfig',
          'multimediaConfig',
          'additionalTargetData',
        ],
        required: [
          'selector',
          'x',
          'y',
          'iframeSelectors',
          'onChart',
          'textConfig',
          'elementIdentifier',
          'highlightedTextConfig',
          'multimediaConfig',
          'additionalTargetData',
        ],
      },
    },
    LocationTextConfig: {
      name: 'LocationTextConfig',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          selectedCharOffset: { type: 'number' },
          textToMatch: { type: 'string' },
          textToMatchOffset: { type: 'number' },
          nodeIndex: { type: 'number' },
          xVsPointer: { type: 'number' },
          yVsPointer: { type: 'number' },
        },
        propertyOrder: [
          'selectedCharOffset',
          'textToMatch',
          'textToMatchOffset',
          'nodeIndex',
          'xVsPointer',
          'yVsPointer',
        ],
        required: [
          'selectedCharOffset',
          'textToMatch',
          'textToMatchOffset',
          'nodeIndex',
          'xVsPointer',
          'yVsPointer',
        ],
      },
    },
    HighlightedTextConfig: {
      name: 'HighlightedTextConfig',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          startElementSelector: { type: 'string' },
          endElementSelector: { type: 'string' },
          startNodeIndex: { type: 'number' },
          startNodeOffset: { type: 'number' },
          endNodeIndex: { type: 'number' },
          endNodeOffset: { type: 'number' },
          selectedText: { type: 'string' },
          textToDisplay: { type: ['null', 'string'] },
        },
        propertyOrder: [
          'startElementSelector',
          'endElementSelector',
          'startNodeIndex',
          'startNodeOffset',
          'endNodeIndex',
          'endNodeOffset',
          'selectedText',
          'textToDisplay',
        ],
        required: [
          'startElementSelector',
          'endElementSelector',
          'startNodeIndex',
          'startNodeOffset',
          'endNodeIndex',
          'endNodeOffset',
          'selectedText',
          'textToDisplay',
        ],
      },
    },
    MultimediaConfig: {
      name: 'MultimediaConfig',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { currentTime: { type: 'number' } },
        propertyOrder: ['currentTime'],
        required: ['currentTime'],
      },
    },
    AdditionalTargetData: {
      name: 'AdditionalTargetData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          targetType: {
            type: 'string',
            enum: ['monacoEditor', 'reactTree', 'konvaCanvas'],
          },
          monacoEditor: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: {
                  monacoID: { type: ['null', 'string'] },
                  lineNumber: { type: 'number' },
                },
                propertyOrder: ['monacoID', 'lineNumber'],
                required: ['monacoID', 'lineNumber'],
              },
            ],
          },
          reactTree: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: {
                  key: { type: 'string' },
                  treeID: { type: ['null', 'string'] },
                },
                propertyOrder: ['key', 'treeID'],
                required: ['key', 'treeID'],
              },
            ],
          },
          konvaCanvas: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: { x: { type: 'number' }, y: { type: 'number' } },
                propertyOrder: ['x', 'y'],
                required: ['x', 'y'],
              },
            ],
          },
        },
        propertyOrder: [
          'targetType',
          'monacoEditor',
          'reactTree',
          'konvaCanvas',
        ],
        required: ['targetType', 'monacoEditor', 'reactTree', 'konvaCanvas'],
      },
    },
    HTMLCordElement: {
      name: 'HTMLCordElement',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { initialised: { type: 'true' } },
        propertyOrder: ['initialised'],
        required: [],
      },
    },
    HTMLCordSidebarElement: {
      name: 'HTMLCordSidebarElement',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          initialised: { type: 'true' },
          screenshotConfig: {
            anyOf: [
              { type: 'undefined' },
              {
                type: 'object',
                properties: {
                  targetElement: {
                    description:
                      'The screenshot will only include this DOM element and all of its children. Unless a screenshotUrlOverride is provided, in which case the screenshot will be the image available at that URL.',
                    type: 'HTMLElement',
                  },
                  cropRectangle: {
                    description:
                      'Crop the screenshot to a specific rectangle within the target element. All values must be specified in pixels.',
                    type: 'Partial<{ x: number; y: number; width: number; height: number; }>',
                    properties: {
                      x: {
                        description:
                          'X coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      y: {
                        description:
                          'Y coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      width: {
                        description:
                          'By default, this is the width of the `targetElement`',
                        type: 'number',
                      },
                      height: {
                        description:
                          'By default, this is the height of the `targetElement`',
                        type: 'number',
                      },
                    },
                    propertyOrder: ['x', 'y', 'width', 'height'],
                    required: [],
                  },
                  screenshotUrlOverride: {
                    description:
                      'If specified, Cord will NOT take a screenshot and use the image at this URL instead.',
                    type: 'string',
                  },
                },
                propertyOrder: [
                  'targetElement',
                  'cropRectangle',
                  'screenshotUrlOverride',
                ],
                required: [],
              },
            ],
          },
        },
        propertyOrder: ['initialised', 'screenshotConfig'],
        required: ['screenshotConfig'],
      },
    },
    HTMLCordFloatingThreadsElement: {
      name: 'HTMLCordFloatingThreadsElement',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          initialised: { type: 'true' },
          screenshotConfig: {
            anyOf: [
              { type: 'undefined' },
              {
                type: 'object',
                properties: {
                  targetElement: {
                    description:
                      'The screenshot will only include this DOM element and all of its children. Unless a screenshotUrlOverride is provided, in which case the screenshot will be the image available at that URL.',
                    type: 'HTMLElement',
                  },
                  cropRectangle: {
                    description:
                      'Crop the screenshot to a specific rectangle within the target element. All values must be specified in pixels.',
                    type: 'Partial<{ x: number; y: number; width: number; height: number; }>',
                    properties: {
                      x: {
                        description:
                          'X coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      y: {
                        description:
                          'Y coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      width: {
                        description:
                          'By default, this is the width of the `targetElement`',
                        type: 'number',
                      },
                      height: {
                        description:
                          'By default, this is the height of the `targetElement`',
                        type: 'number',
                      },
                    },
                    propertyOrder: ['x', 'y', 'width', 'height'],
                    required: [],
                  },
                  screenshotUrlOverride: {
                    description:
                      'If specified, Cord will NOT take a screenshot and use the image at this URL instead.',
                    type: 'string',
                  },
                },
                propertyOrder: [
                  'targetElement',
                  'cropRectangle',
                  'screenshotUrlOverride',
                ],
                required: [],
              },
            ],
          },
        },
        propertyOrder: ['initialised', 'screenshotConfig'],
        required: ['screenshotConfig'],
      },
    },
    LiveCursorsEventToLocationFnOptions: {
      name: 'LiveCursorsEventToLocationFnOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { send_clicks: { type: 'boolean' } },
        propertyOrder: ['send_clicks'],
        required: [],
      },
    },
    HTMLCordLiveCursorsElement: {
      name: 'HTMLCordLiveCursorsElement',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { initialised: { type: 'true' } },
        propertyOrder: ['initialised'],
        required: [],
      },
    },
    HTMLCordMultipleCursorsElement: {
      name: 'HTMLCordMultipleCursorsElement',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { initialised: { type: 'true' } },
        propertyOrder: ['initialised'],
        required: [],
      },
    },
    HTMLCordAnchoredThreadsElement: {
      name: 'HTMLCordAnchoredThreadsElement',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          initialised: { type: 'true' },
          screenshotConfig: {
            anyOf: [
              { type: 'undefined' },
              {
                type: 'object',
                properties: {
                  targetElement: {
                    description:
                      'The screenshot will only include this DOM element and all of its children. Unless a screenshotUrlOverride is provided, in which case the screenshot will be the image available at that URL.',
                    type: 'HTMLElement',
                  },
                  cropRectangle: {
                    description:
                      'Crop the screenshot to a specific rectangle within the target element. All values must be specified in pixels.',
                    type: 'Partial<{ x: number; y: number; width: number; height: number; }>',
                    properties: {
                      x: {
                        description:
                          'X coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      y: {
                        description:
                          'Y coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      width: {
                        description:
                          'By default, this is the width of the `targetElement`',
                        type: 'number',
                      },
                      height: {
                        description:
                          'By default, this is the height of the `targetElement`',
                        type: 'number',
                      },
                    },
                    propertyOrder: ['x', 'y', 'width', 'height'],
                    required: [],
                  },
                  screenshotUrlOverride: {
                    description:
                      'If specified, Cord will NOT take a screenshot and use the image at this URL instead.',
                    type: 'string',
                  },
                },
                propertyOrder: [
                  'targetElement',
                  'cropRectangle',
                  'screenshotUrlOverride',
                ],
                required: [],
              },
            ],
          },
        },
        propertyOrder: ['initialised', 'screenshotConfig'],
        required: ['screenshotConfig'],
      },
    },
    ThreadOptions: {
      name: 'ThreadOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          additional_subscribers_on_create: {
            type: 'string[]',
            items: { type: 'string' },
          },
        },
        propertyOrder: ['additional_subscribers_on_create'],
        required: ['additional_subscribers_on_create'],
      },
    },
    HTMLCordThreadElement: {
      name: 'HTMLCordThreadElement',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          screenshotConfig: {
            anyOf: [
              { type: 'undefined' },
              {
                type: 'object',
                properties: {
                  targetElement: {
                    description:
                      'The screenshot will only include this DOM element and all of its children. Unless a screenshotUrlOverride is provided, in which case the screenshot will be the image available at that URL.',
                    type: 'HTMLElement',
                  },
                  cropRectangle: {
                    description:
                      'Crop the screenshot to a specific rectangle within the target element. All values must be specified in pixels.',
                    type: 'Partial<{ x: number; y: number; width: number; height: number; }>',
                    properties: {
                      x: {
                        description:
                          'X coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      y: {
                        description:
                          'Y coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      width: {
                        description:
                          'By default, this is the width of the `targetElement`',
                        type: 'number',
                      },
                      height: {
                        description:
                          'By default, this is the height of the `targetElement`',
                        type: 'number',
                      },
                    },
                    propertyOrder: ['x', 'y', 'width', 'height'],
                    required: [],
                  },
                  screenshotUrlOverride: {
                    description:
                      'If specified, Cord will NOT take a screenshot and use the image at this URL instead.',
                    type: 'string',
                  },
                },
                propertyOrder: [
                  'targetElement',
                  'cropRectangle',
                  'screenshotUrlOverride',
                ],
                required: [],
              },
            ],
          },
          initialised: { type: 'true' },
        },
        propertyOrder: ['screenshotConfig', 'initialised'],
        required: ['screenshotConfig'],
      },
    },
    WithScreenshotConfig: {
      name: 'WithScreenshotConfig',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          screenshotConfig: {
            anyOf: [
              { type: 'undefined' },
              {
                type: 'object',
                properties: {
                  targetElement: {
                    description:
                      'The screenshot will only include this DOM element and all of its children. Unless a screenshotUrlOverride is provided, in which case the screenshot will be the image available at that URL.',
                    type: 'HTMLElement',
                  },
                  cropRectangle: {
                    description:
                      'Crop the screenshot to a specific rectangle within the target element. All values must be specified in pixels.',
                    type: 'Partial<{ x: number; y: number; width: number; height: number; }>',
                    properties: {
                      x: {
                        description:
                          'X coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      y: {
                        description:
                          'Y coordinate of the top left corner of the rectangle. By default, this matches the top left corner of the `targetElement`',
                        type: 'number',
                      },
                      width: {
                        description:
                          'By default, this is the width of the `targetElement`',
                        type: 'number',
                      },
                      height: {
                        description:
                          'By default, this is the height of the `targetElement`',
                        type: 'number',
                      },
                    },
                    propertyOrder: ['x', 'y', 'width', 'height'],
                    required: [],
                  },
                  screenshotUrlOverride: {
                    description:
                      'If specified, Cord will NOT take a screenshot and use the image at this URL instead.',
                    type: 'string',
                  },
                },
                propertyOrder: [
                  'targetElement',
                  'cropRectangle',
                  'screenshotUrlOverride',
                ],
                required: [],
              },
            ],
          },
          initialised: { type: 'true' },
        },
        propertyOrder: ['screenshotConfig', 'initialised'],
        required: ['screenshotConfig'],
      },
    },
    ApplicationData: {
      name: 'ApplicationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: 'string', description: 'The ID for the project.' },
          secret: {
            type: 'string',
            description:
              'The secret key for the project.  Please treat securely as access to this will allow someone to take actions as if they are the project.',
          },
          name: { type: 'string', description: 'Name of the project' },
          iconURL: {
            type: ['null', 'string'],
            description:
              'URL for the project icon. It should be a square image of 256x256. This will be used as the avatar for messages and emails coming from your project.  If not specified, the Cord logo will be used.',
          },
          eventWebhookURL: {
            type: ['null', 'string'],
            description: 'The URL that the events webhook is sent to',
          },
          redirectURI: {
            type: ['null', 'string'],
            description:
              'Custom url link contained in email and slack notifications. These notifications are sent when a user is mentioned or thread is shared and by default, the link points to the page where the conversation happened. For more information, please refer to the [API docs](/customization/redirect-link)',
          },
          emailSettings: {
            type: 'EmailSettings',
            properties: {
              name: {
                description:
                  "Name to show in both the subject and the body of the email. Defaults to your project's name.",
                type: ['null', 'string'],
              },
              imageURL: {
                description:
                  'URL for your logo image. The default for this is the Cord logo.',
                type: ['null', 'string'],
              },
              sender: {
                description:
                  'Email from which notifications for your service will be sent from. This will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',
                type: ['null', 'string'],
              },
              logoConfig: {
                description:
                  'Customization for your logo size. Providing either a height (maximum 120) or width (maximum 240) will result in the image being proportionally resized to fit in a container of that size. The default value is `{"width": 140}`.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'object',
                    properties: { width: { description: '', type: 'number' } },
                    propertyOrder: ['width'],
                    required: ['width'],
                  },
                  {
                    type: 'object',
                    properties: { height: { description: '', type: 'number' } },
                    propertyOrder: ['height'],
                    required: ['height'],
                  },
                ],
              },
              enableEmailNotifications: {
                description:
                  'Whether you want your users to receive notification emails. The default value is true.',
                type: 'boolean',
              },
            },
            propertyOrder: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            required: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            description: 'Email settings for notifications.',
          },
          createdTimestamp: {
            type: 'Date',
            description: 'The time at which the project was created',
          },
        },
        propertyOrder: [
          'id',
          'secret',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
          'emailSettings',
          'createdTimestamp',
        ],
        required: [
          'id',
          'secret',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
          'emailSettings',
          'createdTimestamp',
        ],
      },
    },
    ServerCreateApplication: {
      name: 'ServerCreateApplication',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          emailSettings: {
            type: 'Partial<EmailSettings>',
            properties: {
              name: {
                description:
                  "Name to show in both the subject and the body of the email. Defaults to your project's name.",
                type: ['null', 'string'],
              },
              imageURL: {
                description:
                  'URL for your logo image. The default for this is the Cord logo.',
                type: ['null', 'string'],
              },
              sender: {
                description:
                  'Email from which notifications for your service will be sent from. This will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',
                type: ['null', 'string'],
              },
              logoConfig: {
                description:
                  'Customization for your logo size. Providing either a height (maximum 120) or width (maximum 240) will result in the image being proportionally resized to fit in a container of that size. The default value is `{"width": 140}`.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'object',
                    properties: { width: { description: '', type: 'number' } },
                    propertyOrder: ['width'],
                    required: ['width'],
                  },
                  {
                    type: 'object',
                    properties: { height: { description: '', type: 'number' } },
                    propertyOrder: ['height'],
                    required: ['height'],
                  },
                ],
              },
              enableEmailNotifications: {
                description:
                  'Whether you want your users to receive notification emails. The default value is true.',
                type: 'boolean',
              },
            },
            propertyOrder: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            required: [],
          },
          name: { type: 'string', description: 'Name of the project' },
          iconURL: {
            type: ['null', 'string'],
            description:
              'URL for the project icon. It should be a square image of 256x256. This will be used as the avatar for messages and emails coming from your project.  If not specified, the Cord logo will be used.',
          },
          eventWebhookURL: {
            type: ['null', 'string'],
            description: 'The URL that the events webhook is sent to',
          },
          redirectURI: {
            type: ['null', 'string'],
            description:
              'Custom url link contained in email and slack notifications. These notifications are sent when a user is mentioned or thread is shared and by default, the link points to the page where the conversation happened. For more information, please refer to the [API docs](/customization/redirect-link)',
          },
        },
        propertyOrder: [
          'emailSettings',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
        ],
        required: ['name'],
      },
    },
    ServerUpdateApplication: {
      name: 'ServerUpdateApplication',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          emailSettings: {
            type: 'Partial<EmailSettings>',
            properties: {
              name: {
                description:
                  "Name to show in both the subject and the body of the email. Defaults to your project's name.",
                type: ['null', 'string'],
              },
              imageURL: {
                description:
                  'URL for your logo image. The default for this is the Cord logo.',
                type: ['null', 'string'],
              },
              sender: {
                description:
                  'Email from which notifications for your service will be sent from. This will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',
                type: ['null', 'string'],
              },
              logoConfig: {
                description:
                  'Customization for your logo size. Providing either a height (maximum 120) or width (maximum 240) will result in the image being proportionally resized to fit in a container of that size. The default value is `{"width": 140}`.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'object',
                    properties: { width: { description: '', type: 'number' } },
                    propertyOrder: ['width'],
                    required: ['width'],
                  },
                  {
                    type: 'object',
                    properties: { height: { description: '', type: 'number' } },
                    propertyOrder: ['height'],
                    required: ['height'],
                  },
                ],
              },
              enableEmailNotifications: {
                description:
                  'Whether you want your users to receive notification emails. The default value is true.',
                type: 'boolean',
              },
            },
            propertyOrder: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            required: [],
          },
          name: { type: 'string', description: 'Name of the project' },
          iconURL: {
            type: ['null', 'string'],
            description:
              'URL for the project icon. It should be a square image of 256x256. This will be used as the avatar for messages and emails coming from your project.  If not specified, the Cord logo will be used.',
          },
          eventWebhookURL: {
            type: ['null', 'string'],
            description: 'The URL that the events webhook is sent to',
          },
          redirectURI: {
            type: ['null', 'string'],
            description:
              'Custom url link contained in email and slack notifications. These notifications are sent when a user is mentioned or thread is shared and by default, the link points to the page where the conversation happened. For more information, please refer to the [API docs](/customization/redirect-link)',
          },
        },
        propertyOrder: [
          'emailSettings',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
        ],
        required: [],
      },
    },
    ServerDeleteApplication: {
      name: 'ServerDeleteApplication',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          secret: {
            type: 'string',
            description:
              'Secret key of the project that you want to delete. This can be found within the Cord Console.',
          },
        },
        propertyOrder: ['secret'],
        required: ['secret'],
      },
    },
    ClientAuthTokenData: {
      name: 'ClientAuthTokenData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          project_id: { type: 'string', description: 'Your project ID' },
          user_id: {
            type: ['string', 'number'],
            description: 'The ID for the user',
          },
          group_id: {
            type: ['string', 'number'],
            description: 'The ID for the user’s group',
          },
          user_details: {
            type: 'ServerUpdateUser',
            properties: {
              name: { description: 'Full user name', type: ['null', 'string'] },
              email: { description: 'Email address', type: ['null', 'string'] },
              shortName: {
                description:
                  'Short user name. In most cases, this will be preferred over name when set.',
                type: ['null', 'string'],
              },
              status: { type: 'string', enum: ['active', 'deleted'] },
              profilePictureURL: {
                description:
                  "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
                type: ['null', 'string'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              addGroups: {
                description:
                  "A list of group IDs this user should be made a member of.  It is an error to specify a group that doesn't exist or one that is also being removed in the same call.  It is not an error to add a user to a group they're already a member of.",
                type: 'string[]',
                items: { type: 'string' },
              },
              removeGroups: {
                description:
                  "A list of group IDs this user should stop being a member of.  It is an error to specify a group that doesn't exist or one that is also being added in the same call.  It is not an error to remove a user from a group they are not a member of.",
                type: 'string[]',
                items: { type: 'string' },
              },
            },
            propertyOrder: [
              'name',
              'email',
              'shortName',
              'status',
              'profilePictureURL',
              'metadata',
              'addGroups',
              'removeGroups',
            ],
            required: [],
            description:
              'If present, update’s the user’s details, or creates a user with those details if the user_id is new to Cord. This is an object that contains the same fields as the [user management REST endpoint](/rest-apis/users/)',
          },
          group_details: {
            type: 'Partial<Omit<ServerGroupData, "id" | "members" | "connectedToSlack"> & { members?: ID[] | undefined; }>',
            properties: {
              name: {
                description: 'Group name. Required when creating an group.',
                type: 'string',
              },
              status: {
                description:
                  'Whether this group is active or deleted.  Attempting to log into a deleted group will fail.',
                type: 'string',
                enum: ['active', 'deleted'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              members: {
                description:
                  'List of partner-specific IDs of the users who are members of this group. This will replace the existing members.',
                type: 'ID[]',
                items: { type: ['string', 'number'] },
              },
            },
            propertyOrder: ['name', 'status', 'metadata', 'members'],
            required: [],
            description:
              "If present, updates the group's details, or creates a group with those details if the group_id is new to Cord. This is an object that contains the same fields as the [group management REST endpoint](/rest-apis/groups/)",
          },
        },
        propertyOrder: [
          'project_id',
          'user_id',
          'group_id',
          'user_details',
          'group_details',
        ],
        required: ['user_id'],
      },
    },
    ServerUpdateBatch: {
      name: 'ServerUpdateBatch',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          users: {
            type: 'BatchUpdateUser[]',
            items: {
              type: 'BatchUpdateUser',
              properties: {
                name: {
                  description: 'Full user name',
                  type: ['null', 'string'],
                },
                email: {
                  description: 'Email address',
                  type: ['null', 'string'],
                },
                shortName: {
                  description:
                    'Short user name. In most cases, this will be preferred over name when set.',
                  type: ['null', 'string'],
                },
                status: { type: 'string', enum: ['active', 'deleted'] },
                profilePictureURL: {
                  description:
                    "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                id: { type: ['string', 'number'] },
              },
              propertyOrder: [
                'name',
                'email',
                'shortName',
                'status',
                'profilePictureURL',
                'metadata',
                'id',
              ],
              required: ['id'],
            },
            description:
              'List of user objects. Every object must include the id field. If the user already exists, all other fields are optional and only updated when present. If the user does not already exist, fields are required as described in the [Create or update a user](/rest-apis/users#Create-or-update-a-user) API.\n\nThis field has a maximum length of 10000.',
          },
          groups: {
            type: 'BatchUpdateGroup[]',
            items: {
              type: 'BatchUpdateGroup',
              properties: {
                name: {
                  description: 'Group name. Required when creating an group.',
                  type: 'string',
                },
                status: {
                  description:
                    'Whether this group is active or deleted.  Attempting to log into a deleted group will fail.',
                  type: 'string',
                  enum: ['active', 'deleted'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                members: {
                  description:
                    'List of partner-specific IDs of the users who are members of this group. This will replace the existing members.',
                  type: 'ID[]',
                  items: { type: ['string', 'number'] },
                },
                id: { type: ['string', 'number'] },
              },
              propertyOrder: ['name', 'status', 'metadata', 'members', 'id'],
              required: ['id'],
            },
            description:
              'List of group objects. Every object must include the id field. If the group already exists, all other fields are optional and only updated when present. If the group does not already exist, fields are required as described in the [Create or update a group](/rest-apis/groups/#create-or-update-a-group) API.\n\nThis field has a maximum length of 1000.',
          },
        },
        propertyOrder: ['users', 'groups'],
        required: [],
      },
    },
    LocationFilterOptions: {
      name: 'LocationFilterOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          value: {
            type: 'Location',
            description: 'The [Location](/reference/location) of the threads.',
          },
          partialMatch: {
            type: 'boolean',
            description:
              'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
          },
        },
        propertyOrder: ['value', 'partialMatch'],
        required: ['value', 'partialMatch'],
      },
    },
    PaginationParams: {
      name: 'PaginationParams',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
        },
        propertyOrder: ['loading', 'fetchMore', 'hasMore'],
        required: ['loading', 'fetchMore', 'hasMore'],
      },
    },
    TimestampRange: {
      name: 'TimestampRange',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          from: {
            type: 'Date',
            description:
              "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
          },
          to: {
            type: 'Date',
            description:
              "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
          },
        },
        propertyOrder: ['from', 'to'],
        required: [],
      },
    },
    FilterParameters: {
      name: 'FilterParameters',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          location: {
            anyOf: [
              { type: 'Location' },
              {
                type: 'LocationFilterOptions',
                properties: {
                  value: {
                    description:
                      'The [Location](/reference/location) of the threads.',
                    type: 'Location',
                  },
                  partialMatch: {
                    description:
                      'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                    type: 'boolean',
                  },
                },
                propertyOrder: ['value', 'partialMatch'],
                required: ['value', 'partialMatch'],
              },
            ],
            description:
              'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Return only objects containing these metadata keys and values. (Metadata is arbitrary key-value pairs of data that you can associate with an object.)',
          },
          groupID: {
            type: 'string',
            description:
              'Return only threads [belonging to this group](/reference/permissions).',
          },
          firstMessageTimestamp: {
            type: 'TimestampRange',
            properties: {
              from: {
                description:
                  "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                type: 'Date',
              },
              to: {
                description:
                  "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                type: 'Date',
              },
            },
            propertyOrder: ['from', 'to'],
            required: [],
            description:
              'Return only threads with a "first message timestamp" within this range. The "first message timestamp" of a thread is the timestamp when the first message in the thread was created. (This is typically when the thread was created.)',
          },
          mostRecentMessageTimestamp: {
            type: 'TimestampRange',
            properties: {
              from: {
                description:
                  "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                type: 'Date',
              },
              to: {
                description:
                  "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                type: 'Date',
              },
            },
            propertyOrder: ['from', 'to'],
            required: [],
            description:
              'Return only threads with a "most recent message timestamp" within this range. The "most recent message timestamp" of a thread is the timestamp when the most recent message in the thread was created or updated. (This is typically when the thread was most recently replied to.)',
          },
          authorID: {
            type: 'string',
            description: 'Return only threads created by this user.',
          },
          resolvedStatus: {
            type: 'string',
            enum: ['any', 'resolved', 'unresolved'],
            description:
              'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
          },
          viewer: {
            anyOf: [
              { type: '"subscribed"' },
              { type: '"mentioned"' },
              {
                type: 'ViewerThreadStatus[]',
                items: { type: 'string', enum: ['subscribed', 'mentioned'] },
              },
            ],
            description:
              'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
          },
        },
        propertyOrder: [
          'location',
          'metadata',
          'groupID',
          'firstMessageTimestamp',
          'mostRecentMessageTimestamp',
          'authorID',
          'resolvedStatus',
          'viewer',
        ],
        required: [],
      },
    },
    UploadedFile: {
      name: 'UploadedFile',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: 'string', description: 'The ID of the file.' },
          name: { type: 'string', description: 'The name of the file.' },
          url: {
            type: 'string',
            description:
              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
          },
          mimeType: {
            type: 'string',
            description: 'The MIME type of the file.',
          },
          size: {
            type: 'number',
            description: 'The size of the file, in bytes.',
          },
          uploadStatus: {
            type: 'string',
            enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
            description:
              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
          },
        },
        propertyOrder: [
          'id',
          'name',
          'url',
          'mimeType',
          'size',
          'uploadStatus',
        ],
        required: ['id', 'name', 'url', 'mimeType', 'size', 'uploadStatus'],
      },
    },
    ClientCreateFile: {
      name: 'ClientCreateFile',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: 'string',
            description:
              "The name of the file.  This will be shown to the user when attached to a message and will be the file's name if it's downloaded.",
          },
          blob: {
            type: 'Blob',
            description:
              'The file contents, such as from a file input element.',
          },
        },
        propertyOrder: ['name', 'blob'],
        required: ['name', 'blob'],
      },
    },
    UploadedFileData: {
      name: 'UploadedFileData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: 'string',
            description:
              'The id of the file when it has successfully been uploaded.',
          },
          url: {
            type: 'string',
            description:
              'The URL to download the file.  This is a signed URL that will expire after 24 hours.',
          },
        },
        propertyOrder: ['id', 'url'],
        required: ['id', 'url'],
      },
    },
    UploadFileResult: {
      name: 'UploadFileResult',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: 'string',
            description:
              'The identifier for the file, which can be passed to other APIs to reference this file.',
          },
          uploadPromise: {
            type: 'Promise<UploadedFileData>',
            description:
              'A promise that will be fulfilled when the file is successfully uploaded to the file storage backend or rejected if there is an error uploading the file.',
          },
        },
        propertyOrder: ['id', 'uploadPromise'],
        required: ['id', 'uploadPromise'],
      },
    },
    ICordFileSDK: {
      name: 'ICordFileSDK',
      methods: {
        methodOrder: ['uploadFile'],
        required: ['uploadFile'],
        methods: {
          uploadFile: {
            name: 'uploadFile',
            summary:
              "Upload a file to Cord's file storage for use in other Cord APIs, such as [attaching to a message](/js-apis-and-hooks/thread-api/sendMessage#addAttachments). Because uploading the file contents may take a long time, this works in two steps.  First, the file record is created, and then the file is uploaded directly from the browser to the file storage. You can reference the file in other APIs as soon as the first step is complete.  \n\nCertain types of files, such as executable code, cannot be uploaded. Trying to do so will generate an error.  \n\nFiles that are uploaded but never attached to a message will eventually be garbage collected.",
            examples: {
              Overview:
                'const { id } = await window.CordSDK.file.uploadFile({\n  name: myFileInput.files[0].name,\n  blob: myFileInput.files[0],\n});',
            },
            parameters: {
              propertyOrder: ['data'],
              required: ['data'],
              properties: {
                data: {
                  description: 'The file to upload.',
                  type: 'ClientCreateFile',
                  properties: {
                    name: {
                      description:
                        "The name of the file.  This will be shown to the user when attached to a message and will be the file's name if it's downloaded.",
                      type: 'string',
                    },
                    blob: {
                      description:
                        'The file contents, such as from a file input element.',
                      type: 'Blob',
                    },
                  },
                  propertyOrder: ['name', 'blob'],
                  required: ['name', 'blob'],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves once the file has been allocated an ID by the backend.  At that point, it is safe to reference the file in other APIs, though the file may not be fully uploaded to the file storage yet and could still fail. If you want to know when the file upload is fully complete, you can await the `uploadPromise` property on the return value.',
              type: 'Promise<UploadFileResult>',
            },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    ServerCreateFile: {
      name: 'ServerCreateFile',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          ownerID: {
            type: 'string',
            description:
              'The ID of the user that owns the file.  Files can only be attached to messages authored by their owner.',
          },
          name: {
            type: 'string',
            description:
              "The name of the file.  This will be shown to the user when attached to a message and will be the file's name if it's downloaded.  If not supplied, it will be taken from the filename of the `file` parameter.",
          },
        },
        propertyOrder: ['ownerID', 'name'],
        required: ['ownerID'],
      },
    },
    ServerGroupData: {
      name: 'ServerGroupData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: ['string', 'number'], description: 'ID of the group' },
          name: {
            type: 'string',
            description: 'Group name. Required when creating an group.',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this group is active or deleted.  Attempting to log into a deleted group will fail.',
          },
          members: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description:
              'List of partner-specific IDs of the users who are members of this group',
          },
          connectedToSlack: {
            type: 'boolean',
            description: 'If the group has connected to a Slack workspace',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
        },
        propertyOrder: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
        required: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
      },
    },
    ServerUpdateGroup: {
      name: 'ServerUpdateGroup',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: 'string',
            description: 'Group name. Required when creating an group.',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this group is active or deleted.  Attempting to log into a deleted group will fail.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          members: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description:
              'List of partner-specific IDs of the users who are members of this group. This will replace the existing members.',
          },
        },
        propertyOrder: ['name', 'status', 'metadata', 'members'],
        required: [],
      },
    },
    ServerUpdateGroupMembers: {
      name: 'ServerUpdateGroupMembers',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          add: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description: 'The IDs of users to add to this group.',
          },
          remove: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description: 'The IDs of users to remove from this group.',
          },
        },
        propertyOrder: ['add', 'remove'],
        required: [],
      },
    },
    ServerGetGroup: {
      name: 'ServerGetGroup',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: ['string', 'number'], description: 'ID of the group' },
          name: {
            type: 'string',
            description: 'Group name. Required when creating an group.',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this group is active or deleted.  Attempting to log into a deleted group will fail.',
          },
          members: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description:
              'List of partner-specific IDs of the users who are members of this group',
          },
          connectedToSlack: {
            type: 'boolean',
            description: 'If the group has connected to a Slack workspace',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
        },
        propertyOrder: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
        required: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
      },
    },
    ServerListGroup: {
      name: 'ServerListGroup',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: 'string',
            description: 'Group name. Required when creating an group.',
          },
          id: { type: ['string', 'number'], description: 'ID of the group' },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this group is active or deleted.  Attempting to log into a deleted group will fail.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          connectedToSlack: {
            type: 'boolean',
            description: 'If the group has connected to a Slack workspace',
          },
        },
        propertyOrder: ['name', 'id', 'status', 'metadata', 'connectedToSlack'],
        required: ['name', 'id', 'status', 'metadata', 'connectedToSlack'],
      },
    },
    ServerListGroupMember: {
      name: 'ServerListGroupMember',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: { type: ['null', 'string'], description: 'Full user name' },
          id: {
            type: ['string', 'number'],
            description: 'Provided ID for the user',
          },
          createdTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description: 'Creation timestamp',
          },
          email: { type: ['null', 'string'] },
          shortName: {
            type: ['null', 'string'],
            description:
              'Short user name. In most cases, this will be preferred over name when set.',
          },
          status: { type: 'string', enum: ['active', 'deleted'] },
          profilePictureURL: {
            type: ['null', 'string'],
            description:
              "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
        },
        propertyOrder: [
          'name',
          'id',
          'createdTimestamp',
          'email',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
        ],
        required: [
          'name',
          'id',
          'createdTimestamp',
          'email',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
        ],
      },
    },
    ServerListGroupMembers: {
      name: 'ServerListGroupMembers',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          users: {
            type: 'ServerListGroupMember[]',
            items: {
              type: 'ServerListGroupMember',
              properties: {
                name: {
                  description: 'Full user name',
                  type: ['null', 'string'],
                },
                id: {
                  description: 'Provided ID for the user',
                  type: ['string', 'number'],
                },
                createdTimestamp: {
                  description: 'Creation timestamp',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                email: { type: ['null', 'string'] },
                shortName: {
                  description:
                    'Short user name. In most cases, this will be preferred over name when set.',
                  type: ['null', 'string'],
                },
                status: { type: 'string', enum: ['active', 'deleted'] },
                profilePictureURL: {
                  description:
                    "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'name',
                'id',
                'createdTimestamp',
                'email',
                'shortName',
                'status',
                'profilePictureURL',
                'metadata',
              ],
              required: [
                'name',
                'id',
                'createdTimestamp',
                'email',
                'shortName',
                'status',
                'profilePictureURL',
                'metadata',
              ],
            },
          },
          pagination: {
            type: 'PaginationDetails',
            properties: {
              token: {
                description:
                  'The token to use to get the next page of results. If empty, there are no more results.',
                type: ['null', 'string'],
              },
              total: {
                description:
                  'Total number of results. Might be bigger than the number of results returned on the query. Useful to display a "total" counter.',
                type: 'number',
              },
            },
            propertyOrder: ['token', 'total'],
            required: ['token', 'total'],
          },
        },
        propertyOrder: ['users', 'pagination'],
        required: ['users', 'pagination'],
      },
    },
    ServerListGroupMembersParameters: {
      name: 'ServerListGroupMembersParameters',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          limit: {
            type: 'number',
            description:
              'Number of group members to return. The default limit is set to 1000.',
          },
          token: {
            type: 'string',
            description:
              'Pagination token. This is returned in the `pagination` object of a previous response.',
          },
        },
        propertyOrder: ['limit', 'token'],
        required: [],
      },
    },
    Reaction: {
      name: 'Reaction',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          reaction: { type: 'string', description: 'The emoji reaction.' },
          userID: {
            type: 'string',
            description: 'The ID of the user who reacted to the message.',
          },
          timestamp: {
            type: 'Date',
            description: 'The timestamp of when the reaction was created.',
          },
        },
        propertyOrder: ['reaction', 'userID', 'timestamp'],
        required: ['reaction', 'userID', 'timestamp'],
      },
    },
    ServerAddReactions: {
      name: 'ServerAddReactions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          reaction: { type: 'string', description: 'The emoji reaction.' },
          userID: {
            type: 'string',
            description: 'The ID of the user who reacted to the message.',
          },
          timestamp: {
            type: 'Date',
            description: 'The timestamp of when the reaction was created.',
          },
        },
        propertyOrder: ['reaction', 'userID', 'timestamp'],
        required: ['reaction', 'userID'],
      },
    },
    ServerRemoveReactions: {
      name: 'ServerRemoveReactions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          reaction: { type: 'string', description: 'The emoji reaction.' },
          userID: {
            type: 'string',
            description: 'The ID of the user who reacted to the message.',
          },
        },
        propertyOrder: ['reaction', 'userID'],
        required: ['reaction', 'userID'],
      },
    },
    MessageFileAttachment: {
      name: 'MessageFileAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"file"',
            description:
              'The type of this attachment, which is always `file` for file attachments.',
          },
          id: { type: 'string', description: 'The ID of the file.' },
          name: { type: 'string', description: 'The name of the file.' },
          url: {
            type: 'string',
            description:
              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
          },
          mimeType: {
            type: 'string',
            description: 'The MIME type of the file.',
          },
          size: {
            type: 'number',
            description: 'The size of the file, in bytes.',
          },
          uploadStatus: {
            type: 'string',
            enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
            description:
              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
          },
        },
        propertyOrder: [
          'type',
          'id',
          'name',
          'url',
          'mimeType',
          'size',
          'uploadStatus',
        ],
        required: [
          'type',
          'id',
          'name',
          'url',
          'mimeType',
          'size',
          'uploadStatus',
        ],
      },
    },
    MessageScreenshotAttachment: {
      name: 'MessageScreenshotAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"screenshot"',
            description:
              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
          },
          screenshot: {
            type: 'UploadedFile',
            properties: {
              id: { description: 'The ID of the file.', type: 'string' },
              name: { description: 'The name of the file.', type: 'string' },
              url: {
                description:
                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                type: 'string',
              },
              mimeType: {
                description: 'The MIME type of the file.',
                type: 'string',
              },
              size: {
                description: 'The size of the file, in bytes.',
                type: 'number',
              },
              uploadStatus: {
                description:
                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                type: 'string',
                enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
              },
            },
            propertyOrder: [
              'id',
              'name',
              'url',
              'mimeType',
              'size',
              'uploadStatus',
            ],
            required: ['id', 'name', 'url', 'mimeType', 'size', 'uploadStatus'],
            description:
              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
          },
        },
        propertyOrder: ['type', 'screenshot'],
        required: ['type', 'screenshot'],
      },
    },
    CustomAnnotationData: {
      name: 'CustomAnnotationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          location: {
            type: 'Location',
            description:
              'The custom location you produced for this annotation at annotation capture time.',
          },
          coordsRelativeToTarget: {
            type: 'object',
            properties: { x: { type: 'number' }, y: { type: 'number' } },
            propertyOrder: ['x', 'y'],
            required: ['x', 'y'],
            description:
              'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
          },
          label: {
            type: ['null', 'string'],
            description:
              'Your custom user-visible label for the annotation, if any.',
          },
        },
        propertyOrder: ['location', 'coordsRelativeToTarget', 'label'],
        required: ['location', 'coordsRelativeToTarget', 'label'],
      },
    },
    MessageAnnotationAttachment: {
      name: 'MessageAnnotationAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"annotation"',
            description:
              'The type of this attachment, which is always `annotation` for annotation attachments.',
          },
          screenshot: {
            anyOf: [
              { type: 'null' },
              {
                type: 'UploadedFile',
                properties: {
                  id: { description: 'The ID of the file.', type: 'string' },
                  name: {
                    description: 'The name of the file.',
                    type: 'string',
                  },
                  url: {
                    description:
                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                    type: 'string',
                  },
                  mimeType: {
                    description: 'The MIME type of the file.',
                    type: 'string',
                  },
                  size: {
                    description: 'The size of the file, in bytes.',
                    type: 'number',
                  },
                  uploadStatus: {
                    description:
                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                    type: 'string',
                    enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                  },
                },
                propertyOrder: [
                  'id',
                  'name',
                  'url',
                  'mimeType',
                  'size',
                  'uploadStatus',
                ],
                required: [
                  'id',
                  'name',
                  'url',
                  'mimeType',
                  'size',
                  'uploadStatus',
                ],
              },
            ],
            description: 'The screenshot attached to the annotation, if any.',
          },
          locationData: {
            type: ['null', 'string'],
            description:
              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
          },
          customData: {
            anyOf: [
              { type: 'null' },
              {
                type: 'CustomAnnotationData',
                properties: {
                  location: {
                    description:
                      'The custom location you produced for this annotation at annotation capture time.',
                    type: 'Location',
                  },
                  coordsRelativeToTarget: {
                    description:
                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                    type: 'object',
                    properties: {
                      x: { type: 'number' },
                      y: { type: 'number' },
                    },
                    propertyOrder: ['x', 'y'],
                    required: ['x', 'y'],
                  },
                  label: {
                    description:
                      'Your custom user-visible label for the annotation, if any.',
                    type: ['null', 'string'],
                  },
                },
                propertyOrder: ['location', 'coordsRelativeToTarget', 'label'],
                required: ['location', 'coordsRelativeToTarget', 'label'],
              },
            ],
            description:
              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
          },
          textContent: {
            type: ['null', 'string'],
            description:
              'The text that was selected when creating the annotation, if any.',
          },
        },
        propertyOrder: [
          'type',
          'screenshot',
          'locationData',
          'customData',
          'textContent',
        ],
        required: [
          'type',
          'screenshot',
          'locationData',
          'customData',
          'textContent',
        ],
      },
    },
    MessageAttachment: {
      name: 'MessageAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: 'string',
            enum: ['file', 'annotation', 'screenshot', 'link_preview'],
            description:
              'The type of this attachment, which is always `file` for file attachments.',
          },
        },
        propertyOrder: ['type'],
        required: ['type'],
      },
    },
    MessageLinkPreviewAttachment: {
      name: 'MessageLinkPreviewAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"link_preview"',
            description:
              'The type of this attachment, which is always `link_preview` for file link previews.',
          },
          id: {
            type: 'string',
            description: 'The ID of the link preview attachment.',
          },
          url: {
            type: 'string',
            description: 'The url from which the preview was generated.',
          },
          imageURL: {
            type: ['null', 'string'],
            description:
              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
          },
          title: {
            type: ['null', 'string'],
            description:
              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
          },
          description: {
            type: ['null', 'string'],
            description:
              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
          },
        },
        propertyOrder: [
          'type',
          'id',
          'url',
          'imageURL',
          'title',
          'description',
        ],
        required: ['type', 'id', 'url', 'imageURL', 'title', 'description'],
      },
    },
    CoreMessageData: {
      name: 'CoreMessageData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: 'string',
            description:
              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
          },
          authorID: {
            type: 'string',
            description: 'The ID for the user that sent the message.',
          },
          groupID: {
            type: 'string',
            description: 'The ID for the group this message belongs to.',
          },
          threadID: {
            type: 'string',
            description: 'The ID for the thread this message is part of.',
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          plaintext: {
            type: 'string',
            description:
              'A plaintext version of the structured message content.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          createdTimestamp: {
            type: 'Date',
            description:
              'The timestamp when this message was created.  The default value is the current time.',
          },
          deletedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
          },
          updatedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          type: {
            type: 'string',
            enum: ['action_message', 'user_message'],
            description:
              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          attachments: {
            type: 'MessageAttachment[]',
            items: {
              anyOf: [
                {
                  type: 'MessageFileAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `file` for file attachments.',
                      type: '"file"',
                    },
                    id: { description: 'The ID of the file.', type: 'string' },
                    name: {
                      description: 'The name of the file.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                      type: 'string',
                    },
                    mimeType: {
                      description: 'The MIME type of the file.',
                      type: 'string',
                    },
                    size: {
                      description: 'The size of the file, in bytes.',
                      type: 'number',
                    },
                    uploadStatus: {
                      description:
                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                      type: 'string',
                      enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                  required: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                },
                {
                  type: 'MessageAnnotationAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                      type: '"annotation"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the annotation, if any.',
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      ],
                    },
                    locationData: {
                      description:
                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                      type: ['null', 'string'],
                    },
                    customData: {
                      description:
                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'CustomAnnotationData',
                          properties: {
                            location: {
                              description:
                                'The custom location you produced for this annotation at annotation capture time.',
                              type: 'Location',
                            },
                            coordsRelativeToTarget: {
                              description:
                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                              type: 'object',
                              properties: {
                                x: { type: 'number' },
                                y: { type: 'number' },
                              },
                              propertyOrder: ['x', 'y'],
                              required: ['x', 'y'],
                            },
                            label: {
                              description:
                                'Your custom user-visible label for the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                          required: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                        },
                      ],
                    },
                    textContent: {
                      description:
                        'The text that was selected when creating the annotation, if any.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                  required: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                },
                {
                  type: 'MessageScreenshotAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                      type: '"screenshot"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                      type: 'UploadedFile',
                      properties: {
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                  },
                  propertyOrder: ['type', 'screenshot'],
                  required: ['type', 'screenshot'],
                },
                {
                  type: 'MessageLinkPreviewAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `link_preview` for file link previews.',
                      type: '"link_preview"',
                    },
                    id: {
                      description: 'The ID of the link preview attachment.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The url from which the preview was generated.',
                      type: 'string',
                    },
                    imageURL: {
                      description:
                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                      type: ['null', 'string'],
                    },
                    title: {
                      description:
                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                      type: ['null', 'string'],
                    },
                    description: {
                      description:
                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                  required: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                },
              ],
            },
            description: 'The items attached to this message.',
          },
          reactions: {
            type: 'Reaction[]',
            items: {
              type: 'Reaction',
              properties: {
                reaction: {
                  description: 'The emoji reaction.',
                  type: 'string',
                },
                userID: {
                  description: 'The ID of the user who reacted to the message.',
                  type: 'string',
                },
                timestamp: {
                  description:
                    'The timestamp of when the reaction was created.',
                  type: 'Date',
                },
              },
              propertyOrder: ['reaction', 'userID', 'timestamp'],
              required: ['reaction', 'userID', 'timestamp'],
            },
            description: 'The reactions to this message.',
          },
          seenBy: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list of IDs of the users that have seen the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
        },
        propertyOrder: [
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
        required: [
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
      },
    },
    ClientMessageData: {
      name: 'ClientMessageData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          seen: {
            type: 'boolean',
            description:
              'Whether the message has been seen by the current viewer.',
          },
          id: {
            type: 'string',
            description:
              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
          },
          authorID: {
            type: 'string',
            description: 'The ID for the user that sent the message.',
          },
          groupID: {
            type: 'string',
            description: 'The ID for the group this message belongs to.',
          },
          threadID: {
            type: 'string',
            description: 'The ID for the thread this message is part of.',
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          plaintext: {
            type: 'string',
            description:
              'A plaintext version of the structured message content.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          createdTimestamp: {
            type: 'Date',
            description:
              'The timestamp when this message was created.  The default value is the current time.',
          },
          deletedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
          },
          updatedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          type: {
            type: 'string',
            enum: ['action_message', 'user_message'],
            description:
              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          attachments: {
            type: 'MessageAttachment[]',
            items: {
              anyOf: [
                {
                  type: 'MessageFileAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `file` for file attachments.',
                      type: '"file"',
                    },
                    id: { description: 'The ID of the file.', type: 'string' },
                    name: {
                      description: 'The name of the file.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                      type: 'string',
                    },
                    mimeType: {
                      description: 'The MIME type of the file.',
                      type: 'string',
                    },
                    size: {
                      description: 'The size of the file, in bytes.',
                      type: 'number',
                    },
                    uploadStatus: {
                      description:
                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                      type: 'string',
                      enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                  required: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                },
                {
                  type: 'MessageAnnotationAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                      type: '"annotation"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the annotation, if any.',
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      ],
                    },
                    locationData: {
                      description:
                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                      type: ['null', 'string'],
                    },
                    customData: {
                      description:
                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'CustomAnnotationData',
                          properties: {
                            location: {
                              description:
                                'The custom location you produced for this annotation at annotation capture time.',
                              type: 'Location',
                            },
                            coordsRelativeToTarget: {
                              description:
                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                              type: 'object',
                              properties: {
                                x: { type: 'number' },
                                y: { type: 'number' },
                              },
                              propertyOrder: ['x', 'y'],
                              required: ['x', 'y'],
                            },
                            label: {
                              description:
                                'Your custom user-visible label for the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                          required: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                        },
                      ],
                    },
                    textContent: {
                      description:
                        'The text that was selected when creating the annotation, if any.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                  required: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                },
                {
                  type: 'MessageScreenshotAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                      type: '"screenshot"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                      type: 'UploadedFile',
                      properties: {
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                  },
                  propertyOrder: ['type', 'screenshot'],
                  required: ['type', 'screenshot'],
                },
                {
                  type: 'MessageLinkPreviewAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `link_preview` for file link previews.',
                      type: '"link_preview"',
                    },
                    id: {
                      description: 'The ID of the link preview attachment.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The url from which the preview was generated.',
                      type: 'string',
                    },
                    imageURL: {
                      description:
                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                      type: ['null', 'string'],
                    },
                    title: {
                      description:
                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                      type: ['null', 'string'],
                    },
                    description: {
                      description:
                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                  required: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                },
              ],
            },
            description: 'The items attached to this message.',
          },
          reactions: {
            type: 'Reaction[]',
            items: {
              type: 'Reaction',
              properties: {
                reaction: {
                  description: 'The emoji reaction.',
                  type: 'string',
                },
                userID: {
                  description: 'The ID of the user who reacted to the message.',
                  type: 'string',
                },
                timestamp: {
                  description:
                    'The timestamp of when the reaction was created.',
                  type: 'Date',
                },
              },
              propertyOrder: ['reaction', 'userID', 'timestamp'],
              required: ['reaction', 'userID', 'timestamp'],
            },
            description: 'The reactions to this message.',
          },
          seenBy: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list of IDs of the users that have seen the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
        },
        propertyOrder: [
          'seen',
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
        required: [
          'seen',
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
      },
    },
    SearchResultData: {
      name: 'SearchResultData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          location: { type: 'Location' },
          seen: {
            type: 'boolean',
            description:
              'Whether the message has been seen by the current viewer.',
          },
          id: {
            type: 'string',
            description:
              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
          },
          authorID: {
            type: 'string',
            description: 'The ID for the user that sent the message.',
          },
          groupID: {
            type: 'string',
            description: 'The ID for the group this message belongs to.',
          },
          threadID: {
            type: 'string',
            description: 'The ID for the thread this message is part of.',
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          plaintext: {
            type: 'string',
            description:
              'A plaintext version of the structured message content.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          createdTimestamp: {
            type: 'Date',
            description:
              'The timestamp when this message was created.  The default value is the current time.',
          },
          deletedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
          },
          updatedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          type: {
            type: 'string',
            enum: ['action_message', 'user_message'],
            description:
              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          attachments: {
            type: 'MessageAttachment[]',
            items: {
              anyOf: [
                {
                  type: 'MessageFileAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `file` for file attachments.',
                      type: '"file"',
                    },
                    id: { description: 'The ID of the file.', type: 'string' },
                    name: {
                      description: 'The name of the file.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                      type: 'string',
                    },
                    mimeType: {
                      description: 'The MIME type of the file.',
                      type: 'string',
                    },
                    size: {
                      description: 'The size of the file, in bytes.',
                      type: 'number',
                    },
                    uploadStatus: {
                      description:
                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                      type: 'string',
                      enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                  required: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                },
                {
                  type: 'MessageAnnotationAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                      type: '"annotation"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the annotation, if any.',
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      ],
                    },
                    locationData: {
                      description:
                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                      type: ['null', 'string'],
                    },
                    customData: {
                      description:
                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'CustomAnnotationData',
                          properties: {
                            location: {
                              description:
                                'The custom location you produced for this annotation at annotation capture time.',
                              type: 'Location',
                            },
                            coordsRelativeToTarget: {
                              description:
                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                              type: 'object',
                              properties: {
                                x: { type: 'number' },
                                y: { type: 'number' },
                              },
                              propertyOrder: ['x', 'y'],
                              required: ['x', 'y'],
                            },
                            label: {
                              description:
                                'Your custom user-visible label for the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                          required: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                        },
                      ],
                    },
                    textContent: {
                      description:
                        'The text that was selected when creating the annotation, if any.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                  required: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                },
                {
                  type: 'MessageScreenshotAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                      type: '"screenshot"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                      type: 'UploadedFile',
                      properties: {
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                  },
                  propertyOrder: ['type', 'screenshot'],
                  required: ['type', 'screenshot'],
                },
                {
                  type: 'MessageLinkPreviewAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `link_preview` for file link previews.',
                      type: '"link_preview"',
                    },
                    id: {
                      description: 'The ID of the link preview attachment.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The url from which the preview was generated.',
                      type: 'string',
                    },
                    imageURL: {
                      description:
                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                      type: ['null', 'string'],
                    },
                    title: {
                      description:
                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                      type: ['null', 'string'],
                    },
                    description: {
                      description:
                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                  required: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                },
              ],
            },
            description: 'The items attached to this message.',
          },
          reactions: {
            type: 'Reaction[]',
            items: {
              type: 'Reaction',
              properties: {
                reaction: {
                  description: 'The emoji reaction.',
                  type: 'string',
                },
                userID: {
                  description: 'The ID of the user who reacted to the message.',
                  type: 'string',
                },
                timestamp: {
                  description:
                    'The timestamp of when the reaction was created.',
                  type: 'Date',
                },
              },
              propertyOrder: ['reaction', 'userID', 'timestamp'],
              required: ['reaction', 'userID', 'timestamp'],
            },
            description: 'The reactions to this message.',
          },
          seenBy: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list of IDs of the users that have seen the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
        },
        propertyOrder: [
          'location',
          'seen',
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
        required: [
          'location',
          'seen',
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
      },
    },
    SearchOptionsType: {
      name: 'SearchOptionsType',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          textToMatch: {
            type: 'string',
            description: 'The string you want to find in message content.',
          },
          authorID: {
            type: 'string',
            description: 'The user ID of the person who sent the message.',
          },
          groupID: {
            type: 'string',
            description:
              'The ID of the group the message belongs to. If omitted, the search will be across all groups the current user is a member of.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs of data associated with the message.',
          },
          locationOptions: {
            type: 'object',
            properties: {
              location: { type: 'Location' },
              partialMatch: { type: 'boolean' },
            },
            propertyOrder: ['location', 'partialMatch'],
            required: ['location', 'partialMatch'],
            description:
              'Location to filter the messages by.  \n\nSet locationOptions.location to a specific thread location to search. If locationOptions.partialMatch is `true`, we perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, we fetch information only from the specified location.',
          },
          timestampRange: {
            type: 'TimestampRange',
            properties: {
              from: {
                description:
                  "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                type: 'Date',
              },
              to: {
                description:
                  "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                type: 'Date',
              },
            },
            propertyOrder: ['from', 'to'],
            required: [],
            description: 'Optional date objects used to scope search.',
          },
          limit: {
            type: 'number',
            description:
              'Number of messages to return. This will default to 50 if no value is provided but will be capped at 1000 if a value is provided.',
          },
          sortBy: {
            type: 'string',
            enum: ['created_timestamp', 'relevance'],
            description:
              "Sort the messages returned based on either their creation timestamp or relevance. Relevance refers to how closely the provided `textToMatch` string matches the content of the messages. Combine this with `sortDirection` to fine-tune the sorting order.  \n\nBy default, sorting is performed by `relevance` if `textToMatch` is provided, but will fallback to `created_timestamp` if it's not.",
          },
          sortDirection: {
            type: 'string',
            enum: ['ascending', 'descending'],
            description:
              "Property to control the order in which the messages returned are sorted. Using `sortBy` value of `relevance` and `sortDirection` of `descending` are the best options for getting the most relevant results at the top and is the default sorting criteria.  \n\nThe default value for this is 'descending'.",
          },
        },
        propertyOrder: [
          'textToMatch',
          'authorID',
          'groupID',
          'metadata',
          'locationOptions',
          'timestampRange',
          'limit',
          'sortBy',
          'sortDirection',
        ],
        required: [],
      },
    },
    ServerCreateMessage: {
      name: 'ServerCreateMessage',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          addReactions: {
            type: 'ServerAddReactions[]',
            items: {
              type: 'ServerAddReactions',
              properties: {
                reaction: {
                  description: 'The emoji reaction.',
                  type: 'string',
                },
                userID: {
                  description: 'The ID of the user who reacted to the message.',
                  type: 'string',
                },
                timestamp: {
                  description:
                    'The timestamp of when the reaction was created.',
                  type: 'Date',
                },
              },
              propertyOrder: ['reaction', 'userID', 'timestamp'],
              required: ['reaction', 'userID'],
            },
            description:
              'The reactions you want to add to this message. The default timestamp is the current time. Trying to create a reaction that already exists for a user does nothing. Doing the same as before with a timestamp will update the reaction with the new timestamp. The reaction users need to be an [active member of the group](/rest-apis/groups#Update-group-members) that the message and thread belong to.',
          },
          addAttachments: {
            type: 'CreateFileAttachment[]',
            items: {
              type: 'CreateFileAttachment',
              properties: {
                type: {
                  description:
                    'The type of attachment.  This is `file` for file attachments.',
                  type: '"file"',
                },
                id: {
                  description:
                    'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
                  type: 'string',
                },
              },
              propertyOrder: ['type', 'id'],
              required: ['type', 'id'],
            },
            description:
              'A list of attachments to add to the message.  The same file cannot be attached to the same message multiple times.',
          },
          createThread: {
            type: 'Omit<ServerCreateThread, "id">',
            properties: {
              name: {
                description:
                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                type: 'string',
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              url: {
                description:
                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                type: 'string',
              },
              groupID: {
                description: 'The group ID this thread is in.',
                type: 'string',
              },
              extraClassnames: {
                description:
                  'An optional space separated list of classnames to add to the thread.',
                type: ['null', 'string'],
              },
              location: {
                description:
                  'The [location](/reference/location) of this thread.',
                type: 'Location',
              },
              addSubscribers: {
                description: 'A list of subscribers to add to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
            },
            propertyOrder: [
              'name',
              'metadata',
              'url',
              'groupID',
              'extraClassnames',
              'location',
              'addSubscribers',
            ],
            required: ['name', 'url', 'groupID', 'location'],
            description:
              "The parameters for creating a thread if the supplied thread doesn't exist yet.  If the thread doesn't exist but `createThread` isn't provided, the call will generate an error.  This value is ignored if the thread already exists.",
          },
          subscribeToThread: {
            type: 'boolean',
            description:
              "Whether to subscribe the sender of the message to the thread, so that they get notified about replies.  If not specified, defaults to `true`.  If false, the user's subscription status will be left unchanged.",
          },
          authorID: {
            type: 'string',
            description: 'The ID for the user that sent the message.',
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          type: {
            type: 'string',
            enum: ['action_message', 'user_message'],
            description:
              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
          },
          id: {
            type: 'string',
            description:
              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
          },
          createdTimestamp: {
            type: 'Date',
            description:
              'The timestamp when this message was created.  The default value is the current time.',
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          deletedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
          },
          updatedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
        },
        propertyOrder: [
          'addReactions',
          'addAttachments',
          'createThread',
          'subscribeToThread',
          'authorID',
          'content',
          'type',
          'id',
          'createdTimestamp',
          'iconURL',
          'metadata',
          'url',
          'deletedTimestamp',
          'updatedTimestamp',
          'translationKey',
          'extraClassnames',
          'skipLinkPreviews',
        ],
        required: ['authorID', 'content'],
      },
    },
    ServerUpdateMessage: {
      name: 'ServerUpdateMessage',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          deleted: {
            type: 'boolean',
            description:
              'Whether we want to mark this message as deleted. Setting this to `true` without providing a value for `deletedTimestamp` is equivalent to setting `deletedTimestamp` to current time and setting this to `false` is equivalent to setting `deletedTimestamp` to `null`.',
          },
          deletedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              "The timestamp when this message was deleted, if it was. If set to null, the message is not deleted. Deleting a message this way will only soft delete it, replacing the content of the message with a record of the deletion on the frontend. If you'd like to permanently delete it instead, use the [delete message endpoint](/rest-apis/messages#Delete-a-message).",
          },
          removeReactions: {
            type: 'ServerRemoveReactions[]',
            items: { type: 'ServerRemoveReactions' },
            description:
              'The reactions you want to remove from this message. Removing a reaction that does not exist will have no effect and will not return an error. An error is returned if a reaction is both added and deleted in the same request.',
          },
          removeAttachments: {
            type: 'RemoveAttachment[]',
            items: {
              anyOf: [
                {
                  type: 'RemoveLinkPreviewAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of attachment to remove.  This is `link_preview` for link preview attachments.',
                      type: '"link_preview"',
                    },
                    id: {
                      description:
                        'The ID of the link preview attachment to remove.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['type', 'id'],
                  required: ['type', 'id'],
                },
                {
                  type: 'RemoveFileAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of attachment to remove.  This is `file` for file attachments.',
                      type: '"file"',
                    },
                    id: {
                      description: 'The ID of the file attachment to remove.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['type', 'id'],
                  required: ['type', 'id'],
                },
              ],
            },
            description:
              "The attachments you want to remove from this message.  Removing an attachment that doesn't exist has no effect and won't return an error. Attempting to add and remove the same attachment in one request is an error.",
          },
          type: {
            type: 'string',
            enum: ['action_message', 'user_message'],
            description:
              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
          },
          id: {
            type: 'string',
            description:
              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
          },
          createdTimestamp: {
            type: 'Date',
            description:
              'The timestamp when this message was created.  The default value is the current time.',
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          authorID: {
            type: 'string',
            description: 'The ID for the user that sent the message.',
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          updatedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
          addReactions: {
            type: 'ServerAddReactions[]',
            items: {
              type: 'ServerAddReactions',
              properties: {
                reaction: {
                  description: 'The emoji reaction.',
                  type: 'string',
                },
                userID: {
                  description: 'The ID of the user who reacted to the message.',
                  type: 'string',
                },
                timestamp: {
                  description:
                    'The timestamp of when the reaction was created.',
                  type: 'Date',
                },
              },
              propertyOrder: ['reaction', 'userID', 'timestamp'],
              required: ['reaction', 'userID'],
            },
            description:
              'The reactions you want to add to this message. The default timestamp is the current time. Trying to create a reaction that already exists for a user does nothing. Doing the same as before with a timestamp will update the reaction with the new timestamp. The reaction users need to be an [active member of the group](/rest-apis/groups#Update-group-members) that the message and thread belong to.',
          },
          addAttachments: {
            type: 'CreateFileAttachment[]',
            items: {
              type: 'CreateFileAttachment',
              properties: {
                type: {
                  description:
                    'The type of attachment.  This is `file` for file attachments.',
                  type: '"file"',
                },
                id: {
                  description:
                    'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
                  type: 'string',
                },
              },
              propertyOrder: ['type', 'id'],
              required: ['type', 'id'],
            },
            description:
              'A list of attachments to add to the message.  The same file cannot be attached to the same message multiple times.',
          },
        },
        propertyOrder: [
          'deleted',
          'deletedTimestamp',
          'removeReactions',
          'removeAttachments',
          'type',
          'id',
          'createdTimestamp',
          'iconURL',
          'metadata',
          'url',
          'authorID',
          'content',
          'updatedTimestamp',
          'translationKey',
          'extraClassnames',
          'skipLinkPreviews',
          'addReactions',
          'addAttachments',
        ],
        required: [],
      },
    },
    ServerListThreadMessageParameters: {
      name: 'ServerListThreadMessageParameters',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          sortDirection: {
            type: 'string',
            enum: ['ascending', 'descending'],
            description:
              "Return messages in ascending or descending order of creation timestamp.  'descending' is the default.",
          },
        },
        propertyOrder: ['sortDirection'],
        required: [],
      },
    },
    ServerListMessageFilter: {
      name: 'ServerListMessageFilter',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs of data associated with the message.',
          },
          location: {
            type: 'string',
            description:
              'The [location](/reference/location) of the thread containing the message.',
          },
          authorID: {
            type: 'string',
            description:
              'If provided, will return messages created by this author.',
          },
        },
        propertyOrder: ['metadata', 'location', 'authorID'],
        required: [],
      },
    },
    ServerListMessageParameters: {
      name: 'ServerListMessageParameters',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          limit: {
            type: 'number',
            description: 'Number of messages to return. Defaults to 1000.',
          },
          token: {
            type: 'string',
            description:
              'Pagination token. This is returned in the `pagination` object of a previous response.',
          },
          filter: {
            type: 'ServerListMessageFilter',
            properties: {
              metadata: {
                description:
                  'Arbitrary key-value pairs of data associated with the message.',
                type: 'EntityMetadata',
              },
              location: {
                description:
                  'The [location](/reference/location) of the thread containing the message.',
                type: 'string',
              },
              authorID: {
                description:
                  'If provided, will return messages created by this author.',
                type: 'string',
              },
            },
            propertyOrder: ['metadata', 'location', 'authorID'],
            required: [],
            description:
              'Messages will be matched against the filters specified. This is a partial match, which means any keys other than the ones you specify are ignored when checking for a match. Please note that because this is a query parameter in a REST API, this JSON object must be URI encoded before being sent.',
          },
        },
        propertyOrder: ['limit', 'token', 'filter'],
        required: [],
      },
    },
    ServerListMessages: {
      name: 'ServerListMessages',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          messages: {
            type: 'CoreMessageData[]',
            items: {
              type: 'CoreMessageData',
              properties: {
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
            },
            description: 'Page containing messages.',
          },
          pagination: {
            type: 'PaginationDetails',
            properties: {
              token: {
                description:
                  'The token to use to get the next page of results. If empty, there are no more results.',
                type: ['null', 'string'],
              },
              total: {
                description:
                  'Total number of results. Might be bigger than the number of results returned on the query. Useful to display a "total" counter.',
                type: 'number',
              },
            },
            propertyOrder: ['token', 'total'],
            required: ['token', 'total'],
            description: 'Data related to cursor-based pagination.',
          },
        },
        propertyOrder: ['messages', 'pagination'],
        required: ['messages', 'pagination'],
      },
    },
    ServerAppendMessage: {
      name: 'ServerAppendMessage',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          text: {
            type: 'string',
            description:
              'The text that will be appended to the markdown node in the message.',
          },
        },
        propertyOrder: ['text'],
        required: ['text'],
      },
    },
    MessageNode: {
      name: 'MessageNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: 'string',
            enum: [
              'assignee',
              'bullet',
              'code',
              'link',
              'mention',
              'number_bullet',
              'p',
              'quote',
              'todo',
              'markdown',
            ],
          },
          class: { type: 'string' },
        },
        propertyOrder: ['type', 'class'],
        required: [],
      },
    },
    MessageNodeBase: {
      name: 'MessageNodeBase',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: 'string',
            enum: [
              'assignee',
              'bullet',
              'code',
              'link',
              'mention',
              'number_bullet',
              'p',
              'quote',
              'todo',
              'markdown',
            ],
          },
          class: { type: 'string' },
        },
        propertyOrder: ['type', 'class'],
        required: [],
      },
    },
    MessageNodeWithChildren: {
      name: 'MessageNodeWithChildren',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: 'string',
            enum: [
              'assignee',
              'bullet',
              'code',
              'link',
              'mention',
              'number_bullet',
              'p',
              'quote',
              'todo',
              'markdown',
            ],
          },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
        },
        propertyOrder: ['type', 'class', 'children'],
        required: ['children'],
      },
    },
    MessageBulletNode: {
      name: 'MessageBulletNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.BULLET' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
          indent: { type: 'number' },
        },
        propertyOrder: ['type', 'class', 'children', 'indent'],
        required: ['type', 'children'],
      },
    },
    MessageCodeNode: {
      name: 'MessageCodeNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.CODE' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
        },
        propertyOrder: ['type', 'class', 'children'],
        required: ['type', 'children'],
      },
    },
    MessageLinkNode: {
      name: 'MessageLinkNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.LINK' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
          url: { type: 'string' },
        },
        propertyOrder: ['type', 'class', 'children', 'url'],
        required: ['type', 'children', 'url'],
      },
    },
    MessageMentionNode: {
      name: 'MessageMentionNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.MENTION' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
          user: {
            type: 'object',
            properties: { id: { type: 'string' } },
            propertyOrder: ['id'],
            required: ['id'],
          },
        },
        propertyOrder: ['type', 'class', 'children', 'user'],
        required: ['type', 'children', 'user'],
      },
    },
    MessageAssigneeNode: {
      name: 'MessageAssigneeNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.ASSIGNEE' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
          user: {
            type: 'object',
            properties: { id: { type: 'string' } },
            propertyOrder: ['id'],
            required: ['id'],
          },
        },
        propertyOrder: ['type', 'class', 'children', 'user'],
        required: ['type', 'children', 'user'],
      },
    },
    MessageNumberBulletNode: {
      name: 'MessageNumberBulletNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.NUMBER_BULLET' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
          bulletNumber: { type: 'number' },
          indent: { type: 'number' },
        },
        propertyOrder: ['type', 'class', 'children', 'bulletNumber', 'indent'],
        required: ['type', 'children', 'bulletNumber'],
      },
    },
    MessageParagraphNode: {
      name: 'MessageParagraphNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.PARAGRAPH' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
        },
        propertyOrder: ['type', 'class', 'children'],
        required: ['type', 'children'],
      },
    },
    MessageQuoteNode: {
      name: 'MessageQuoteNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.QUOTE' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
        },
        propertyOrder: ['type', 'class', 'children'],
        required: ['type', 'children'],
      },
    },
    MessageTextNode: {
      name: 'MessageTextNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'undefined' },
          class: { type: 'string' },
          text: { type: 'string' },
          bold: { type: 'boolean' },
          italic: { type: 'boolean' },
          underline: { type: 'boolean' },
          code: { type: 'boolean' },
        },
        propertyOrder: [
          'type',
          'class',
          'text',
          'bold',
          'italic',
          'underline',
          'code',
        ],
        required: ['text'],
      },
    },
    MessageTodoNode: {
      name: 'MessageTodoNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.TODO' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
          todoID: { type: 'string' },
          done: { type: 'boolean' },
        },
        propertyOrder: ['type', 'class', 'children', 'todoID', 'done'],
        required: ['type', 'children', 'todoID', 'done'],
      },
    },
    MessageMarkdownNode: {
      name: 'MessageMarkdownNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: 'MessageNodeType.MARKDOWN' },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
        },
        propertyOrder: ['type', 'class', 'children'],
        required: ['type', 'children'],
      },
    },
    MessageNodeProps: {
      name: 'MessageNodeProps',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { class: { type: 'MessageNode<M>["class"]' } },
        propertyOrder: ['class'],
        required: [],
      },
    },
    MessageStyledBlockNode: {
      name: 'MessageStyledBlockNode',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: 'string',
            enum: ['bullet', 'number_bullet', 'quote', 'todo'],
          },
          class: { type: 'string' },
          children: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
        },
        propertyOrder: ['type', 'class', 'children'],
        required: ['type', 'children'],
      },
    },
    NotificationSummary: {
      name: 'NotificationSummary',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          unread: {
            type: 'number',
            description:
              "The number of notifications that the current user hasn't seen yet.",
          },
        },
        propertyOrder: ['unread'],
        required: ['unread'],
      },
    },
    NotificationURLAttachment: {
      name: 'NotificationURLAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"url"',
            description: 'Indicator that this is a URL attachment.',
          },
          url: {
            type: 'string',
            description:
              'The URL this attachment points to. This would typically be the URL to send the browser to if this notification is clicked.',
          },
        },
        propertyOrder: ['type', 'url'],
        required: ['type', 'url'],
      },
    },
    NotificationMessageAttachment: {
      name: 'NotificationMessageAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"message"',
            description: 'Indicator that this is a message attachment.',
          },
          message: {
            type: 'CoreMessageData',
            properties: {
              id: {
                description:
                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                type: 'string',
              },
              authorID: {
                description: 'The ID for the user that sent the message.',
                type: 'string',
              },
              groupID: {
                description: 'The ID for the group this message belongs to.',
                type: 'string',
              },
              threadID: {
                description: 'The ID for the thread this message is part of.',
                type: 'string',
              },
              content: {
                description: 'The content of the message.',
                type: 'MessageContent',
                items: {
                  anyOf: [
                    {
                      type: 'MessageAssigneeNode',
                      properties: {
                        type: { type: 'MessageNodeType.ASSIGNEE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'indent'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageCodeNode',
                      properties: {
                        type: { type: 'MessageNodeType.CODE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageLinkNode',
                      properties: {
                        type: { type: 'MessageNodeType.LINK' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        url: { type: 'string' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'url'],
                      required: ['type', 'children', 'url'],
                    },
                    {
                      type: 'MessageMentionNode',
                      properties: {
                        type: { type: 'MessageNodeType.MENTION' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageNumberBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.NUMBER_BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        bulletNumber: { type: 'number' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'bulletNumber',
                        'indent',
                      ],
                      required: ['type', 'children', 'bulletNumber'],
                    },
                    {
                      type: 'MessageParagraphNode',
                      properties: {
                        type: { type: 'MessageNodeType.PARAGRAPH' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageQuoteNode',
                      properties: {
                        type: { type: 'MessageNodeType.QUOTE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageTextNode',
                      properties: {
                        type: { type: 'undefined' },
                        class: { type: 'string' },
                        text: { type: 'string' },
                        bold: { type: 'boolean' },
                        italic: { type: 'boolean' },
                        underline: { type: 'boolean' },
                        code: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'text',
                        'bold',
                        'italic',
                        'underline',
                        'code',
                      ],
                      required: ['text'],
                    },
                    {
                      type: 'MessageTodoNode',
                      properties: {
                        type: { type: 'MessageNodeType.TODO' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        todoID: { type: 'string' },
                        done: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'todoID',
                        'done',
                      ],
                      required: ['type', 'children', 'todoID', 'done'],
                    },
                    {
                      type: 'MessageMarkdownNode',
                      properties: {
                        type: { type: 'MessageNodeType.MARKDOWN' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                  ],
                },
              },
              plaintext: {
                description:
                  'A plaintext version of the structured message content.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                type: ['null', 'string'],
              },
              createdTimestamp: {
                description:
                  'The timestamp when this message was created.  The default value is the current time.',
                type: 'Date',
              },
              deletedTimestamp: {
                description:
                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              updatedTimestamp: {
                description:
                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              iconURL: {
                description:
                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                type: ['null', 'string'],
              },
              translationKey: {
                description:
                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                type: ['null', 'string'],
              },
              type: {
                description:
                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                type: 'string',
                enum: ['action_message', 'user_message'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'A optional space separated list of classnames to add to the message.',
                type: ['null', 'string'],
              },
              attachments: {
                description: 'The items attached to this message.',
                type: 'MessageAttachment[]',
                items: {
                  anyOf: [
                    {
                      type: 'MessageFileAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `file` for file attachments.',
                          type: '"file"',
                        },
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                    {
                      type: 'MessageAnnotationAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                          type: '"annotation"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the annotation, if any.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          ],
                        },
                        locationData: {
                          description:
                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                          type: ['null', 'string'],
                        },
                        customData: {
                          description:
                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'CustomAnnotationData',
                              properties: {
                                location: {
                                  description:
                                    'The custom location you produced for this annotation at annotation capture time.',
                                  type: 'Location',
                                },
                                coordsRelativeToTarget: {
                                  description:
                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                  type: 'object',
                                  properties: {
                                    x: { type: 'number' },
                                    y: { type: 'number' },
                                  },
                                  propertyOrder: ['x', 'y'],
                                  required: ['x', 'y'],
                                },
                                label: {
                                  description:
                                    'Your custom user-visible label for the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                              required: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                            },
                          ],
                        },
                        textContent: {
                          description:
                            'The text that was selected when creating the annotation, if any.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                      required: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                    },
                    {
                      type: 'MessageScreenshotAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                          type: '"screenshot"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'screenshot'],
                      required: ['type', 'screenshot'],
                    },
                    {
                      type: 'MessageLinkPreviewAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `link_preview` for file link previews.',
                          type: '"link_preview"',
                        },
                        id: {
                          description: 'The ID of the link preview attachment.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The url from which the preview was generated.',
                          type: 'string',
                        },
                        imageURL: {
                          description:
                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                          type: ['null', 'string'],
                        },
                        title: {
                          description:
                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                          type: ['null', 'string'],
                        },
                        description: {
                          description:
                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                      required: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                    },
                  ],
                },
              },
              reactions: {
                description: 'The reactions to this message.',
                type: 'Reaction[]',
                items: {
                  type: 'Reaction',
                  properties: {
                    reaction: {
                      description: 'The emoji reaction.',
                      type: 'string',
                    },
                    userID: {
                      description:
                        'The ID of the user who reacted to the message.',
                      type: 'string',
                    },
                    timestamp: {
                      description:
                        'The timestamp of when the reaction was created.',
                      type: 'Date',
                    },
                  },
                  propertyOrder: ['reaction', 'userID', 'timestamp'],
                  required: ['reaction', 'userID', 'timestamp'],
                },
              },
              seenBy: {
                description:
                  'A list of IDs of the users that have seen the message.',
                type: 'string[]',
                items: { type: 'string' },
              },
              skipLinkPreviews: {
                description:
                  "If set, Cord won't analyze links in the message to generate previews.",
                type: 'boolean',
              },
            },
            propertyOrder: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
            required: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
            description: 'The relevant message.',
          },
        },
        propertyOrder: ['type', 'message'],
        required: ['type', 'message'],
      },
    },
    NotificationThreadAttachment: {
      name: 'NotificationThreadAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"thread"',
            description: 'Indicator that this is a thread attachment.',
          },
          thread: {
            type: 'CoreThreadData',
            properties: {
              id: { description: 'The ID for this thread.', type: 'string' },
              groupID: {
                description: 'The group ID this thread is in.',
                type: 'string',
              },
              total: {
                description:
                  'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                type: 'number',
              },
              userMessages: {
                description:
                  'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                type: 'number',
              },
              actionMessages: {
                description:
                  'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                type: 'number',
              },
              deletedMessages: {
                description: 'The number of deleted messages in this thread.',
                type: 'number',
              },
              resolved: {
                description:
                  'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                type: 'boolean',
              },
              resolvedTimestamp: {
                description:
                  'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              participants: {
                description:
                  'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                type: 'ThreadParticipant[]',
                items: {
                  type: 'ThreadParticipant',
                  properties: {
                    lastSeenTimestamp: {
                      description:
                        'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    userID: {
                      description:
                        "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
                  required: ['lastSeenTimestamp', 'userID', 'displayName'],
                },
              },
              subscribers: {
                description:
                  'All of the users who are subscribed to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              repliers: {
                description:
                  'All of the users who have replied to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              mentioned: {
                description:
                  'All of the users who were mentioned in a message in this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              actionMessageRepliers: {
                description:
                  "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                type: 'string[]',
                items: { type: 'string' },
              },
              typing: {
                description:
                  'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                type: 'string[]',
                items: { type: 'string' },
              },
              name: {
                description:
                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                type: 'string',
              },
              location: {
                description:
                  'The [location](/reference/location) of this thread.',
                type: 'Location',
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'An optional space separated list of classnames to add to the thread.',
                type: ['null', 'string'],
              },
            },
            propertyOrder: [
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
            required: [
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
            description: 'The relevant thread.',
          },
        },
        propertyOrder: ['type', 'thread'],
        required: ['type', 'thread'],
      },
    },
    CoreNotificationData: {
      name: 'CoreNotificationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: 'string',
            description:
              'The [ID](/reference/identifiers) for this notification.',
          },
          senderUserIDs: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'The [IDs](/reference/identifiers) of the user(s) who sent this notification. The Cord backend will sometimes aggregate multiple notifications together, causing them to have multiple senders. For example, if multiple people react to the same message, that will generate only one notification (but with multiple senders, one for each person who reacted).',
          },
          iconUrl: {
            type: ['null', 'string'],
            description:
              "The URL of an icon image for this notification, if one was specified when it was created. This will always be `null` for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
          },
          header: {
            type: 'NotificationHeaderNode[]',
            items: {
              anyOf: [
                {
                  type: 'NotificationTextHeader',
                  properties: {
                    type: {
                      description:
                        'Indicator that this is a string header node.',
                      type: '"text"',
                    },
                    text: {
                      description:
                        'The text to display. This text may start and/or end with whitespace, which should typically *not* be trimmed. For example, in order to display the notification `"Alice replied to your thread."`, this would typically be composed of two nodes -- a user node for Alice, and then a text node containing `" replied to your thread."`, with a meaningful space at the front, to separate this node from Alice\'s name.',
                      type: 'string',
                    },
                    bold: {
                      description:
                        'Whether the text should be formatted in bold.',
                      type: 'boolean',
                    },
                  },
                  propertyOrder: ['type', 'text', 'bold'],
                  required: ['type', 'text', 'bold'],
                },
                {
                  type: 'NotificationUserHeader',
                  properties: {
                    type: {
                      description:
                        'Indicator that this is a user reference header node.',
                      type: '"user"',
                    },
                    user: {
                      description: 'The indicated user.',
                      type: 'ClientUserData',
                      properties: {
                        id: {
                          description:
                            "The user's ID.  This is unique within a project.",
                          type: 'string',
                        },
                        name: {
                          description: "The user's name.",
                          type: ['null', 'string'],
                        },
                        shortName: {
                          description:
                            "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                          type: 'string',
                        },
                        secondaryDisplayName: {
                          description:
                            'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                          type: 'string',
                        },
                        profilePictureURL: {
                          description: "A URL to the user's profile picture.",
                          type: ['null', 'string'],
                        },
                        metadata: {
                          description:
                            'Any metadata that has been set for the user.',
                          type: 'EntityMetadata',
                        },
                      },
                      propertyOrder: [
                        'id',
                        'name',
                        'shortName',
                        'displayName',
                        'secondaryDisplayName',
                        'profilePictureURL',
                        'metadata',
                      ],
                      required: [
                        'id',
                        'name',
                        'shortName',
                        'displayName',
                        'secondaryDisplayName',
                        'profilePictureURL',
                        'metadata',
                      ],
                    },
                  },
                  propertyOrder: ['type', 'user'],
                  required: ['type', 'user'],
                },
              ],
            },
            description:
              'The "header" or "text" of the notification. This will represent text like "Alice replied to your thread." or similar. For notifications you create via the REST API, this will be based upon the `template` parameter, see below.',
          },
          headerTranslation: {
            anyOf: [
              { type: 'null' },
              {
                type: 'Translation',
                properties: {
                  key: {
                    description:
                      'A translation key that is used to look up the proper translation.  See [the translations documentation](/customization/translations) for more information on how translations work.',
                    type: 'string',
                  },
                  parameters: {
                    description:
                      "The parameters to supply to the translation.  This will always be set, but may be an empty object if the translation doesn't take any parameters.",
                    type: 'TranslationParameters',
                  },
                },
                propertyOrder: ['key', 'parameters'],
                required: ['key', 'parameters'],
              },
            ],
            description:
              'A translation that can be used to translate the header of the notification. All Cord-created notifications will have a translation, but this may be null for notifications you [create through the REST API](/rest-apis/notifications#Create-a-notification). See [the translations documentation](/customization/translations) for more information.',
          },
          attachment: {
            anyOf: [
              { type: 'null' },
              {
                type: 'NotificationURLAttachment',
                properties: {
                  type: {
                    description: 'Indicator that this is a URL attachment.',
                    type: '"url"',
                  },
                  url: {
                    description:
                      'The URL this attachment points to. This would typically be the URL to send the browser to if this notification is clicked.',
                    type: 'string',
                  },
                },
                propertyOrder: ['type', 'url'],
                required: ['type', 'url'],
              },
              {
                type: 'NotificationMessageAttachment',
                properties: {
                  type: {
                    description: 'Indicator that this is a message attachment.',
                    type: '"message"',
                  },
                  message: {
                    description: 'The relevant message.',
                    type: 'CoreMessageData',
                    properties: {
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                },
                propertyOrder: ['type', 'message'],
                required: ['type', 'message'],
              },
              {
                type: 'NotificationThreadAttachment',
                properties: {
                  type: {
                    description: 'Indicator that this is a thread attachment.',
                    type: '"thread"',
                  },
                  thread: {
                    description: 'The relevant thread.',
                    type: 'CoreThreadData',
                    properties: {
                      id: {
                        description: 'The ID for this thread.',
                        type: 'string',
                      },
                      groupID: {
                        description: 'The group ID this thread is in.',
                        type: 'string',
                      },
                      total: {
                        description:
                          'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      userMessages: {
                        description:
                          'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      actionMessages: {
                        description:
                          'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      deletedMessages: {
                        description:
                          'The number of deleted messages in this thread.',
                        type: 'number',
                      },
                      resolved: {
                        description:
                          'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                        type: 'boolean',
                      },
                      resolvedTimestamp: {
                        description:
                          'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      participants: {
                        description:
                          'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                        type: 'ThreadParticipant[]',
                        items: {
                          type: 'ThreadParticipant',
                          properties: {
                            lastSeenTimestamp: {
                              description:
                                'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            userID: {
                              description:
                                "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                            displayName: {
                              description:
                                "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                          required: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                        },
                      },
                      subscribers: {
                        description:
                          'All of the users who are subscribed to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      repliers: {
                        description:
                          'All of the users who have replied to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      mentioned: {
                        description:
                          'All of the users who were mentioned in a message in this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      actionMessageRepliers: {
                        description:
                          "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      typing: {
                        description:
                          'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      name: {
                        description:
                          'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                        type: 'string',
                      },
                      location: {
                        description:
                          'The [location](/reference/location) of this thread.',
                        type: 'Location',
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'An optional space separated list of classnames to add to the thread.',
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                    required: [
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                  },
                },
                propertyOrder: ['type', 'thread'],
                required: ['type', 'thread'],
              },
            ],
            description:
              'Additional context attached to the notification. For example, if this notification is about a new reaction on a message, the attachment will specify what message received that new reaction.  \n\nA renderer will typically check the `type` field of the attachment and render that attachment type below the `header`.  \n\nWe may include other types of attachments in the future and therefore recommend having a default case when handling the attachment types.',
          },
          readStatus: {
            type: 'string',
            enum: ['unread', 'read'],
            description:
              'Whether this notification has been read by the recipient yet.',
          },
          timestamp: {
            type: 'Date',
            description: 'The time this notification was sent.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A space separated list of classnames to add to the notification.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              "An arbitrary JSON object specified when the notification was created. This will always be an empty object for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
          },
        },
        propertyOrder: [
          'id',
          'senderUserIDs',
          'iconUrl',
          'header',
          'headerTranslation',
          'attachment',
          'readStatus',
          'timestamp',
          'extraClassnames',
          'metadata',
        ],
        required: [
          'id',
          'senderUserIDs',
          'iconUrl',
          'header',
          'headerTranslation',
          'attachment',
          'readStatus',
          'timestamp',
          'extraClassnames',
          'metadata',
        ],
      },
    },
    ClientNotificationData: {
      name: 'ClientNotificationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          notifications: {
            type: 'CoreNotificationData[]',
            items: {
              type: 'CoreNotificationData',
              properties: {
                id: {
                  description:
                    'The [ID](/reference/identifiers) for this notification.',
                  type: 'string',
                },
                senderUserIDs: {
                  description:
                    'The [IDs](/reference/identifiers) of the user(s) who sent this notification. The Cord backend will sometimes aggregate multiple notifications together, causing them to have multiple senders. For example, if multiple people react to the same message, that will generate only one notification (but with multiple senders, one for each person who reacted).',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                iconUrl: {
                  description:
                    "The URL of an icon image for this notification, if one was specified when it was created. This will always be `null` for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
                  type: ['null', 'string'],
                },
                header: {
                  description:
                    'The "header" or "text" of the notification. This will represent text like "Alice replied to your thread." or similar. For notifications you create via the REST API, this will be based upon the `template` parameter, see below.',
                  type: 'NotificationHeaderNode[]',
                  items: {
                    anyOf: [
                      {
                        type: 'NotificationTextHeader',
                        properties: {
                          type: {
                            description:
                              'Indicator that this is a string header node.',
                            type: '"text"',
                          },
                          text: {
                            description:
                              'The text to display. This text may start and/or end with whitespace, which should typically *not* be trimmed. For example, in order to display the notification `"Alice replied to your thread."`, this would typically be composed of two nodes -- a user node for Alice, and then a text node containing `" replied to your thread."`, with a meaningful space at the front, to separate this node from Alice\'s name.',
                            type: 'string',
                          },
                          bold: {
                            description:
                              'Whether the text should be formatted in bold.',
                            type: 'boolean',
                          },
                        },
                        propertyOrder: ['type', 'text', 'bold'],
                        required: ['type', 'text', 'bold'],
                      },
                      {
                        type: 'NotificationUserHeader',
                        properties: {
                          type: {
                            description:
                              'Indicator that this is a user reference header node.',
                            type: '"user"',
                          },
                          user: {
                            description: 'The indicated user.',
                            type: 'ClientUserData',
                            properties: {
                              id: {
                                description:
                                  "The user's ID.  This is unique within a project.",
                                type: 'string',
                              },
                              name: {
                                description: "The user's name.",
                                type: ['null', 'string'],
                              },
                              shortName: {
                                description:
                                  "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                                type: ['null', 'string'],
                              },
                              displayName: {
                                description:
                                  'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                                type: 'string',
                              },
                              secondaryDisplayName: {
                                description:
                                  'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                                type: 'string',
                              },
                              profilePictureURL: {
                                description:
                                  "A URL to the user's profile picture.",
                                type: ['null', 'string'],
                              },
                              metadata: {
                                description:
                                  'Any metadata that has been set for the user.',
                                type: 'EntityMetadata',
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'shortName',
                              'displayName',
                              'secondaryDisplayName',
                              'profilePictureURL',
                              'metadata',
                            ],
                            required: [
                              'id',
                              'name',
                              'shortName',
                              'displayName',
                              'secondaryDisplayName',
                              'profilePictureURL',
                              'metadata',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'user'],
                        required: ['type', 'user'],
                      },
                    ],
                  },
                },
                headerTranslation: {
                  description:
                    'A translation that can be used to translate the header of the notification. All Cord-created notifications will have a translation, but this may be null for notifications you [create through the REST API](/rest-apis/notifications#Create-a-notification). See [the translations documentation](/customization/translations) for more information.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'Translation',
                      properties: {
                        key: {
                          description:
                            'A translation key that is used to look up the proper translation.  See [the translations documentation](/customization/translations) for more information on how translations work.',
                          type: 'string',
                        },
                        parameters: {
                          description:
                            "The parameters to supply to the translation.  This will always be set, but may be an empty object if the translation doesn't take any parameters.",
                          type: 'TranslationParameters',
                        },
                      },
                      propertyOrder: ['key', 'parameters'],
                      required: ['key', 'parameters'],
                    },
                  ],
                },
                attachment: {
                  description:
                    'Additional context attached to the notification. For example, if this notification is about a new reaction on a message, the attachment will specify what message received that new reaction.  \n\nA renderer will typically check the `type` field of the attachment and render that attachment type below the `header`.  \n\nWe may include other types of attachments in the future and therefore recommend having a default case when handling the attachment types.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'NotificationURLAttachment',
                      properties: {
                        type: {
                          description:
                            'Indicator that this is a URL attachment.',
                          type: '"url"',
                        },
                        url: {
                          description:
                            'The URL this attachment points to. This would typically be the URL to send the browser to if this notification is clicked.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['type', 'url'],
                      required: ['type', 'url'],
                    },
                    {
                      type: 'NotificationMessageAttachment',
                      properties: {
                        type: {
                          description:
                            'Indicator that this is a message attachment.',
                          type: '"message"',
                        },
                        message: {
                          description: 'The relevant message.',
                          type: 'CoreMessageData',
                          properties: {
                            id: {
                              description:
                                'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                              type: 'string',
                            },
                            authorID: {
                              description:
                                'The ID for the user that sent the message.',
                              type: 'string',
                            },
                            groupID: {
                              description:
                                'The ID for the group this message belongs to.',
                              type: 'string',
                            },
                            threadID: {
                              description:
                                'The ID for the thread this message is part of.',
                              type: 'string',
                            },
                            content: {
                              description: 'The content of the message.',
                              type: 'MessageContent',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageAssigneeNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.ASSIGNEE',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageBulletNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.BULLET' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'indent',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageCodeNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.CODE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageLinkNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.LINK' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      url: { type: 'string' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'url',
                                    ],
                                    required: ['type', 'children', 'url'],
                                  },
                                  {
                                    type: 'MessageMentionNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.MENTION' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageNumberBulletNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.NUMBER_BULLET',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      bulletNumber: { type: 'number' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'bulletNumber',
                                      'indent',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'bulletNumber',
                                    ],
                                  },
                                  {
                                    type: 'MessageParagraphNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.PARAGRAPH',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageQuoteNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.QUOTE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageTextNode',
                                    properties: {
                                      type: { type: 'undefined' },
                                      class: { type: 'string' },
                                      text: { type: 'string' },
                                      bold: { type: 'boolean' },
                                      italic: { type: 'boolean' },
                                      underline: { type: 'boolean' },
                                      code: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'text',
                                      'bold',
                                      'italic',
                                      'underline',
                                      'code',
                                    ],
                                    required: ['text'],
                                  },
                                  {
                                    type: 'MessageTodoNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.TODO' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      todoID: { type: 'string' },
                                      done: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                  },
                                  {
                                    type: 'MessageMarkdownNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.MARKDOWN',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                ],
                              },
                            },
                            plaintext: {
                              description:
                                'A plaintext version of the structured message content.',
                              type: 'string',
                            },
                            url: {
                              description:
                                "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                              type: ['null', 'string'],
                            },
                            createdTimestamp: {
                              description:
                                'The timestamp when this message was created.  The default value is the current time.',
                              type: 'Date',
                            },
                            deletedTimestamp: {
                              description:
                                'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            updatedTimestamp: {
                              description:
                                'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            iconURL: {
                              description:
                                'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                              type: ['null', 'string'],
                            },
                            translationKey: {
                              description:
                                'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                              type: ['null', 'string'],
                            },
                            type: {
                              description:
                                'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                              type: 'string',
                              enum: ['action_message', 'user_message'],
                            },
                            metadata: {
                              description:
                                'Arbitrary key-value pairs that can be used to store additional information.',
                              type: 'EntityMetadata',
                            },
                            extraClassnames: {
                              description:
                                'A optional space separated list of classnames to add to the message.',
                              type: ['null', 'string'],
                            },
                            attachments: {
                              description:
                                'The items attached to this message.',
                              type: 'MessageAttachment[]',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageFileAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `file` for file attachments.',
                                        type: '"file"',
                                      },
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                  {
                                    type: 'MessageAnnotationAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `annotation` for annotation attachments.',
                                        type: '"annotation"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the annotation, if any.',
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'UploadedFile',
                                            properties: {
                                              id: {
                                                description:
                                                  'The ID of the file.',
                                                type: 'string',
                                              },
                                              name: {
                                                description:
                                                  'The name of the file.',
                                                type: 'string',
                                              },
                                              url: {
                                                description:
                                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                type: 'string',
                                              },
                                              mimeType: {
                                                description:
                                                  'The MIME type of the file.',
                                                type: 'string',
                                              },
                                              size: {
                                                description:
                                                  'The size of the file, in bytes.',
                                                type: 'number',
                                              },
                                              uploadStatus: {
                                                description:
                                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                type: 'string',
                                                enum: [
                                                  'uploading',
                                                  'uploaded',
                                                  'failed',
                                                  'cancelled',
                                                ],
                                              },
                                            },
                                            propertyOrder: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                            required: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                          },
                                        ],
                                      },
                                      locationData: {
                                        description:
                                          'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                        type: ['null', 'string'],
                                      },
                                      customData: {
                                        description:
                                          "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'CustomAnnotationData',
                                            properties: {
                                              location: {
                                                description:
                                                  'The custom location you produced for this annotation at annotation capture time.',
                                                type: 'Location',
                                              },
                                              coordsRelativeToTarget: {
                                                description:
                                                  'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                type: 'object',
                                                properties: {
                                                  x: { type: 'number' },
                                                  y: { type: 'number' },
                                                },
                                                propertyOrder: ['x', 'y'],
                                                required: ['x', 'y'],
                                              },
                                              label: {
                                                description:
                                                  'Your custom user-visible label for the annotation, if any.',
                                                type: ['null', 'string'],
                                              },
                                            },
                                            propertyOrder: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                            required: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                          },
                                        ],
                                      },
                                      textContent: {
                                        description:
                                          'The text that was selected when creating the annotation, if any.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                    required: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                  },
                                  {
                                    type: 'MessageScreenshotAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                        type: '"screenshot"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    },
                                    propertyOrder: ['type', 'screenshot'],
                                    required: ['type', 'screenshot'],
                                  },
                                  {
                                    type: 'MessageLinkPreviewAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `link_preview` for file link previews.',
                                        type: '"link_preview"',
                                      },
                                      id: {
                                        description:
                                          'The ID of the link preview attachment.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The url from which the preview was generated.',
                                        type: 'string',
                                      },
                                      imageURL: {
                                        description:
                                          'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                        type: ['null', 'string'],
                                      },
                                      title: {
                                        description:
                                          "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                        type: ['null', 'string'],
                                      },
                                      description: {
                                        description:
                                          'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                  },
                                ],
                              },
                            },
                            reactions: {
                              description: 'The reactions to this message.',
                              type: 'Reaction[]',
                              items: {
                                type: 'Reaction',
                                properties: {
                                  reaction: {
                                    description: 'The emoji reaction.',
                                    type: 'string',
                                  },
                                  userID: {
                                    description:
                                      'The ID of the user who reacted to the message.',
                                    type: 'string',
                                  },
                                  timestamp: {
                                    description:
                                      'The timestamp of when the reaction was created.',
                                    type: 'Date',
                                  },
                                },
                                propertyOrder: [
                                  'reaction',
                                  'userID',
                                  'timestamp',
                                ],
                                required: ['reaction', 'userID', 'timestamp'],
                              },
                            },
                            seenBy: {
                              description:
                                'A list of IDs of the users that have seen the message.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            skipLinkPreviews: {
                              description:
                                "If set, Cord won't analyze links in the message to generate previews.",
                              type: 'boolean',
                            },
                          },
                          propertyOrder: [
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                          required: [
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'message'],
                      required: ['type', 'message'],
                    },
                    {
                      type: 'NotificationThreadAttachment',
                      properties: {
                        type: {
                          description:
                            'Indicator that this is a thread attachment.',
                          type: '"thread"',
                        },
                        thread: {
                          description: 'The relevant thread.',
                          type: 'CoreThreadData',
                          properties: {
                            id: {
                              description: 'The ID for this thread.',
                              type: 'string',
                            },
                            groupID: {
                              description: 'The group ID this thread is in.',
                              type: 'string',
                            },
                            total: {
                              description:
                                'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                              type: 'number',
                            },
                            userMessages: {
                              description:
                                'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                              type: 'number',
                            },
                            actionMessages: {
                              description:
                                'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                              type: 'number',
                            },
                            deletedMessages: {
                              description:
                                'The number of deleted messages in this thread.',
                              type: 'number',
                            },
                            resolved: {
                              description:
                                'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                              type: 'boolean',
                            },
                            resolvedTimestamp: {
                              description:
                                'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            participants: {
                              description:
                                'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                              type: 'ThreadParticipant[]',
                              items: {
                                type: 'ThreadParticipant',
                                properties: {
                                  lastSeenTimestamp: {
                                    description:
                                      'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                                  },
                                  userID: {
                                    description:
                                      "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                    type: ['null', 'string'],
                                  },
                                  displayName: {
                                    description:
                                      "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'lastSeenTimestamp',
                                  'userID',
                                  'displayName',
                                ],
                                required: [
                                  'lastSeenTimestamp',
                                  'userID',
                                  'displayName',
                                ],
                              },
                            },
                            subscribers: {
                              description:
                                'All of the users who are subscribed to this thread.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            repliers: {
                              description:
                                'All of the users who have replied to this thread.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            mentioned: {
                              description:
                                'All of the users who were mentioned in a message in this thread.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            actionMessageRepliers: {
                              description:
                                "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            typing: {
                              description:
                                'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            name: {
                              description:
                                'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                              type: 'string',
                            },
                            url: {
                              description:
                                "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                              type: 'string',
                            },
                            location: {
                              description:
                                'The [location](/reference/location) of this thread.',
                              type: 'Location',
                            },
                            metadata: {
                              description:
                                'Arbitrary key-value pairs that can be used to store additional information.',
                              type: 'EntityMetadata',
                            },
                            extraClassnames: {
                              description:
                                'An optional space separated list of classnames to add to the thread.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'groupID',
                            'total',
                            'userMessages',
                            'actionMessages',
                            'deletedMessages',
                            'resolved',
                            'resolvedTimestamp',
                            'participants',
                            'subscribers',
                            'repliers',
                            'mentioned',
                            'actionMessageRepliers',
                            'typing',
                            'name',
                            'url',
                            'location',
                            'metadata',
                            'extraClassnames',
                          ],
                          required: [
                            'id',
                            'groupID',
                            'total',
                            'userMessages',
                            'actionMessages',
                            'deletedMessages',
                            'resolved',
                            'resolvedTimestamp',
                            'participants',
                            'subscribers',
                            'repliers',
                            'mentioned',
                            'actionMessageRepliers',
                            'typing',
                            'name',
                            'url',
                            'location',
                            'metadata',
                            'extraClassnames',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'thread'],
                      required: ['type', 'thread'],
                    },
                  ],
                },
                readStatus: {
                  description:
                    'Whether this notification has been read by the recipient yet.',
                  type: 'string',
                  enum: ['unread', 'read'],
                },
                timestamp: {
                  description: 'The time this notification was sent.',
                  type: 'Date',
                },
                extraClassnames: {
                  description:
                    'A space separated list of classnames to add to the notification.',
                  type: ['null', 'string'],
                },
                metadata: {
                  description:
                    "An arbitrary JSON object specified when the notification was created. This will always be an empty object for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'id',
                'senderUserIDs',
                'iconUrl',
                'header',
                'headerTranslation',
                'attachment',
                'readStatus',
                'timestamp',
                'extraClassnames',
                'metadata',
              ],
              required: [
                'id',
                'senderUserIDs',
                'iconUrl',
                'header',
                'headerTranslation',
                'attachment',
                'readStatus',
                'timestamp',
                'extraClassnames',
                'metadata',
              ],
            },
            description:
              "The current user's notifications, in reverse-chronological order (i.e., newest first). Calling `fetchMore` will load a batch of older notifications and append them to this list. Any new notifications that are sent to the current viewer will automatically be prepended to this list.",
          },
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
        },
        propertyOrder: ['notifications', 'loading', 'fetchMore', 'hasMore'],
        required: ['notifications', 'loading', 'fetchMore', 'hasMore'],
      },
    },
    NotificationListFilter: {
      name: 'NotificationListFilter',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          metadata: {
            type: 'EntityMetadata',
            description:
              'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
          },
          location: {
            anyOf: [
              { type: 'Location' },
              {
                type: 'LocationFilterOptions',
                properties: {
                  value: {
                    description:
                      'The [Location](/reference/location) of the threads.',
                    type: 'Location',
                  },
                  partialMatch: {
                    description:
                      'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                    type: 'boolean',
                  },
                },
                propertyOrder: ['value', 'partialMatch'],
                required: ['value', 'partialMatch'],
              },
            ],
            description:
              'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
          },
          groupID: {
            type: 'string',
            description:
              'The group to which the message that prompted the notification belongs.',
          },
        },
        propertyOrder: ['metadata', 'location', 'groupID'],
        required: [],
      },
    },
    ObserveNotificationSummaryOptions: {
      name: 'ObserveNotificationSummaryOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'NotificationListFilter',
            properties: {
              metadata: {
                description:
                  'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              location: {
                description:
                  'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              groupID: {
                description:
                  'The group to which the message that prompted the notification belongs.',
                type: 'string',
              },
            },
            propertyOrder: ['metadata', 'location', 'groupID'],
            required: [],
            description:
              'An object that can be used to filter the notifications returned.',
          },
        },
        propertyOrder: ['filter'],
        required: [],
      },
    },
    ObserveNotificationDataOptions: {
      name: 'ObserveNotificationDataOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'NotificationListFilter',
            properties: {
              metadata: {
                description:
                  'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              location: {
                description:
                  'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              groupID: {
                description:
                  'The group to which the message that prompted the notification belongs.',
                type: 'string',
              },
            },
            propertyOrder: ['metadata', 'location', 'groupID'],
            required: [],
            description:
              'An object that can be used to filter the notifications returned.',
          },
        },
        propertyOrder: ['filter'],
        required: [],
      },
    },
    MarkAllNotificationsAsReadFilter: {
      name: 'MarkAllNotificationsAsReadFilter',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          metadata: {
            type: 'EntityMetadata',
            description:
              'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
          },
          location: {
            anyOf: [
              { type: 'Location' },
              {
                type: 'LocationFilterOptions',
                properties: {
                  value: {
                    description:
                      'The [Location](/reference/location) of the threads.',
                    type: 'Location',
                  },
                  partialMatch: {
                    description:
                      'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                    type: 'boolean',
                  },
                },
                propertyOrder: ['value', 'partialMatch'],
                required: ['value', 'partialMatch'],
              },
            ],
            description:
              'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
          },
          groupID: {
            type: 'string',
            description:
              'The group to which the message that prompted the notification belongs.',
          },
          messageID: {
            type: 'string',
            description: 'The message that prompted the notification.',
          },
        },
        propertyOrder: ['metadata', 'location', 'groupID', 'messageID'],
        required: [],
      },
    },
    MarkAllNotificationsAsReadOptions: {
      name: 'MarkAllNotificationsAsReadOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'MarkAllNotificationsAsReadFilter',
            properties: {
              metadata: {
                description:
                  'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              location: {
                description:
                  'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              groupID: {
                description:
                  'The group to which the message that prompted the notification belongs.',
                type: 'string',
              },
              messageID: {
                description: 'The message that prompted the notification.',
                type: 'string',
              },
            },
            propertyOrder: ['metadata', 'location', 'groupID', 'messageID'],
            required: [],
            description:
              'An object that can be used to filter the notifications marked as read.',
          },
        },
        propertyOrder: ['filter'],
        required: [],
      },
    },
    ICordNotificationSDK: {
      name: 'ICordNotificationSDK',
      methods: {
        methodOrder: [
          'observeNotificationCounts',
          'observeSummary',
          'unobserveSummary',
          'observeNotifications',
          'observeData',
          'unobserveData',
          'markAsRead',
          'markAsUnread',
          'markAllAsRead',
          'delete',
          'unobserveNotificationSummary',
        ],
        required: [
          'observeNotificationCounts',
          'observeSummary',
          'unobserveSummary',
          'observeNotifications',
          'observeData',
          'unobserveData',
          'markAsRead',
          'markAsUnread',
          'markAllAsRead',
          'delete',
          'unobserveNotificationSummary',
        ],
        methods: {
          observeNotificationCounts: {
            name: 'observeNotificationCounts',
            summary:
              'This method allows you to observe the count of unread notifications for the current user, including live updates.',
            examples: {
              Overview:
                "const ref = window.CordSDK.notification.observeNotificationCounts(\n  (counts) => {\n       console.log(\"Unread notifications\", counts.unread);\n  },\n  { filter: {\n        metadata: { flavor: 'minty' },\n        location: { page: 'bookmarks' },\n        groupID: 'group123',\n   }}\n);",
            },
            parameters: {
              propertyOrder: ['callback', 'options'],
              required: ['callback'],
              properties: {
                callback: {
                  description:
                    'This callback will be called once with the current                     notification counts, and then again every time the data                     changes. The argument passed to the callback is an object                     which will contain the fields described under "Available                     Data" above..',
                  type: 'NotificationSummaryUpdateCallback',
                },
                options: {
                  description: '',
                  type: 'ObserveNotificationSummaryOptions',
                  properties: {
                    filter: {
                      description:
                        'An object that can be used to filter the notifications returned.',
                      type: 'NotificationListFilter',
                      properties: {
                        metadata: {
                          description:
                            'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        location: {
                          description:
                            'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        groupID: {
                          description:
                            'The group to which the message that prompted the notification belongs.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['metadata', 'location', 'groupID'],
                      required: [],
                    },
                  },
                  propertyOrder: ['filter'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to  `unobserveNotificationCounts` to stop observing notification count  information.',
              type: 'number',
            },
          },
          observeSummary: {
            name: 'observeSummary',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['callback', 'options'],
              required: ['callback'],
              properties: {
                callback: { type: 'NotificationSummaryUpdateCallback' },
                options: {
                  type: 'ObserveNotificationSummaryOptions',
                  properties: {
                    filter: {
                      description:
                        'An object that can be used to filter the notifications returned.',
                      type: 'NotificationListFilter',
                      properties: {
                        metadata: {
                          description:
                            'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        location: {
                          description:
                            'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        groupID: {
                          description:
                            'The group to which the message that prompted the notification belongs.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['metadata', 'location', 'groupID'],
                      required: [],
                    },
                  },
                  propertyOrder: ['filter'],
                  required: [],
                },
              },
            },
            returns: { type: 'number' },
          },
          unobserveSummary: {
            name: 'unobserveSummary',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['ref'],
              required: ['ref'],
              properties: { ref: { type: 'number' } },
            },
            returns: { type: 'boolean' },
          },
          observeNotifications: {
            name: 'observeNotifications',
            summary:
              'This method allows you to observe the available notifications for the current user, including live updates.',
            examples: {
              Overview:
                "const ref = window.CordSDK.notification.observeNotifications(\n  ({ notifications, loading, hasMore, fetchMore }) => {\n    console.log('Got a notifications data update:');\n    if (loading) {\n      console.log('Loading...');\n    }\n    notifications.forEach((notification) =>\n      console.log(`Got notification ${notification.id}!`),\n    );\n    if (!loading && hasMore && notifications.length < 25) {\n      // Get the first 25 notifications, 10 at a time.\n      fetchMore(10);\n    }\n  },\n  { filter: { metadata: { flavor: 'minty' } } },\n);",
            },
            parameters: {
              propertyOrder: ['callback', 'options'],
              required: ['callback'],
              properties: {
                callback: {
                  description:
                    'This callback will be called once with the current notifications, and then again every time the data changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'NotificationDataUpdateCallback',
                },
                options: {
                  description: 'Miscellaneous options.',
                  type: 'ObserveNotificationDataOptions',
                  properties: {
                    filter: {
                      description:
                        'An object that can be used to filter the notifications returned.',
                      type: 'NotificationListFilter',
                      properties: {
                        metadata: {
                          description:
                            'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        location: {
                          description:
                            'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        groupID: {
                          description:
                            'The group to which the message that prompted the notification belongs.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['metadata', 'location', 'groupID'],
                      required: [],
                    },
                  },
                  propertyOrder: ['filter'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveNotifications` to stop observing notifications.',
              type: 'number',
            },
          },
          observeData: {
            name: 'observeData',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['callback', 'options'],
              required: ['callback'],
              properties: {
                callback: { type: 'NotificationDataUpdateCallback' },
                options: {
                  type: 'ObserveNotificationDataOptions',
                  properties: {
                    filter: {
                      description:
                        'An object that can be used to filter the notifications returned.',
                      type: 'NotificationListFilter',
                      properties: {
                        metadata: {
                          description:
                            'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        location: {
                          description:
                            'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        groupID: {
                          description:
                            'The group to which the message that prompted the notification belongs.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['metadata', 'location', 'groupID'],
                      required: [],
                    },
                  },
                  propertyOrder: ['filter'],
                  required: [],
                },
              },
            },
            returns: { type: 'number' },
          },
          unobserveData: {
            name: 'unobserveData',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['ref'],
              required: ['ref'],
              properties: { ref: { type: 'number' } },
            },
            returns: { type: 'boolean' },
          },
          markAsRead: {
            name: 'markAsRead',
            summary: 'Mark a specific notification as read.',
            examples: {
              Usage:
                "window.CordSDK.notification.markAsRead('my-awesome-notification-id');",
            },
            parameters: {
              propertyOrder: ['notificationID'],
              required: ['notificationID'],
              properties: {
                notificationID: {
                  description: 'The ID of the notification to mark as read.',
                  type: 'string',
                },
              },
            },
            returns: {
              description:
                'A promise which resolves when the database write has completed.',
              type: 'Promise<void>',
            },
          },
          markAsUnread: {
            name: 'markAsUnread',
            summary: 'Mark a specific notification as unread.',
            examples: {
              Usage:
                "window.CordSDK.notification.markAsUnread('my-awesome-notification-id');",
            },
            parameters: {
              propertyOrder: ['notificationID'],
              required: ['notificationID'],
              properties: {
                notificationID: {
                  description: 'The ID of the notification to mark as unread.',
                  type: 'string',
                },
              },
            },
            returns: {
              description:
                'A promise which resolves when the database write has completed.',
              type: 'Promise<void>',
            },
          },
          markAllAsRead: {
            name: 'markAllAsRead',
            summary:
              'Mark all notifications as read (that, optionally, match a filter).',
            examples: {
              Usage:
                "window.CordSDK.notification.markAllAsRead(\n  { filter: { metadata: { flavor: 'minty' } } },\n);",
            },
            parameters: {
              propertyOrder: ['options'],
              required: [],
              properties: {
                options: {
                  description: 'Miscellaneous options.',
                  type: 'MarkAllNotificationsAsReadOptions',
                  properties: {
                    filter: {
                      description:
                        'An object that can be used to filter the notifications marked as read.',
                      type: 'MarkAllNotificationsAsReadFilter',
                      properties: {
                        metadata: {
                          description:
                            'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        location: {
                          description:
                            'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        groupID: {
                          description:
                            'The group to which the message that prompted the notification belongs.',
                          type: 'string',
                        },
                        messageID: {
                          description:
                            'The message that prompted the notification.',
                          type: 'string',
                        },
                      },
                      propertyOrder: [
                        'metadata',
                        'location',
                        'groupID',
                        'messageID',
                      ],
                      required: [],
                    },
                  },
                  propertyOrder: ['filter'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A promise which resolves when the database writes have completed.',
              type: 'Promise<void>',
            },
          },
          delete: {
            name: 'delete',
            summary: 'Delete a notification',
            examples: {
              Overview:
                "window.CordSDK.notification.delete('my-awesome-notification-id');",
            },
            parameters: {
              propertyOrder: ['notificationID'],
              required: ['notificationID'],
              properties: {
                notificationID: {
                  description: 'The ID of the notification to delete.',
                  type: 'string',
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<true>',
            },
          },
          unobserveNotificationSummary: {
            name: 'unobserveNotificationSummary',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['args'],
              required: ['args'],
              properties: { args: { type: '[ref: number]' } },
            },
            returns: { type: 'boolean' },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    ServerCreateNotification: {
      name: 'ServerCreateNotification',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          actorID: {
            type: 'string',
            description:
              'ID of user who is the "actor" sending the notification, i.e., the user taking the action the notification is about.  \n\nRequired if `template` includes `{{actor}}`.',
          },
          recipientID: {
            type: 'string',
            description: 'ID of user receiving the notification.',
          },
          template: {
            type: 'string',
            description:
              "Template for the header of the notification. The expressions `{{actor}}` and `{{recipient}}` will be replaced respectively with the notification's actor and recipient. (See below for an example.)",
          },
          url: {
            type: 'string',
            description:
              'URL of page to go to when the notification is clicked.',
          },
          iconUrl: {
            type: 'string',
            description:
              "URL of an icon image if a specific one is desired. For notifications with an `actor_id` this will default to the sender's profile picture, otherwise it will default to a bell icon.",
          },
          type: {
            type: '"url"',
            description:
              'Currently must be set to `url`. In the future this may specify different types of notifications, but for now only `url` is defined.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'An arbitrary JSON object that can be used to set additional metadata on the notification. When displaying a [list of notifications](/components/cord-notification-list), you can filter the list by metadata value.  \n\nKeys are strings, and values can be strings, numbers or booleans.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'An optional space separated list of classnames to add to the notification.',
          },
        },
        propertyOrder: [
          'actorID',
          'recipientID',
          'template',
          'url',
          'iconUrl',
          'type',
          'metadata',
          'extraClassnames',
        ],
        required: ['template', 'url', 'type'],
      },
    },
    ServerListNotificationParameters: {
      name: 'ServerListNotificationParameters',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'NotificationListFilter',
            properties: {
              metadata: {
                description:
                  'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              location: {
                description:
                  'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              groupID: {
                description:
                  'The group to which the message that prompted the notification belongs.',
                type: 'string',
              },
            },
            propertyOrder: ['metadata', 'location', 'groupID'],
            required: [],
            description:
              'Notifications will be matched against the filters specified. Please note that because this is a query parameter in a REST API, this JSON object must be URI encoded before being sent.',
          },
        },
        propertyOrder: ['filter'],
        required: [],
      },
    },
    ServerOrganizationData: {
      name: 'ServerOrganizationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: ['string', 'number'],
            description: 'ID of the organization',
          },
          name: {
            type: 'string',
            description:
              'Organization name. Required when creating an organization.',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this organization is active or deleted.  Attempting to log into a deleted organization will fail.',
          },
          members: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description:
              'List of partner-specific IDs of the users who are members of this organization',
          },
          connectedToSlack: {
            type: 'boolean',
            description:
              'If the organization has connected to a Slack workspace',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
        },
        propertyOrder: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
        required: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
      },
    },
    ServerUpdateOrganization: {
      name: 'ServerUpdateOrganization',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: 'string',
            description:
              'Organization name. Required when creating an organization.',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this organization is active or deleted.  Attempting to log into a deleted organization will fail.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          members: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description:
              'List of partner-specific IDs of the users who are members of this organization. This will replace the existing members.',
          },
        },
        propertyOrder: ['name', 'status', 'metadata', 'members'],
        required: [],
      },
    },
    ServerUpdateOrganizationMembers: {
      name: 'ServerUpdateOrganizationMembers',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          add: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description: 'The IDs of users to add to this organization.',
          },
          remove: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description: 'The IDs of users to remove from this organization.',
          },
        },
        propertyOrder: ['add', 'remove'],
        required: [],
      },
    },
    ServerCreateOrganization: {
      name: 'ServerCreateOrganization',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: 'string',
            description:
              'Organization name. Required when creating an organization.',
          },
          id: {
            type: ['string', 'number'],
            description: 'ID of the organization',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this organization is active or deleted.  Attempting to log into a deleted organization will fail.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          members: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description:
              'List of partner-specific IDs of the users who are members of this organization',
          },
        },
        propertyOrder: ['name', 'id', 'status', 'metadata', 'members'],
        required: ['name', 'id'],
      },
    },
    ServerGetOrganization: {
      name: 'ServerGetOrganization',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: ['string', 'number'],
            description: 'ID of the organization',
          },
          name: {
            type: 'string',
            description:
              'Organization name. Required when creating an organization.',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this organization is active or deleted.  Attempting to log into a deleted organization will fail.',
          },
          members: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description:
              'List of partner-specific IDs of the users who are members of this organization',
          },
          connectedToSlack: {
            type: 'boolean',
            description:
              'If the organization has connected to a Slack workspace',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
        },
        propertyOrder: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
        required: [
          'id',
          'name',
          'status',
          'members',
          'connectedToSlack',
          'metadata',
        ],
      },
    },
    ServerListOrganization: {
      name: 'ServerListOrganization',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: 'string',
            description:
              'Organization name. Required when creating an organization.',
          },
          id: {
            type: ['string', 'number'],
            description: 'ID of the organization',
          },
          status: {
            type: 'string',
            enum: ['active', 'deleted'],
            description:
              'Whether this organization is active or deleted.  Attempting to log into a deleted organization will fail.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          connectedToSlack: {
            type: 'boolean',
            description:
              'If the organization has connected to a Slack workspace',
          },
        },
        propertyOrder: ['name', 'id', 'status', 'metadata', 'connectedToSlack'],
        required: ['name', 'id', 'status', 'metadata', 'connectedToSlack'],
      },
    },
    ServerUpdatePreference: {
      name: 'ServerUpdatePreference',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          key: {
            type: '"notification_channels"',
            description:
              'The preference key. `notification_channels` controls how users get notified about Cord activity.',
          },
          value: {
            type: 'Partial<NotificationPreferences>',
            properties: {
              sendViaSlack: {
                description: 'Whether notifications should be sent via slack.',
                type: 'boolean',
              },
              sendViaEmail: {
                description: 'Whether notifications should be sent via email.',
                type: 'boolean',
              },
            },
            propertyOrder: ['sendViaSlack', 'sendViaEmail'],
            required: [],
            description:
              'The updated preference value. This will update only the keys that are passed along. For example, to disable Slack notification, but leave email untouched, you can use this value:  \n\n```json\n{\n   "value": { "sendViaSlack": "false" },\n}\n\n```',
          },
        },
        propertyOrder: ['key', 'value'],
        required: ['key', 'value'],
      },
    },
    UserPreferences: {
      name: 'UserPreferences',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          notification_channels: {
            type: 'NotificationPreferences',
            properties: {
              sendViaSlack: {
                description: 'Whether notifications should be sent via slack.',
                type: 'boolean',
              },
              sendViaEmail: {
                description: 'Whether notifications should be sent via email.',
                type: 'boolean',
              },
            },
            propertyOrder: ['sendViaSlack', 'sendViaEmail'],
            required: ['sendViaSlack', 'sendViaEmail'],
            description:
              '`notification_channels` controls how users get notified about Cord activity.',
          },
        },
        propertyOrder: ['notification_channels'],
        required: ['notification_channels'],
      },
    },
    GetPresentOptions: {
      name: 'GetPresentOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          exclude_durable: { type: 'boolean' },
          partial_match: { type: 'boolean' },
        },
        propertyOrder: ['exclude_durable', 'partial_match'],
        required: [],
      },
    },
    SetPresentOptions: {
      name: 'SetPresentOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          durable: {
            type: 'boolean',
            description:
              'When `true`, this is a [durable presence](/js-apis-and-hooks/presence-api) update, when `false`, or is not used, it is an [ephemeral presence](/js-apis-and-hooks/presence-api) update.  \n\nThis value defaults to `false.`',
          },
          absent: {
            type: 'boolean',
            description:
              'When `true`, this is an *absence* update, meaning that the user has just left this [location](/reference/location). If the user is currently present at that location, it is cleared. This cannot be used with a [durable presence](/js-apis-and-hooks/presence-api) update.  \n\nThis value defaults to `false.` The user will be set as present at the location.',
          },
          exclusive_within: { type: 'Location' },
          groupID: {
            type: 'string',
            description:
              'The ID of the group which should be able to see this presence update',
          },
        },
        propertyOrder: ['durable', 'absent', 'exclusive_within', 'groupID'],
        required: [],
      },
    },
    AddListenerOptions: {
      name: 'AddListenerOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { partial_match: { type: 'boolean' } },
        propertyOrder: ['partial_match'],
        required: [],
      },
    },
    ObservePresenceOptions: {
      name: 'ObservePresenceOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          exclude_durable: {
            type: 'boolean',
            description:
              'When `true`, only return [ephemeral presence](/js-apis-and-hooks/presence-api) records.  \n\nThis value defaults to `false`.',
          },
          partial_match: {
            type: 'boolean',
            description:
              'When `true`, returns users in any [partially matching location](/reference/location), rather than in only the specific location given.  \n\nThis value defaults to `false`.',
          },
        },
        propertyOrder: ['exclude_durable', 'partial_match'],
        required: [],
      },
    },
    PartialUserLocationData: {
      name: 'PartialUserLocationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: 'string',
            description:
              'The user ID of the user this presence information is for.',
          },
          ephemeral: {
            type: 'object',
            properties: {
              locations: {
                anyOf: [
                  { type: 'null' },
                  { type: 'Location[]', items: { type: 'Location' } },
                ],
              },
            },
            propertyOrder: ['locations'],
            required: ['locations'],
            description:
              "Contains information about the user's [ephemeral presence](/js-apis-and-hooks/presence-api).",
          },
          durable: {
            type: 'object',
            properties: {
              location: { type: 'Location' },
              timestamp: { type: 'Date' },
            },
            propertyOrder: ['location', 'timestamp'],
            required: ['location', 'timestamp'],
            description:
              "Contains information about the user's [durable presence](/js-apis-and-hooks/presence-api).  Undefined if the user does not have a durable presence [set](/js-apis-and-hooks/presence-api/setPresent). The location and timestamp will be for the user's most recently-set matching durable presence record (which may not be for the requested location if using the `partial_match` option).",
          },
        },
        propertyOrder: ['id', 'ephemeral', 'durable'],
        required: ['id'],
      },
    },
    UserLocationData: {
      name: 'UserLocationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          ephemeral: {
            type: 'object',
            properties: {
              locations: { type: 'Location[]', items: { type: 'Location' } },
            },
            propertyOrder: ['locations'],
            required: ['locations'],
            description:
              "Contains information about the user's [ephemeral presence](/js-apis-and-hooks/presence-api).  The location array can be empty if the user is not currently present at the requested location.",
          },
          id: {
            type: 'string',
            description:
              'The user ID of the user this presence information is for.',
          },
          durable: {
            type: 'object',
            properties: {
              location: { type: 'Location' },
              timestamp: { type: 'Date' },
            },
            propertyOrder: ['location', 'timestamp'],
            required: ['location', 'timestamp'],
            description:
              "Contains information about the user's [durable presence](/js-apis-and-hooks/presence-api).  Undefined if the user does not have a durable presence [set](/js-apis-and-hooks/presence-api/setPresent). The location and timestamp will be for the user's most recently-set matching durable presence record (which may not be for the requested location if using the `partial_match` option).",
          },
        },
        propertyOrder: ['ephemeral', 'id', 'durable'],
        required: ['ephemeral', 'id'],
      },
    },
    UserPresenceInformation: {
      name: 'UserPresenceInformation',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          present: { type: 'boolean' },
          lastPresent: { type: 'Date' },
          presentLocations: { type: 'Location[]', items: { type: 'Location' } },
        },
        propertyOrder: ['present', 'lastPresent', 'presentLocations'],
        required: ['present', 'lastPresent', 'presentLocations'],
      },
    },
    ICordPresenceSDK: {
      name: 'ICordPresenceSDK',
      methods: {
        methodOrder: ['observePresence', 'observeLocationData'],
        required: ['observePresence', 'observeLocationData'],
        methods: {
          observePresence: {
            name: 'observePresence',
            summary:
              'This method allows you to observe users who are [present](/js-apis-and-hooks/presence-api) at a particular [location](/reference/location), including live updates.',
            examples: {
              Overview:
                'const ref = window.CordSDK.presence.observePresence(\n  { page: "https://cord.com", block: "id123" },\n  (present) => present.forEach(\n    (d) => console.log(`${d.id} is present!`)\n  ),\n  { exclude_durable: true },\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.presence.unobservePresence(ref);',
            },
            parameters: {
              propertyOrder: ['location', 'callback', 'options'],
              required: ['location', 'callback'],
              properties: {
                location: {
                  description:
                    'The [location](/reference/location) to fetch presence information for.',
                  type: 'Location',
                },
                callback: {
                  description:
                    'This callback will be called once with the current presence data, and then again every time the data changes. The argument passed to the callback is an array of objects. Each object will contain the fields described under "Available Data" above.',
                  type: 'PresenceUpdateCallback',
                },
                options: {
                  description:
                    'Options that control which presence records are returned.',
                  type: 'ObservePresenceOptions',
                  properties: {
                    exclude_durable: {
                      description:
                        'When `true`, only return [ephemeral presence](/js-apis-and-hooks/presence-api) records.  \n\nThis value defaults to `false`.',
                      type: 'boolean',
                    },
                    partial_match: {
                      description:
                        'When `true`, returns users in any [partially matching location](/reference/location), rather than in only the specific location given.  \n\nThis value defaults to `false`.',
                      type: 'boolean',
                    },
                  },
                  propertyOrder: ['exclude_durable', 'partial_match'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobservePresence` to stop observing location data.',
              type: 'number',
            },
          },
          observeLocationData: {
            name: 'observeLocationData',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['location', 'callback', 'options'],
              required: ['location', 'callback'],
              properties: {
                location: { type: 'Location' },
                callback: { type: 'PresenceUpdateCallback' },
                options: {
                  type: 'ObservePresenceOptions',
                  properties: {
                    exclude_durable: {
                      description:
                        'When `true`, only return [ephemeral presence](/js-apis-and-hooks/presence-api) records.  \n\nThis value defaults to `false`.',
                      type: 'boolean',
                    },
                    partial_match: {
                      description:
                        'When `true`, returns users in any [partially matching location](/reference/location), rather than in only the specific location given.  \n\nThis value defaults to `false`.',
                      type: 'boolean',
                    },
                  },
                  propertyOrder: ['exclude_durable', 'partial_match'],
                  required: [],
                },
              },
            },
            returns: { type: 'number' },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    ServerUpdatePresence: {
      name: 'ServerUpdatePresence',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          exclusiveWithin: {
            type: 'Location',
            description:
              'Sets an "exclusivity region" for the ephemeral presence set by this update. A user can only be present at one location for a given value of exclusiveWithin. If the user becomes present at a different location with the same value of exclusiveWithin, they automatically become no longer present at all other locations with that value of exclusive_within. This is useful to more easily track presence as a user moves among sub-locations. For example, suppose we\'d like to track which specific paragraph on a page a user is present. We could make those updates like this:  \n\n```json\n{\n   "groupID": "<GROUP_ID>",\n   "location": { "page": "<PAGE_ID>", "paragraph": "<PARAGRAPH_ID>" },\n   "exclusiveWithin": { "page": "<PAGE_ID>" }\n}\n\n``` As a user moves around a page, their paragraphID will change, while their pageID will remain the same. The above call to setPresent will mark them present at their specific paragraph. However, since every update uses the same exclusiveWithin, each time they are marked present at one paragraph they will become no longer present at their previous paragraph.',
          },
          location: {
            type: 'Location',
            description:
              'The [location](/reference/location) you want the user to be in.',
          },
          groupID: {
            type: 'string',
            description:
              'The ID of the group which should be able to see this presence update',
          },
          durable: {
            type: 'boolean',
            description:
              'When `true`, this is a [durable presence](/js-apis-and-hooks/presence-api) update, when `false`, or is not used, it is an [ephemeral presence](/js-apis-and-hooks/presence-api) update.  \n\nThis value defaults to `false.`',
          },
          absent: {
            type: 'boolean',
            description:
              'When `true`, this is an *absence* update, meaning that the user has just left this [location](/reference/location). If the user is currently present at that location, it is cleared. This cannot be used with a [durable presence](/js-apis-and-hooks/presence-api) update.  \n\nThis value defaults to `false.` The user will be set as present at the location.',
          },
        },
        propertyOrder: [
          'exclusiveWithin',
          'location',
          'groupID',
          'durable',
          'absent',
        ],
        required: ['location'],
      },
    },
    EmailSettings: {
      name: 'EmailSettings',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: ['null', 'string'],
            description:
              "Name to show in both the subject and the body of the email. Defaults to your project's name.",
          },
          imageURL: {
            type: ['null', 'string'],
            description:
              'URL for your logo image. The default for this is the Cord logo.',
          },
          sender: {
            type: ['null', 'string'],
            description:
              'Email from which notifications for your service will be sent from. This will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',
          },
          logoConfig: {
            anyOf: [
              { type: 'null' },
              {
                type: 'object',
                properties: { width: { description: '', type: 'number' } },
                propertyOrder: ['width'],
                required: ['width'],
              },
              {
                type: 'object',
                properties: { height: { description: '', type: 'number' } },
                propertyOrder: ['height'],
                required: ['height'],
              },
            ],
            description:
              'Customization for your logo size. Providing either a height (maximum 120) or width (maximum 240) will result in the image being proportionally resized to fit in a container of that size. The default value is `{"width": 140}`.',
          },
          enableEmailNotifications: {
            type: 'boolean',
            description:
              'Whether you want your users to receive notification emails. The default value is true.',
          },
        },
        propertyOrder: [
          'name',
          'imageURL',
          'sender',
          'logoConfig',
          'enableEmailNotifications',
        ],
        required: [
          'name',
          'imageURL',
          'sender',
          'logoConfig',
          'enableEmailNotifications',
        ],
      },
    },
    ProjectData: {
      name: 'ProjectData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: 'string', description: 'The ID for the project.' },
          secret: {
            type: 'string',
            description:
              'The secret key for the project.  Please treat securely as access to this will allow someone to take actions as if they are the project.',
          },
          name: { type: 'string', description: 'Name of the project' },
          iconURL: {
            type: ['null', 'string'],
            description:
              'URL for the project icon. It should be a square image of 256x256. This will be used as the avatar for messages and emails coming from your project.  If not specified, the Cord logo will be used.',
          },
          eventWebhookURL: {
            type: ['null', 'string'],
            description: 'The URL that the events webhook is sent to',
          },
          redirectURI: {
            type: ['null', 'string'],
            description:
              'Custom url link contained in email and slack notifications. These notifications are sent when a user is mentioned or thread is shared and by default, the link points to the page where the conversation happened. For more information, please refer to the [API docs](/customization/redirect-link)',
          },
          emailSettings: {
            type: 'EmailSettings',
            properties: {
              name: {
                description:
                  "Name to show in both the subject and the body of the email. Defaults to your project's name.",
                type: ['null', 'string'],
              },
              imageURL: {
                description:
                  'URL for your logo image. The default for this is the Cord logo.',
                type: ['null', 'string'],
              },
              sender: {
                description:
                  'Email from which notifications for your service will be sent from. This will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',
                type: ['null', 'string'],
              },
              logoConfig: {
                description:
                  'Customization for your logo size. Providing either a height (maximum 120) or width (maximum 240) will result in the image being proportionally resized to fit in a container of that size. The default value is `{"width": 140}`.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'object',
                    properties: { width: { description: '', type: 'number' } },
                    propertyOrder: ['width'],
                    required: ['width'],
                  },
                  {
                    type: 'object',
                    properties: { height: { description: '', type: 'number' } },
                    propertyOrder: ['height'],
                    required: ['height'],
                  },
                ],
              },
              enableEmailNotifications: {
                description:
                  'Whether you want your users to receive notification emails. The default value is true.',
                type: 'boolean',
              },
            },
            propertyOrder: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            required: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            description: 'Email settings for notifications.',
          },
          createdTimestamp: {
            type: 'Date',
            description: 'The time at which the project was created',
          },
        },
        propertyOrder: [
          'id',
          'secret',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
          'emailSettings',
          'createdTimestamp',
        ],
        required: [
          'id',
          'secret',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
          'emailSettings',
          'createdTimestamp',
        ],
      },
    },
    ServerCreateProject: {
      name: 'ServerCreateProject',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          emailSettings: {
            type: 'Partial<EmailSettings>',
            properties: {
              name: {
                description:
                  "Name to show in both the subject and the body of the email. Defaults to your project's name.",
                type: ['null', 'string'],
              },
              imageURL: {
                description:
                  'URL for your logo image. The default for this is the Cord logo.',
                type: ['null', 'string'],
              },
              sender: {
                description:
                  'Email from which notifications for your service will be sent from. This will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',
                type: ['null', 'string'],
              },
              logoConfig: {
                description:
                  'Customization for your logo size. Providing either a height (maximum 120) or width (maximum 240) will result in the image being proportionally resized to fit in a container of that size. The default value is `{"width": 140}`.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'object',
                    properties: { width: { description: '', type: 'number' } },
                    propertyOrder: ['width'],
                    required: ['width'],
                  },
                  {
                    type: 'object',
                    properties: { height: { description: '', type: 'number' } },
                    propertyOrder: ['height'],
                    required: ['height'],
                  },
                ],
              },
              enableEmailNotifications: {
                description:
                  'Whether you want your users to receive notification emails. The default value is true.',
                type: 'boolean',
              },
            },
            propertyOrder: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            required: [],
          },
          name: { type: 'string', description: 'Name of the project' },
          iconURL: {
            type: ['null', 'string'],
            description:
              'URL for the project icon. It should be a square image of 256x256. This will be used as the avatar for messages and emails coming from your project.  If not specified, the Cord logo will be used.',
          },
          eventWebhookURL: {
            type: ['null', 'string'],
            description: 'The URL that the events webhook is sent to',
          },
          redirectURI: {
            type: ['null', 'string'],
            description:
              'Custom url link contained in email and slack notifications. These notifications are sent when a user is mentioned or thread is shared and by default, the link points to the page where the conversation happened. For more information, please refer to the [API docs](/customization/redirect-link)',
          },
        },
        propertyOrder: [
          'emailSettings',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
        ],
        required: ['name'],
      },
    },
    ServerUpdateProject: {
      name: 'ServerUpdateProject',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          emailSettings: {
            type: 'Partial<EmailSettings>',
            properties: {
              name: {
                description:
                  "Name to show in both the subject and the body of the email. Defaults to your project's name.",
                type: ['null', 'string'],
              },
              imageURL: {
                description:
                  'URL for your logo image. The default for this is the Cord logo.',
                type: ['null', 'string'],
              },
              sender: {
                description:
                  'Email from which notifications for your service will be sent from. This will use the provided name for your project to default to `<projectname>-notifications@cord.fyi`.',
                type: ['null', 'string'],
              },
              logoConfig: {
                description:
                  'Customization for your logo size. Providing either a height (maximum 120) or width (maximum 240) will result in the image being proportionally resized to fit in a container of that size. The default value is `{"width": 140}`.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'object',
                    properties: { width: { description: '', type: 'number' } },
                    propertyOrder: ['width'],
                    required: ['width'],
                  },
                  {
                    type: 'object',
                    properties: { height: { description: '', type: 'number' } },
                    propertyOrder: ['height'],
                    required: ['height'],
                  },
                ],
              },
              enableEmailNotifications: {
                description:
                  'Whether you want your users to receive notification emails. The default value is true.',
                type: 'boolean',
              },
            },
            propertyOrder: [
              'name',
              'imageURL',
              'sender',
              'logoConfig',
              'enableEmailNotifications',
            ],
            required: [],
          },
          name: { type: 'string', description: 'Name of the project' },
          iconURL: {
            type: ['null', 'string'],
            description:
              'URL for the project icon. It should be a square image of 256x256. This will be used as the avatar for messages and emails coming from your project.  If not specified, the Cord logo will be used.',
          },
          eventWebhookURL: {
            type: ['null', 'string'],
            description: 'The URL that the events webhook is sent to',
          },
          redirectURI: {
            type: ['null', 'string'],
            description:
              'Custom url link contained in email and slack notifications. These notifications are sent when a user is mentioned or thread is shared and by default, the link points to the page where the conversation happened. For more information, please refer to the [API docs](/customization/redirect-link)',
          },
        },
        propertyOrder: [
          'emailSettings',
          'name',
          'iconURL',
          'eventWebhookURL',
          'redirectURI',
        ],
        required: [],
      },
    },
    ServerDeleteProject: {
      name: 'ServerDeleteProject',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          secret: {
            type: 'string',
            description:
              'Secret key of the project that you want to delete. This can be found within the Cord Console.',
          },
        },
        propertyOrder: ['secret'],
        required: ['secret'],
      },
    },
    ObserveThreadActivitySummaryOptions: {
      name: 'ObserveThreadActivitySummaryOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          partialMatch: {
            type: 'boolean',
            description:
              'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.  \n\nIf unset, defaults to `false`.',
          },
          filter: {
            type: 'Pick<ThreadListFilter, "groupID">',
            properties: {
              groupID: {
                description:
                  'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                type: 'string',
              },
            },
            propertyOrder: ['groupID'],
            required: [],
          },
        },
        propertyOrder: ['partialMatch', 'filter'],
        required: [],
      },
    },
    ObserveThreadCountsOptions: {
      name: 'ObserveThreadCountsOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'ClientThreadFilter',
            properties: {
              location: {
                description:
                  'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              resolvedStatus: {
                description:
                  'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                type: 'string',
                enum: ['any', 'resolved', 'unresolved'],
              },
              metadata: {
                description:
                  'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              groupID: {
                description:
                  'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                type: 'string',
              },
              viewer: {
                description:
                  'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                anyOf: [
                  { type: '"subscribed"' },
                  { type: '"mentioned"' },
                  {
                    type: 'ViewerThreadStatus[]',
                    items: {
                      type: 'string',
                      enum: ['subscribed', 'mentioned'],
                    },
                  },
                ],
              },
            },
            propertyOrder: [
              'location',
              'resolvedStatus',
              'metadata',
              'groupID',
              'viewer',
            ],
            required: [],
            description:
              'An object that can be used to filter the threads returned.',
          },
        },
        propertyOrder: ['filter'],
        required: [],
      },
    },
    ObserveThreadActivitySummaryHookOptions: {
      name: 'ObserveThreadActivitySummaryHookOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { partialMatch: { type: 'boolean' } },
        propertyOrder: ['partialMatch'],
        required: [],
      },
    },
    ThreadActivitySummary: {
      name: 'ThreadActivitySummary',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          total: {
            type: 'number',
            description:
              'The total number of threads, both resolved and unresolved. This does not include threads in which all messages have been deleted.',
          },
          unread: {
            type: 'number',
            description:
              'The total number of threads that contain *at least one* unread message in the thread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
          },
          unreadSubscribed: {
            type: 'number',
            description:
              "The number of threads that have messages the current user hasn't seen yet and is subscribed to.  \n\nA user is automatically subscribed to threads relevant to them, for example because they have sent a message or have been @-mentioned in them. `unreadSubscribed` is always less than or equal to `unread`.",
          },
          new: {
            type: 'number',
            description:
              'The total number of threads that the user has never seen before at all, i.e., *every* message in the thread is unread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
          },
          resolved: {
            type: 'number',
            description:
              "The number of resolved threads. This refers to threads that users have manually marked as resolved within Cord's UI components.",
          },
          empty: {
            type: 'number',
            description:
              'The number of thread with no visible messages. This refers to threads in which all the messages have been deleted.',
          },
        },
        propertyOrder: [
          'total',
          'unread',
          'unreadSubscribed',
          'new',
          'resolved',
          'empty',
        ],
        required: [
          'total',
          'unread',
          'unreadSubscribed',
          'new',
          'resolved',
          'empty',
        ],
      },
    },
    ICordActivitySDK: {
      name: 'ICordActivitySDK',
      methods: {
        methodOrder: ['observeThreadSummary', 'unobserveThreadSummary'],
        required: ['observeThreadSummary', 'unobserveThreadSummary'],
        methods: {
          observeThreadSummary: {
            name: 'observeThreadSummary',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['args'],
              required: ['args'],
              properties: {
                args: {
                  type: '[location: Location, callback: ThreadActivitySummaryUpdateCallback, options?: ObserveThreadActivitySummaryOptions | undefined]',
                },
              },
            },
            returns: { type: 'number' },
          },
          unobserveThreadSummary: {
            name: 'unobserveThreadSummary',
            summary: '',
            examples: {},
            parameters: {
              propertyOrder: ['args'],
              required: ['args'],
              properties: { args: { type: '[ref: number]' } },
            },
            returns: { type: 'boolean' },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    ThreadParticipant: {
      name: 'ThreadParticipant',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          lastSeenTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
          },
          userID: {
            type: ['null', 'string'],
            description:
              "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
          },
          displayName: {
            type: ['null', 'string'],
            description:
              "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
          },
        },
        propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
        required: ['lastSeenTimestamp', 'userID', 'displayName'],
      },
    },
    CoreThreadData: {
      name: 'CoreThreadData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: { type: 'string', description: 'The ID for this thread.' },
          groupID: {
            type: 'string',
            description: 'The group ID this thread is in.',
          },
          total: {
            type: 'number',
            description:
              'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
          },
          userMessages: {
            type: 'number',
            description:
              'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
          },
          actionMessages: {
            type: 'number',
            description:
              'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
          },
          deletedMessages: {
            type: 'number',
            description: 'The number of deleted messages in this thread.',
          },
          resolved: {
            type: 'boolean',
            description:
              'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
          },
          resolvedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
          },
          participants: {
            type: 'ThreadParticipant[]',
            items: {
              type: 'ThreadParticipant',
              properties: {
                lastSeenTimestamp: {
                  description:
                    'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                userID: {
                  description:
                    "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                  type: ['null', 'string'],
                },
                displayName: {
                  description:
                    "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                  type: ['null', 'string'],
                },
              },
              propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
              required: ['lastSeenTimestamp', 'userID', 'displayName'],
            },
            description:
              'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
          },
          subscribers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'All of the users who are subscribed to this thread.',
          },
          repliers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'All of the users who have replied to this thread.',
          },
          mentioned: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'All of the users who were mentioned in a message in this thread.',
          },
          actionMessageRepliers: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
          },
          typing: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
          },
          name: {
            type: 'string',
            description:
              'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
          },
          url: {
            type: 'string',
            description:
              "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
          },
          location: {
            type: 'Location',
            description: 'The [location](/reference/location) of this thread.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'An optional space separated list of classnames to add to the thread.',
          },
        },
        propertyOrder: [
          'id',
          'groupID',
          'total',
          'userMessages',
          'actionMessages',
          'deletedMessages',
          'resolved',
          'resolvedTimestamp',
          'participants',
          'subscribers',
          'repliers',
          'mentioned',
          'actionMessageRepliers',
          'typing',
          'name',
          'url',
          'location',
          'metadata',
          'extraClassnames',
        ],
        required: [
          'id',
          'groupID',
          'total',
          'userMessages',
          'actionMessages',
          'deletedMessages',
          'resolved',
          'resolvedTimestamp',
          'participants',
          'subscribers',
          'repliers',
          'mentioned',
          'actionMessageRepliers',
          'typing',
          'name',
          'url',
          'location',
          'metadata',
          'extraClassnames',
        ],
      },
    },
    ServerListThreads: {
      name: 'ServerListThreads',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          threads: {
            type: 'CoreThreadData[]',
            items: {
              type: 'CoreThreadData',
              properties: {
                id: { description: 'The ID for this thread.', type: 'string' },
                groupID: {
                  description: 'The group ID this thread is in.',
                  type: 'string',
                },
                total: {
                  description:
                    'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                userMessages: {
                  description:
                    'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                  type: 'number',
                },
                actionMessages: {
                  description:
                    'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                deletedMessages: {
                  description: 'The number of deleted messages in this thread.',
                  type: 'number',
                },
                resolved: {
                  description:
                    'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                  type: 'boolean',
                },
                resolvedTimestamp: {
                  description:
                    'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                participants: {
                  description:
                    'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                  type: 'ThreadParticipant[]',
                  items: {
                    type: 'ThreadParticipant',
                    properties: {
                      lastSeenTimestamp: {
                        description:
                          'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      userID: {
                        description:
                          "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                      displayName: {
                        description:
                          "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'lastSeenTimestamp',
                      'userID',
                      'displayName',
                    ],
                    required: ['lastSeenTimestamp', 'userID', 'displayName'],
                  },
                },
                subscribers: {
                  description:
                    'All of the users who are subscribed to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                repliers: {
                  description:
                    'All of the users who have replied to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                mentioned: {
                  description:
                    'All of the users who were mentioned in a message in this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                actionMessageRepliers: {
                  description:
                    "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                  type: 'string[]',
                  items: { type: 'string' },
                },
                typing: {
                  description:
                    'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
              },
              propertyOrder: [
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
              required: [
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
            },
            description: 'Page containing threads.',
          },
          pagination: {
            type: 'PaginationDetails',
            properties: {
              token: {
                description:
                  'The token to use to get the next page of results. If empty, there are no more results.',
                type: ['null', 'string'],
              },
              total: {
                description:
                  'Total number of results. Might be bigger than the number of results returned on the query. Useful to display a "total" counter.',
                type: 'number',
              },
            },
            propertyOrder: ['token', 'total'],
            required: ['token', 'total'],
            description: 'Data related to cursor-based pagination.',
          },
        },
        propertyOrder: ['threads', 'pagination'],
        required: ['threads', 'pagination'],
      },
    },
    ThreadSummary: {
      name: 'ThreadSummary',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          unread: {
            type: 'number',
            description:
              "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
          },
          viewerIsThreadParticipant: {
            type: 'boolean',
            description:
              'Whether the current viewer has either left a message or reacted to this thread.',
          },
          firstMessage: {
            anyOf: [
              { type: 'null' },
              {
                type: 'ClientMessageData',
                properties: {
                  seen: {
                    description:
                      'Whether the message has been seen by the current viewer.',
                    type: 'boolean',
                  },
                  id: {
                    description:
                      'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                    type: 'string',
                  },
                  authorID: {
                    description: 'The ID for the user that sent the message.',
                    type: 'string',
                  },
                  groupID: {
                    description:
                      'The ID for the group this message belongs to.',
                    type: 'string',
                  },
                  threadID: {
                    description:
                      'The ID for the thread this message is part of.',
                    type: 'string',
                  },
                  content: {
                    description: 'The content of the message.',
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: {
                    description:
                      'A plaintext version of the structured message content.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                    type: ['null', 'string'],
                  },
                  createdTimestamp: {
                    description:
                      'The timestamp when this message was created.  The default value is the current time.',
                    type: 'Date',
                  },
                  deletedTimestamp: {
                    description:
                      'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  updatedTimestamp: {
                    description:
                      'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  iconURL: {
                    description:
                      'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                    type: ['null', 'string'],
                  },
                  translationKey: {
                    description:
                      'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                    type: ['null', 'string'],
                  },
                  type: {
                    description:
                      'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'A optional space separated list of classnames to add to the message.',
                    type: ['null', 'string'],
                  },
                  attachments: {
                    description: 'The items attached to this message.',
                    type: 'MessageAttachment[]',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageFileAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `file` for file attachments.',
                              type: '"file"',
                            },
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                        {
                          type: 'MessageAnnotationAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `annotation` for annotation attachments.',
                              type: '"annotation"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the annotation, if any.',
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              ],
                            },
                            locationData: {
                              description:
                                'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                              type: ['null', 'string'],
                            },
                            customData: {
                              description:
                                "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'CustomAnnotationData',
                                  properties: {
                                    location: {
                                      description:
                                        'The custom location you produced for this annotation at annotation capture time.',
                                      type: 'Location',
                                    },
                                    coordsRelativeToTarget: {
                                      description:
                                        'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                      type: 'object',
                                      properties: {
                                        x: { type: 'number' },
                                        y: { type: 'number' },
                                      },
                                      propertyOrder: ['x', 'y'],
                                      required: ['x', 'y'],
                                    },
                                    label: {
                                      description:
                                        'Your custom user-visible label for the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                  required: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                },
                              ],
                            },
                            textContent: {
                              description:
                                'The text that was selected when creating the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                          required: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                        },
                        {
                          type: 'MessageScreenshotAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                              type: '"screenshot"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'screenshot'],
                          required: ['type', 'screenshot'],
                        },
                        {
                          type: 'MessageLinkPreviewAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `link_preview` for file link previews.',
                              type: '"link_preview"',
                            },
                            id: {
                              description:
                                'The ID of the link preview attachment.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The url from which the preview was generated.',
                              type: 'string',
                            },
                            imageURL: {
                              description:
                                'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                              type: ['null', 'string'],
                            },
                            title: {
                              description:
                                "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                              type: ['null', 'string'],
                            },
                            description: {
                              description:
                                'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                          required: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                        },
                      ],
                    },
                  },
                  reactions: {
                    description: 'The reactions to this message.',
                    type: 'Reaction[]',
                    items: {
                      type: 'Reaction',
                      properties: {
                        reaction: {
                          description: 'The emoji reaction.',
                          type: 'string',
                        },
                        userID: {
                          description:
                            'The ID of the user who reacted to the message.',
                          type: 'string',
                        },
                        timestamp: {
                          description:
                            'The timestamp of when the reaction was created.',
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['reaction', 'userID', 'timestamp'],
                      required: ['reaction', 'userID', 'timestamp'],
                    },
                  },
                  seenBy: {
                    description:
                      'A list of IDs of the users that have seen the message.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  skipLinkPreviews: {
                    description:
                      "If set, Cord won't analyze links in the message to generate previews.",
                    type: 'boolean',
                  },
                },
                propertyOrder: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
                required: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
              },
            ],
            description:
              'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
          },
          lastMessage: {
            anyOf: [
              { type: 'null' },
              {
                type: 'ClientMessageData',
                properties: {
                  seen: {
                    description:
                      'Whether the message has been seen by the current viewer.',
                    type: 'boolean',
                  },
                  id: {
                    description:
                      'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                    type: 'string',
                  },
                  authorID: {
                    description: 'The ID for the user that sent the message.',
                    type: 'string',
                  },
                  groupID: {
                    description:
                      'The ID for the group this message belongs to.',
                    type: 'string',
                  },
                  threadID: {
                    description:
                      'The ID for the thread this message is part of.',
                    type: 'string',
                  },
                  content: {
                    description: 'The content of the message.',
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: {
                    description:
                      'A plaintext version of the structured message content.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                    type: ['null', 'string'],
                  },
                  createdTimestamp: {
                    description:
                      'The timestamp when this message was created.  The default value is the current time.',
                    type: 'Date',
                  },
                  deletedTimestamp: {
                    description:
                      'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  updatedTimestamp: {
                    description:
                      'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  iconURL: {
                    description:
                      'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                    type: ['null', 'string'],
                  },
                  translationKey: {
                    description:
                      'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                    type: ['null', 'string'],
                  },
                  type: {
                    description:
                      'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'A optional space separated list of classnames to add to the message.',
                    type: ['null', 'string'],
                  },
                  attachments: {
                    description: 'The items attached to this message.',
                    type: 'MessageAttachment[]',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageFileAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `file` for file attachments.',
                              type: '"file"',
                            },
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                        {
                          type: 'MessageAnnotationAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `annotation` for annotation attachments.',
                              type: '"annotation"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the annotation, if any.',
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              ],
                            },
                            locationData: {
                              description:
                                'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                              type: ['null', 'string'],
                            },
                            customData: {
                              description:
                                "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'CustomAnnotationData',
                                  properties: {
                                    location: {
                                      description:
                                        'The custom location you produced for this annotation at annotation capture time.',
                                      type: 'Location',
                                    },
                                    coordsRelativeToTarget: {
                                      description:
                                        'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                      type: 'object',
                                      properties: {
                                        x: { type: 'number' },
                                        y: { type: 'number' },
                                      },
                                      propertyOrder: ['x', 'y'],
                                      required: ['x', 'y'],
                                    },
                                    label: {
                                      description:
                                        'Your custom user-visible label for the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                  required: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                },
                              ],
                            },
                            textContent: {
                              description:
                                'The text that was selected when creating the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                          required: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                        },
                        {
                          type: 'MessageScreenshotAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                              type: '"screenshot"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'screenshot'],
                          required: ['type', 'screenshot'],
                        },
                        {
                          type: 'MessageLinkPreviewAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `link_preview` for file link previews.',
                              type: '"link_preview"',
                            },
                            id: {
                              description:
                                'The ID of the link preview attachment.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The url from which the preview was generated.',
                              type: 'string',
                            },
                            imageURL: {
                              description:
                                'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                              type: ['null', 'string'],
                            },
                            title: {
                              description:
                                "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                              type: ['null', 'string'],
                            },
                            description: {
                              description:
                                'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                          required: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                        },
                      ],
                    },
                  },
                  reactions: {
                    description: 'The reactions to this message.',
                    type: 'Reaction[]',
                    items: {
                      type: 'Reaction',
                      properties: {
                        reaction: {
                          description: 'The emoji reaction.',
                          type: 'string',
                        },
                        userID: {
                          description:
                            'The ID of the user who reacted to the message.',
                          type: 'string',
                        },
                        timestamp: {
                          description:
                            'The timestamp of when the reaction was created.',
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['reaction', 'userID', 'timestamp'],
                      required: ['reaction', 'userID', 'timestamp'],
                    },
                  },
                  seenBy: {
                    description:
                      'A list of IDs of the users that have seen the message.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  skipLinkPreviews: {
                    description:
                      "If set, Cord won't analyze links in the message to generate previews.",
                    type: 'boolean',
                  },
                },
                propertyOrder: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
                required: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
              },
            ],
            description:
              'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
          },
          id: { type: 'string', description: 'The ID for this thread.' },
          groupID: {
            type: 'string',
            description: 'The group ID this thread is in.',
          },
          total: {
            type: 'number',
            description:
              'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
          },
          userMessages: {
            type: 'number',
            description:
              'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
          },
          actionMessages: {
            type: 'number',
            description:
              'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
          },
          deletedMessages: {
            type: 'number',
            description: 'The number of deleted messages in this thread.',
          },
          resolved: {
            type: 'boolean',
            description:
              'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
          },
          resolvedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
          },
          participants: {
            type: 'ThreadParticipant[]',
            items: {
              type: 'ThreadParticipant',
              properties: {
                lastSeenTimestamp: {
                  description:
                    'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                userID: {
                  description:
                    "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                  type: ['null', 'string'],
                },
                displayName: {
                  description:
                    "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                  type: ['null', 'string'],
                },
              },
              propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
              required: ['lastSeenTimestamp', 'userID', 'displayName'],
            },
            description:
              'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
          },
          subscribers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'All of the users who are subscribed to this thread.',
          },
          repliers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'All of the users who have replied to this thread.',
          },
          mentioned: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'All of the users who were mentioned in a message in this thread.',
          },
          actionMessageRepliers: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
          },
          typing: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
          },
          name: {
            type: 'string',
            description:
              'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
          },
          url: {
            type: 'string',
            description:
              "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
          },
          location: {
            type: 'Location',
            description: 'The [location](/reference/location) of this thread.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'An optional space separated list of classnames to add to the thread.',
          },
        },
        propertyOrder: [
          'unread',
          'viewerIsThreadParticipant',
          'firstMessage',
          'lastMessage',
          'id',
          'groupID',
          'total',
          'userMessages',
          'actionMessages',
          'deletedMessages',
          'resolved',
          'resolvedTimestamp',
          'participants',
          'subscribers',
          'repliers',
          'mentioned',
          'actionMessageRepliers',
          'typing',
          'name',
          'url',
          'location',
          'metadata',
          'extraClassnames',
        ],
        required: [
          'unread',
          'viewerIsThreadParticipant',
          'firstMessage',
          'lastMessage',
          'id',
          'groupID',
          'total',
          'userMessages',
          'actionMessages',
          'deletedMessages',
          'resolved',
          'resolvedTimestamp',
          'participants',
          'subscribers',
          'repliers',
          'mentioned',
          'actionMessageRepliers',
          'typing',
          'name',
          'url',
          'location',
          'metadata',
          'extraClassnames',
        ],
      },
    },
    ThreadObserverOptions: {
      name: 'ThreadObserverOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'ClientThreadFilter',
            properties: {
              location: {
                description:
                  'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              resolvedStatus: {
                description:
                  'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                type: 'string',
                enum: ['any', 'resolved', 'unresolved'],
              },
              metadata: {
                description:
                  'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              groupID: {
                description:
                  'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                type: 'string',
              },
              viewer: {
                description:
                  'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                anyOf: [
                  { type: '"subscribed"' },
                  { type: '"mentioned"' },
                  {
                    type: 'ViewerThreadStatus[]',
                    items: {
                      type: 'string',
                      enum: ['subscribed', 'mentioned'],
                    },
                  },
                ],
              },
            },
            propertyOrder: [
              'location',
              'resolvedStatus',
              'metadata',
              'groupID',
              'viewer',
            ],
            required: [],
            description:
              "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
          },
          initialFetchCount: {
            type: 'number',
            description:
              'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
          },
        },
        propertyOrder: ['filter', 'initialFetchCount'],
        required: [],
      },
    },
    ObserveThreadSummaryOptions: {
      name: 'ObserveThreadSummaryOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'ClientThreadFilter',
            properties: {
              location: {
                description:
                  'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              resolvedStatus: {
                description:
                  'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                type: 'string',
                enum: ['any', 'resolved', 'unresolved'],
              },
              metadata: {
                description:
                  'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              groupID: {
                description:
                  'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                type: 'string',
              },
              viewer: {
                description:
                  'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                anyOf: [
                  { type: '"subscribed"' },
                  { type: '"mentioned"' },
                  {
                    type: 'ViewerThreadStatus[]',
                    items: {
                      type: 'string',
                      enum: ['subscribed', 'mentioned'],
                    },
                  },
                ],
              },
            },
            propertyOrder: [
              'location',
              'resolvedStatus',
              'metadata',
              'groupID',
              'viewer',
            ],
            required: [],
            description:
              "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
          },
          initialFetchCount: {
            type: 'number',
            description:
              'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
          },
        },
        propertyOrder: ['filter', 'initialFetchCount'],
        required: [],
      },
    },
    ObserveThreadDataOptions: {
      name: 'ObserveThreadDataOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'ClientThreadFilter',
            properties: {
              location: {
                description:
                  'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              resolvedStatus: {
                description:
                  'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                type: 'string',
                enum: ['any', 'resolved', 'unresolved'],
              },
              metadata: {
                description:
                  'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              groupID: {
                description:
                  'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                type: 'string',
              },
              viewer: {
                description:
                  'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                anyOf: [
                  { type: '"subscribed"' },
                  { type: '"mentioned"' },
                  {
                    type: 'ViewerThreadStatus[]',
                    items: {
                      type: 'string',
                      enum: ['subscribed', 'mentioned'],
                    },
                  },
                ],
              },
            },
            propertyOrder: [
              'location',
              'resolvedStatus',
              'metadata',
              'groupID',
              'viewer',
            ],
            required: [],
            description:
              "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
          },
          initialFetchCount: {
            type: 'number',
            description:
              'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
          },
        },
        propertyOrder: ['filter', 'initialFetchCount'],
        required: [],
      },
    },
    ThreadListFilter: {
      name: 'ThreadListFilter',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          metadata: {
            type: 'EntityMetadata',
            description:
              'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
          },
          location: {
            type: 'Location',
            description: 'The [Location](/reference/location) of the threads.',
          },
          groupID: {
            type: 'string',
            description:
              'Filter to threads belonging to a specified [group](/rest-apis/groups).',
          },
          resolvedStatus: {
            type: 'string',
            enum: ['any', 'resolved', 'unresolved'],
            description:
              'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `unresolved`.',
          },
          viewer: {
            anyOf: [
              { type: '"subscribed"' },
              { type: '"mentioned"' },
              {
                type: 'ViewerThreadStatus[]',
                items: { type: 'string', enum: ['subscribed', 'mentioned'] },
              },
            ],
            description:
              'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
          },
        },
        propertyOrder: [
          'metadata',
          'location',
          'groupID',
          'resolvedStatus',
          'viewer',
        ],
        required: [],
      },
    },
    ClientThreadFilter: {
      name: 'ClientThreadFilter',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          location: {
            anyOf: [
              { type: 'Location' },
              {
                type: 'LocationFilterOptions',
                properties: {
                  value: {
                    description:
                      'The [Location](/reference/location) of the threads.',
                    type: 'Location',
                  },
                  partialMatch: {
                    description:
                      'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                    type: 'boolean',
                  },
                },
                propertyOrder: ['value', 'partialMatch'],
                required: ['value', 'partialMatch'],
              },
            ],
            description:
              'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
          },
          resolvedStatus: {
            type: 'string',
            enum: ['any', 'resolved', 'unresolved'],
            description:
              'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
          },
          groupID: {
            type: 'string',
            description:
              'Filter to threads belonging to a specified [group](/rest-apis/groups).',
          },
          viewer: {
            anyOf: [
              { type: '"subscribed"' },
              { type: '"mentioned"' },
              {
                type: 'ViewerThreadStatus[]',
                items: { type: 'string', enum: ['subscribed', 'mentioned'] },
              },
            ],
            description:
              'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
          },
        },
        propertyOrder: [
          'location',
          'resolvedStatus',
          'metadata',
          'groupID',
          'viewer',
        ],
        required: [],
      },
    },
    ThreadSortOptions: {
      name: 'ThreadSortOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          sortBy: {
            type: 'string',
            enum: ['first_message_timestamp', 'most_recent_message_timestamp'],
            description:
              'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
          },
          sortDirection: {
            type: 'string',
            enum: ['ascending', 'descending'],
            description:
              'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
          },
        },
        propertyOrder: ['sortBy', 'sortDirection'],
        required: [],
      },
    },
    ObserveLocationDataOptions: {
      name: 'ObserveLocationDataOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          sortBy: {
            type: 'string',
            enum: ['first_message_timestamp', 'most_recent_message_timestamp'],
            description:
              'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
          },
          sortDirection: {
            type: 'string',
            enum: ['ascending', 'descending'],
            description:
              'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
          },
          partialMatch: {
            type: 'boolean',
            description:
              'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.  \n\nIf unset, defaults to `false`.',
          },
          filter: {
            type: 'ThreadListFilter',
            properties: {
              metadata: {
                description:
                  'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              location: {
                description:
                  'The [Location](/reference/location) of the threads.',
                type: 'Location',
              },
              groupID: {
                description:
                  'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                type: 'string',
              },
              resolvedStatus: {
                description:
                  'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `unresolved`.',
                type: 'string',
                enum: ['any', 'resolved', 'unresolved'],
              },
              viewer: {
                description:
                  'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                anyOf: [
                  { type: '"subscribed"' },
                  { type: '"mentioned"' },
                  {
                    type: 'ViewerThreadStatus[]',
                    items: {
                      type: 'string',
                      enum: ['subscribed', 'mentioned'],
                    },
                  },
                ],
              },
            },
            propertyOrder: [
              'metadata',
              'location',
              'groupID',
              'resolvedStatus',
              'viewer',
            ],
            required: [],
            description:
              'An object that can be used to filter the threads returned.',
          },
        },
        propertyOrder: ['sortBy', 'sortDirection', 'partialMatch', 'filter'],
        required: [],
      },
    },
    ObserveThreadsOptions: {
      name: 'ObserveThreadsOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          sortBy: {
            type: 'string',
            enum: ['first_message_timestamp', 'most_recent_message_timestamp'],
            description:
              'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
          },
          sortDirection: {
            type: 'string',
            enum: ['ascending', 'descending'],
            description:
              'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
          },
          filter: {
            type: 'ClientThreadFilter',
            properties: {
              location: {
                description:
                  'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              resolvedStatus: {
                description:
                  'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                type: 'string',
                enum: ['any', 'resolved', 'unresolved'],
              },
              metadata: {
                description:
                  'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                type: 'EntityMetadata',
              },
              groupID: {
                description:
                  'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                type: 'string',
              },
              viewer: {
                description:
                  'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                anyOf: [
                  { type: '"subscribed"' },
                  { type: '"mentioned"' },
                  {
                    type: 'ViewerThreadStatus[]',
                    items: {
                      type: 'string',
                      enum: ['subscribed', 'mentioned'],
                    },
                  },
                ],
              },
            },
            propertyOrder: [
              'location',
              'resolvedStatus',
              'metadata',
              'groupID',
              'viewer',
            ],
            required: [],
            description:
              'An object that can be used to filter the threads returned.',
          },
          initialFetchCount: {
            type: 'number',
            description:
              'The number of threads to initially fetch. Once these are returned you can use the `fetchMore` property to get additional threads.  \n\nThe default for this is 10, and has a limit of 1000.',
          },
        },
        propertyOrder: [
          'sortBy',
          'sortDirection',
          'filter',
          'initialFetchCount',
        ],
        required: [],
      },
    },
    LocationData: {
      name: 'LocationData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
          threads: {
            type: 'ThreadSummary[]',
            items: {
              type: 'ThreadSummary',
              properties: {
                unread: {
                  description:
                    "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                  type: 'number',
                },
                viewerIsThreadParticipant: {
                  description:
                    'Whether the current viewer has either left a message or reacted to this thread.',
                  type: 'boolean',
                },
                firstMessage: {
                  description:
                    'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'ClientMessageData',
                      properties: {
                        seen: {
                          description:
                            'Whether the message has been seen by the current viewer.',
                          type: 'boolean',
                        },
                        id: {
                          description:
                            'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                          type: 'string',
                        },
                        authorID: {
                          description:
                            'The ID for the user that sent the message.',
                          type: 'string',
                        },
                        groupID: {
                          description:
                            'The ID for the group this message belongs to.',
                          type: 'string',
                        },
                        threadID: {
                          description:
                            'The ID for the thread this message is part of.',
                          type: 'string',
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        plaintext: {
                          description:
                            'A plaintext version of the structured message content.',
                          type: 'string',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        createdTimestamp: {
                          description:
                            'The timestamp when this message was created.  The default value is the current time.',
                          type: 'Date',
                        },
                        deletedTimestamp: {
                          description:
                            'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        updatedTimestamp: {
                          description:
                            'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        type: {
                          description:
                            'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                          type: 'string',
                          enum: ['action_message', 'user_message'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        attachments: {
                          description: 'The items attached to this message.',
                          type: 'MessageAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                              {
                                type: 'MessageAnnotationAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `annotation` for annotation attachments.',
                                    type: '"annotation"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the annotation, if any.',
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    ],
                                  },
                                  locationData: {
                                    description:
                                      'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                    type: ['null', 'string'],
                                  },
                                  customData: {
                                    description:
                                      "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'CustomAnnotationData',
                                        properties: {
                                          location: {
                                            description:
                                              'The custom location you produced for this annotation at annotation capture time.',
                                            type: 'Location',
                                          },
                                          coordsRelativeToTarget: {
                                            description:
                                              'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                            type: 'object',
                                            properties: {
                                              x: { type: 'number' },
                                              y: { type: 'number' },
                                            },
                                            propertyOrder: ['x', 'y'],
                                            required: ['x', 'y'],
                                          },
                                          label: {
                                            description:
                                              'Your custom user-visible label for the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                        required: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                      },
                                    ],
                                  },
                                  textContent: {
                                    description:
                                      'The text that was selected when creating the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                                required: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                              },
                              {
                                type: 'MessageScreenshotAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                    type: '"screenshot"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                },
                                propertyOrder: ['type', 'screenshot'],
                                required: ['type', 'screenshot'],
                              },
                              {
                                type: 'MessageLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `link_preview` for file link previews.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The url from which the preview was generated.',
                                    type: 'string',
                                  },
                                  imageURL: {
                                    description:
                                      'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                    type: ['null', 'string'],
                                  },
                                  title: {
                                    description:
                                      "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                    type: ['null', 'string'],
                                  },
                                  description: {
                                    description:
                                      'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                              },
                            ],
                          },
                        },
                        reactions: {
                          description: 'The reactions to this message.',
                          type: 'Reaction[]',
                          items: {
                            type: 'Reaction',
                            properties: {
                              reaction: {
                                description: 'The emoji reaction.',
                                type: 'string',
                              },
                              userID: {
                                description:
                                  'The ID of the user who reacted to the message.',
                                type: 'string',
                              },
                              timestamp: {
                                description:
                                  'The timestamp of when the reaction was created.',
                                type: 'Date',
                              },
                            },
                            propertyOrder: ['reaction', 'userID', 'timestamp'],
                            required: ['reaction', 'userID', 'timestamp'],
                          },
                        },
                        seenBy: {
                          description:
                            'A list of IDs of the users that have seen the message.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                      },
                      propertyOrder: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                      required: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                    },
                  ],
                },
                lastMessage: {
                  description:
                    'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'ClientMessageData',
                      properties: {
                        seen: {
                          description:
                            'Whether the message has been seen by the current viewer.',
                          type: 'boolean',
                        },
                        id: {
                          description:
                            'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                          type: 'string',
                        },
                        authorID: {
                          description:
                            'The ID for the user that sent the message.',
                          type: 'string',
                        },
                        groupID: {
                          description:
                            'The ID for the group this message belongs to.',
                          type: 'string',
                        },
                        threadID: {
                          description:
                            'The ID for the thread this message is part of.',
                          type: 'string',
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        plaintext: {
                          description:
                            'A plaintext version of the structured message content.',
                          type: 'string',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        createdTimestamp: {
                          description:
                            'The timestamp when this message was created.  The default value is the current time.',
                          type: 'Date',
                        },
                        deletedTimestamp: {
                          description:
                            'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        updatedTimestamp: {
                          description:
                            'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        type: {
                          description:
                            'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                          type: 'string',
                          enum: ['action_message', 'user_message'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        attachments: {
                          description: 'The items attached to this message.',
                          type: 'MessageAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                              {
                                type: 'MessageAnnotationAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `annotation` for annotation attachments.',
                                    type: '"annotation"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the annotation, if any.',
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    ],
                                  },
                                  locationData: {
                                    description:
                                      'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                    type: ['null', 'string'],
                                  },
                                  customData: {
                                    description:
                                      "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'CustomAnnotationData',
                                        properties: {
                                          location: {
                                            description:
                                              'The custom location you produced for this annotation at annotation capture time.',
                                            type: 'Location',
                                          },
                                          coordsRelativeToTarget: {
                                            description:
                                              'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                            type: 'object',
                                            properties: {
                                              x: { type: 'number' },
                                              y: { type: 'number' },
                                            },
                                            propertyOrder: ['x', 'y'],
                                            required: ['x', 'y'],
                                          },
                                          label: {
                                            description:
                                              'Your custom user-visible label for the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                        required: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                      },
                                    ],
                                  },
                                  textContent: {
                                    description:
                                      'The text that was selected when creating the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                                required: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                              },
                              {
                                type: 'MessageScreenshotAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                    type: '"screenshot"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                },
                                propertyOrder: ['type', 'screenshot'],
                                required: ['type', 'screenshot'],
                              },
                              {
                                type: 'MessageLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `link_preview` for file link previews.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The url from which the preview was generated.',
                                    type: 'string',
                                  },
                                  imageURL: {
                                    description:
                                      'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                    type: ['null', 'string'],
                                  },
                                  title: {
                                    description:
                                      "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                    type: ['null', 'string'],
                                  },
                                  description: {
                                    description:
                                      'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                              },
                            ],
                          },
                        },
                        reactions: {
                          description: 'The reactions to this message.',
                          type: 'Reaction[]',
                          items: {
                            type: 'Reaction',
                            properties: {
                              reaction: {
                                description: 'The emoji reaction.',
                                type: 'string',
                              },
                              userID: {
                                description:
                                  'The ID of the user who reacted to the message.',
                                type: 'string',
                              },
                              timestamp: {
                                description:
                                  'The timestamp of when the reaction was created.',
                                type: 'Date',
                              },
                            },
                            propertyOrder: ['reaction', 'userID', 'timestamp'],
                            required: ['reaction', 'userID', 'timestamp'],
                          },
                        },
                        seenBy: {
                          description:
                            'A list of IDs of the users that have seen the message.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                      },
                      propertyOrder: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                      required: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                    },
                  ],
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                groupID: {
                  description: 'The group ID this thread is in.',
                  type: 'string',
                },
                total: {
                  description:
                    'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                userMessages: {
                  description:
                    'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                  type: 'number',
                },
                actionMessages: {
                  description:
                    'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                deletedMessages: {
                  description: 'The number of deleted messages in this thread.',
                  type: 'number',
                },
                resolved: {
                  description:
                    'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                  type: 'boolean',
                },
                resolvedTimestamp: {
                  description:
                    'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                participants: {
                  description:
                    'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                  type: 'ThreadParticipant[]',
                  items: {
                    type: 'ThreadParticipant',
                    properties: {
                      lastSeenTimestamp: {
                        description:
                          'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      userID: {
                        description:
                          "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                      displayName: {
                        description:
                          "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'lastSeenTimestamp',
                      'userID',
                      'displayName',
                    ],
                    required: ['lastSeenTimestamp', 'userID', 'displayName'],
                  },
                },
                subscribers: {
                  description:
                    'All of the users who are subscribed to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                repliers: {
                  description:
                    'All of the users who have replied to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                mentioned: {
                  description:
                    'All of the users who were mentioned in a message in this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                actionMessageRepliers: {
                  description:
                    "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                  type: 'string[]',
                  items: { type: 'string' },
                },
                typing: {
                  description:
                    'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
              },
              propertyOrder: [
                'unread',
                'viewerIsThreadParticipant',
                'firstMessage',
                'lastMessage',
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
              required: [
                'unread',
                'viewerIsThreadParticipant',
                'firstMessage',
                'lastMessage',
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
            },
            description:
              'An array of [thread summary](/js-apis-and-hooks/thread-api/observeThreadSummary#Available-Data) objects. There will be one of each thread at the specified [location](/reference/location).  \n\nThis array is paginated. At first, it will contain summaries of only the first few threads. Calling `fetchMore` will cause further thread summaries to be appended to the array.  \n\nThe order in which you will receive the threads is determined by the sorting options.',
          },
        },
        propertyOrder: ['loading', 'fetchMore', 'hasMore', 'threads'],
        required: ['loading', 'fetchMore', 'hasMore', 'threads'],
      },
    },
    ThreadsData: {
      name: 'ThreadsData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
          threads: {
            type: 'ThreadSummary[]',
            items: {
              type: 'ThreadSummary',
              properties: {
                unread: {
                  description:
                    "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                  type: 'number',
                },
                viewerIsThreadParticipant: {
                  description:
                    'Whether the current viewer has either left a message or reacted to this thread.',
                  type: 'boolean',
                },
                firstMessage: {
                  description:
                    'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'ClientMessageData',
                      properties: {
                        seen: {
                          description:
                            'Whether the message has been seen by the current viewer.',
                          type: 'boolean',
                        },
                        id: {
                          description:
                            'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                          type: 'string',
                        },
                        authorID: {
                          description:
                            'The ID for the user that sent the message.',
                          type: 'string',
                        },
                        groupID: {
                          description:
                            'The ID for the group this message belongs to.',
                          type: 'string',
                        },
                        threadID: {
                          description:
                            'The ID for the thread this message is part of.',
                          type: 'string',
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        plaintext: {
                          description:
                            'A plaintext version of the structured message content.',
                          type: 'string',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        createdTimestamp: {
                          description:
                            'The timestamp when this message was created.  The default value is the current time.',
                          type: 'Date',
                        },
                        deletedTimestamp: {
                          description:
                            'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        updatedTimestamp: {
                          description:
                            'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        type: {
                          description:
                            'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                          type: 'string',
                          enum: ['action_message', 'user_message'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        attachments: {
                          description: 'The items attached to this message.',
                          type: 'MessageAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                              {
                                type: 'MessageAnnotationAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `annotation` for annotation attachments.',
                                    type: '"annotation"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the annotation, if any.',
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    ],
                                  },
                                  locationData: {
                                    description:
                                      'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                    type: ['null', 'string'],
                                  },
                                  customData: {
                                    description:
                                      "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'CustomAnnotationData',
                                        properties: {
                                          location: {
                                            description:
                                              'The custom location you produced for this annotation at annotation capture time.',
                                            type: 'Location',
                                          },
                                          coordsRelativeToTarget: {
                                            description:
                                              'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                            type: 'object',
                                            properties: {
                                              x: { type: 'number' },
                                              y: { type: 'number' },
                                            },
                                            propertyOrder: ['x', 'y'],
                                            required: ['x', 'y'],
                                          },
                                          label: {
                                            description:
                                              'Your custom user-visible label for the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                        required: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                      },
                                    ],
                                  },
                                  textContent: {
                                    description:
                                      'The text that was selected when creating the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                                required: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                              },
                              {
                                type: 'MessageScreenshotAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                    type: '"screenshot"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                },
                                propertyOrder: ['type', 'screenshot'],
                                required: ['type', 'screenshot'],
                              },
                              {
                                type: 'MessageLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `link_preview` for file link previews.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The url from which the preview was generated.',
                                    type: 'string',
                                  },
                                  imageURL: {
                                    description:
                                      'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                    type: ['null', 'string'],
                                  },
                                  title: {
                                    description:
                                      "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                    type: ['null', 'string'],
                                  },
                                  description: {
                                    description:
                                      'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                              },
                            ],
                          },
                        },
                        reactions: {
                          description: 'The reactions to this message.',
                          type: 'Reaction[]',
                          items: {
                            type: 'Reaction',
                            properties: {
                              reaction: {
                                description: 'The emoji reaction.',
                                type: 'string',
                              },
                              userID: {
                                description:
                                  'The ID of the user who reacted to the message.',
                                type: 'string',
                              },
                              timestamp: {
                                description:
                                  'The timestamp of when the reaction was created.',
                                type: 'Date',
                              },
                            },
                            propertyOrder: ['reaction', 'userID', 'timestamp'],
                            required: ['reaction', 'userID', 'timestamp'],
                          },
                        },
                        seenBy: {
                          description:
                            'A list of IDs of the users that have seen the message.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                      },
                      propertyOrder: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                      required: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                    },
                  ],
                },
                lastMessage: {
                  description:
                    'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'ClientMessageData',
                      properties: {
                        seen: {
                          description:
                            'Whether the message has been seen by the current viewer.',
                          type: 'boolean',
                        },
                        id: {
                          description:
                            'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                          type: 'string',
                        },
                        authorID: {
                          description:
                            'The ID for the user that sent the message.',
                          type: 'string',
                        },
                        groupID: {
                          description:
                            'The ID for the group this message belongs to.',
                          type: 'string',
                        },
                        threadID: {
                          description:
                            'The ID for the thread this message is part of.',
                          type: 'string',
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        plaintext: {
                          description:
                            'A plaintext version of the structured message content.',
                          type: 'string',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        createdTimestamp: {
                          description:
                            'The timestamp when this message was created.  The default value is the current time.',
                          type: 'Date',
                        },
                        deletedTimestamp: {
                          description:
                            'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        updatedTimestamp: {
                          description:
                            'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        type: {
                          description:
                            'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                          type: 'string',
                          enum: ['action_message', 'user_message'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        attachments: {
                          description: 'The items attached to this message.',
                          type: 'MessageAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                              {
                                type: 'MessageAnnotationAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `annotation` for annotation attachments.',
                                    type: '"annotation"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the annotation, if any.',
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    ],
                                  },
                                  locationData: {
                                    description:
                                      'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                    type: ['null', 'string'],
                                  },
                                  customData: {
                                    description:
                                      "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'CustomAnnotationData',
                                        properties: {
                                          location: {
                                            description:
                                              'The custom location you produced for this annotation at annotation capture time.',
                                            type: 'Location',
                                          },
                                          coordsRelativeToTarget: {
                                            description:
                                              'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                            type: 'object',
                                            properties: {
                                              x: { type: 'number' },
                                              y: { type: 'number' },
                                            },
                                            propertyOrder: ['x', 'y'],
                                            required: ['x', 'y'],
                                          },
                                          label: {
                                            description:
                                              'Your custom user-visible label for the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                        required: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                      },
                                    ],
                                  },
                                  textContent: {
                                    description:
                                      'The text that was selected when creating the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                                required: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                              },
                              {
                                type: 'MessageScreenshotAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                    type: '"screenshot"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                },
                                propertyOrder: ['type', 'screenshot'],
                                required: ['type', 'screenshot'],
                              },
                              {
                                type: 'MessageLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `link_preview` for file link previews.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The url from which the preview was generated.',
                                    type: 'string',
                                  },
                                  imageURL: {
                                    description:
                                      'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                    type: ['null', 'string'],
                                  },
                                  title: {
                                    description:
                                      "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                    type: ['null', 'string'],
                                  },
                                  description: {
                                    description:
                                      'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                              },
                            ],
                          },
                        },
                        reactions: {
                          description: 'The reactions to this message.',
                          type: 'Reaction[]',
                          items: {
                            type: 'Reaction',
                            properties: {
                              reaction: {
                                description: 'The emoji reaction.',
                                type: 'string',
                              },
                              userID: {
                                description:
                                  'The ID of the user who reacted to the message.',
                                type: 'string',
                              },
                              timestamp: {
                                description:
                                  'The timestamp of when the reaction was created.',
                                type: 'Date',
                              },
                            },
                            propertyOrder: ['reaction', 'userID', 'timestamp'],
                            required: ['reaction', 'userID', 'timestamp'],
                          },
                        },
                        seenBy: {
                          description:
                            'A list of IDs of the users that have seen the message.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                      },
                      propertyOrder: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                      required: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                    },
                  ],
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                groupID: {
                  description: 'The group ID this thread is in.',
                  type: 'string',
                },
                total: {
                  description:
                    'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                userMessages: {
                  description:
                    'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                  type: 'number',
                },
                actionMessages: {
                  description:
                    'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                deletedMessages: {
                  description: 'The number of deleted messages in this thread.',
                  type: 'number',
                },
                resolved: {
                  description:
                    'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                  type: 'boolean',
                },
                resolvedTimestamp: {
                  description:
                    'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                participants: {
                  description:
                    'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                  type: 'ThreadParticipant[]',
                  items: {
                    type: 'ThreadParticipant',
                    properties: {
                      lastSeenTimestamp: {
                        description:
                          'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      userID: {
                        description:
                          "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                      displayName: {
                        description:
                          "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'lastSeenTimestamp',
                      'userID',
                      'displayName',
                    ],
                    required: ['lastSeenTimestamp', 'userID', 'displayName'],
                  },
                },
                subscribers: {
                  description:
                    'All of the users who are subscribed to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                repliers: {
                  description:
                    'All of the users who have replied to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                mentioned: {
                  description:
                    'All of the users who were mentioned in a message in this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                actionMessageRepliers: {
                  description:
                    "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                  type: 'string[]',
                  items: { type: 'string' },
                },
                typing: {
                  description:
                    'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
              },
              propertyOrder: [
                'unread',
                'viewerIsThreadParticipant',
                'firstMessage',
                'lastMessage',
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
              required: [
                'unread',
                'viewerIsThreadParticipant',
                'firstMessage',
                'lastMessage',
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
            },
            description:
              'An array of objects containing the threads that match the request.  \n\nThis array is paginated. At first, it will contain only the first few threads. Calling `fetchMore` will cause further threads to be appended to the array.  \n\nThe order in which you will receive the threads is determined by the sorting options.',
          },
          counts: {
            type: 'ThreadActivitySummary',
            properties: {
              total: {
                description:
                  'The total number of threads, both resolved and unresolved. This does not include threads in which all messages have been deleted.',
                type: 'number',
              },
              unread: {
                description:
                  'The total number of threads that contain *at least one* unread message in the thread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                type: 'number',
              },
              unreadSubscribed: {
                description:
                  "The number of threads that have messages the current user hasn't seen yet and is subscribed to.  \n\nA user is automatically subscribed to threads relevant to them, for example because they have sent a message or have been @-mentioned in them. `unreadSubscribed` is always less than or equal to `unread`.",
                type: 'number',
              },
              new: {
                description:
                  'The total number of threads that the user has never seen before at all, i.e., *every* message in the thread is unread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                type: 'number',
              },
              resolved: {
                description:
                  "The number of resolved threads. This refers to threads that users have manually marked as resolved within Cord's UI components.",
                type: 'number',
              },
              empty: {
                description:
                  'The number of thread with no visible messages. This refers to threads in which all the messages have been deleted.',
                type: 'number',
              },
            },
            propertyOrder: [
              'total',
              'unread',
              'unreadSubscribed',
              'new',
              'resolved',
              'empty',
            ],
            required: [
              'total',
              'unread',
              'unreadSubscribed',
              'new',
              'resolved',
              'empty',
            ],
            description:
              'An object providing counts of threads. Refer to [observeThreadCount API](/js-apis-and-hooks/thread-api/observeThreadCounts#Available-Data) for more information about the properties returned.',
          },
        },
        propertyOrder: ['loading', 'fetchMore', 'hasMore', 'threads', 'counts'],
        required: ['loading', 'fetchMore', 'hasMore', 'threads'],
      },
    },
    ClientUpdateThread: {
      name: 'ClientUpdateThread',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          resolved: {
            type: 'boolean',
            description:
              'Whether the thread is resolved.  Setting this to `true` is equivalent to setting `resolvedTimestamp` to the current time, and setting this to `false` is equivalent to setting `resolvedTimestamp` to `null`.',
          },
          typing: {
            type: 'boolean',
            description:
              'Whether to mark the current user as typing in the thread. The typing indicator expires after 3 seconds, so to continually show the indicator it needs to be called on an interval.  Passing `false` is a no-op and the indicator will time out normally.',
          },
          name: {
            type: 'string',
            description:
              'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          url: {
            type: 'string',
            description:
              "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'An optional space separated list of classnames to add to the thread.',
          },
        },
        propertyOrder: [
          'resolved',
          'typing',
          'name',
          'metadata',
          'url',
          'extraClassnames',
        ],
        required: [],
      },
    },
    ClientCreateThread: {
      name: 'ClientCreateThread',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          addSubscribers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'A list of subscribers to add to this thread.',
          },
          name: {
            type: 'string',
            description:
              'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
          },
          url: {
            type: 'string',
            description:
              "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
          },
          location: {
            type: 'Location',
            description: 'The [location](/reference/location) of this thread.',
          },
          id: { type: 'string', description: 'The ID for this thread.' },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          groupID: {
            type: 'string',
            description: 'The group ID this thread is in.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'An optional space separated list of classnames to add to the thread.',
          },
        },
        propertyOrder: [
          'addSubscribers',
          'name',
          'url',
          'location',
          'id',
          'metadata',
          'groupID',
          'extraClassnames',
        ],
        required: ['name', 'url', 'location'],
      },
    },
    CreateFileAttachment: {
      name: 'CreateFileAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"file"',
            description:
              'The type of attachment.  This is `file` for file attachments.',
          },
          id: {
            type: 'string',
            description:
              'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
          },
        },
        propertyOrder: ['type', 'id'],
        required: ['type', 'id'],
      },
    },
    CreateAttachment: {
      name: 'CreateAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"file"',
            description:
              'The type of attachment.  This is `file` for file attachments.',
          },
          id: {
            type: 'string',
            description:
              'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
          },
        },
        propertyOrder: ['type', 'id'],
        required: ['type', 'id'],
      },
    },
    RemoveFileAttachment: {
      name: 'RemoveFileAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"file"',
            description:
              'The type of attachment to remove.  This is `file` for file attachments.',
          },
          id: {
            type: 'string',
            description: 'The ID of the file attachment to remove.',
          },
        },
        propertyOrder: ['type', 'id'],
        required: ['type', 'id'],
      },
    },
    RemoveLinkPreviewAttachment: {
      name: 'RemoveLinkPreviewAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: '"link_preview"',
            description:
              'The type of attachment to remove.  This is `link_preview` for link preview attachments.',
          },
          id: {
            type: 'string',
            description: 'The ID of the link preview attachment to remove.',
          },
        },
        propertyOrder: ['type', 'id'],
        required: ['type', 'id'],
      },
    },
    RemoveAttachment: {
      name: 'RemoveAttachment',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: 'string',
            enum: ['file', 'link_preview'],
            description:
              'The type of attachment to remove.  This is `link_preview` for link preview attachments.',
          },
          id: {
            type: 'string',
            description: 'The ID of the link preview attachment to remove.',
          },
        },
        propertyOrder: ['type', 'id'],
        required: ['type', 'id'],
      },
    },
    ClientCreateMessage: {
      name: 'ClientCreateMessage',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          createThread: {
            type: 'Omit<ClientCreateThread, "id">',
            properties: {
              name: {
                description:
                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                type: 'string',
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              url: {
                description:
                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                type: 'string',
              },
              groupID: {
                description: 'The group ID this thread is in.',
                type: 'string',
              },
              extraClassnames: {
                description:
                  'An optional space separated list of classnames to add to the thread.',
                type: ['null', 'string'],
              },
              location: {
                description:
                  'The [location](/reference/location) of this thread.',
                type: 'Location',
              },
              addSubscribers: {
                description: 'A list of subscribers to add to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
            },
            propertyOrder: [
              'name',
              'metadata',
              'url',
              'groupID',
              'extraClassnames',
              'location',
              'addSubscribers',
            ],
            required: ['name', 'url', 'location'],
            description:
              "The parameters for creating a thread if the supplied thread doesn't exist yet.  If the thread doesn't exist but `createThread` isn't provided, the call will generate an error.  This value is ignored if the thread already exists.",
          },
          subscribeToThread: {
            type: 'boolean',
            description:
              "Whether to subscribe the sender of the message to the thread, so that they get notified about replies.  If not specified, defaults to `true`.  If false, the user's subscription status will be left unchanged.",
          },
          addReactions: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list of unicode strings representing the reactions you want to add to this message. Trying to create a reaction that already exists for a user does nothing.',
          },
          addAttachments: {
            type: 'CreateFileAttachment[]',
            items: {
              type: 'CreateFileAttachment',
              properties: {
                type: {
                  description:
                    'The type of attachment.  This is `file` for file attachments.',
                  type: '"file"',
                },
                id: {
                  description:
                    'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
                  type: 'string',
                },
              },
              propertyOrder: ['type', 'id'],
              required: ['type', 'id'],
            },
            description:
              'A list of attachments to add to the message.  The same file cannot be attached to the same message multiple times.',
          },
          addScreenshot: {
            type: 'boolean',
            description:
              "Whether to capture and attach a screenshot to the message.  The screenshot will appear as a `MessageScreenshotAttachment` in the message's [`attachments`](/js-apis-and-hooks/thread-api/observeMessage#attachments) and may be used in other situations, such as to provide context to notification emails.  \n\nWhether the sent message includes a screenshot is determined entirely by this property, and is independent of the `capture_when` setting in the [SDK initialization settings](/js-apis-and-hooks/initialization).  \n\nTaking a screenshot is a potentially-slow process, depending on the contents of the page, so it's done asynchronously in the background after the message is sent.  If the user closes the page or navigates away after the message has been sent but before the screenshot is uploaded, the screenshot data may be lost.  In this case, the screenshot attachment will end up with a status of `cancelled`.",
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          id: {
            type: 'string',
            description:
              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
        },
        propertyOrder: [
          'createThread',
          'subscribeToThread',
          'addReactions',
          'addAttachments',
          'addScreenshot',
          'content',
          'id',
          'iconURL',
          'metadata',
          'url',
          'translationKey',
          'extraClassnames',
          'skipLinkPreviews',
        ],
        required: ['content'],
      },
    },
    ClientUpdateMessage: {
      name: 'ClientUpdateMessage',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          deleted: {
            type: 'boolean',
            description:
              'Whether to change the deleted status of this message.',
          },
          removeReactions: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list of unicode strings representing the reactions you want to remove from this message. Removing a reaction that does not exist will have no effect and will not return an error. An error is returned if a reaction is both added and deleted in the same request.',
          },
          removeAttachments: {
            type: 'RemoveAttachment[]',
            items: {
              anyOf: [
                {
                  type: 'RemoveLinkPreviewAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of attachment to remove.  This is `link_preview` for link preview attachments.',
                      type: '"link_preview"',
                    },
                    id: {
                      description:
                        'The ID of the link preview attachment to remove.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['type', 'id'],
                  required: ['type', 'id'],
                },
                {
                  type: 'RemoveFileAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of attachment to remove.  This is `file` for file attachments.',
                      type: '"file"',
                    },
                    id: {
                      description: 'The ID of the file attachment to remove.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['type', 'id'],
                  required: ['type', 'id'],
                },
              ],
            },
            description:
              "The attachments you want to remove from this message.  Removing an attachment that doesn't exist has no effect and won't return an error. Attempting to add and remove the same attachment in one request is an error.",
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: {
                      type: 'MessageContent',
                      items: { type: 'MessageAnyNode' },
                    },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
          addReactions: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list of unicode strings representing the reactions you want to add to this message. Trying to create a reaction that already exists for a user does nothing.',
          },
          addAttachments: {
            type: 'CreateFileAttachment[]',
            items: {
              type: 'CreateFileAttachment',
              properties: {
                type: {
                  description:
                    'The type of attachment.  This is `file` for file attachments.',
                  type: '"file"',
                },
                id: {
                  description:
                    'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
                  type: 'string',
                },
              },
              propertyOrder: ['type', 'id'],
              required: ['type', 'id'],
            },
            description:
              'A list of attachments to add to the message.  The same file cannot be attached to the same message multiple times.',
          },
        },
        propertyOrder: [
          'deleted',
          'removeReactions',
          'removeAttachments',
          'iconURL',
          'metadata',
          'url',
          'content',
          'translationKey',
          'extraClassnames',
          'skipLinkPreviews',
          'addReactions',
          'addAttachments',
        ],
        required: [],
      },
    },
    ShareThreadViaEmail: {
      name: 'ShareThreadViaEmail',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          method: {
            type: '"email"',
            description:
              'Sharing a thread via email will include the first and last message of the thread, and a screenshot of the page.',
          },
          email: {
            type: 'string',
            description: 'Email address the thread will be shared to.',
          },
        },
        propertyOrder: ['method', 'email'],
        required: ['method', 'email'],
      },
    },
    ShareThreadToSlack: {
      name: 'ShareThreadToSlack',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          method: {
            type: '"slack"',
            description:
              'When you share a thread on Slack, it copies the thread to the chosen Slack channel. This includes any new messages added to the thread on Slack or Cord. To share a thread on Slack, the group needs to be linked to a Slack Workspace and can be connected using the [connectToSlack](/js-apis-and-hooks/user-api/connectToSlack) method. Also, when you share a thread to a Slack channel, a Cord Slack bot is added automatically to that channel.',
          },
          channelID: {
            type: 'string',
            description: 'The slack channel ID the thread will be shared to.',
          },
        },
        propertyOrder: ['method', 'channelID'],
        required: ['method', 'channelID'],
      },
    },
    ShareThreadOptions: {
      name: 'ShareThreadOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          method: {
            type: 'string',
            enum: ['email', 'slack'],
            description:
              'Sharing a thread via email will include the first and last message of the thread, and a screenshot of the page.',
          },
        },
        propertyOrder: ['method'],
        required: ['method'],
      },
    },
    ICordThreadSDK: {
      name: 'ICordThreadSDK',
      methods: {
        methodOrder: [
          'observeLocationSummary',
          'observeThreadCounts',
          'observeLocationData',
          'observeThreads',
          'observeThreadSummary',
          'observeThreadData',
          'observeThread',
          'observeMessage',
          'setSubscribed',
          'setSeen',
          'createThread',
          'updateThread',
          'shareThread',
          'sendMessage',
          'updateMessage',
          'searchMessages',
        ],
        required: [
          'observeLocationSummary',
          'observeThreadCounts',
          'observeLocationData',
          'observeThreads',
          'observeThreadSummary',
          'observeThreadData',
          'observeThread',
          'observeMessage',
          'setSubscribed',
          'setSeen',
          'createThread',
          'updateThread',
          'shareThread',
          'sendMessage',
          'updateMessage',
          'searchMessages',
        ],
        methods: {
          observeLocationSummary: {
            name: 'observeLocationSummary',
            summary:
              'This method allows you to observe summary information about a [location](/reference/location), including live updates.',
            examples: {
              Overview:
                'const ref = window.CordSDK.thread.observeLocationSummary(\n  {page: \'document_details\'},\n  (summary) => {\n     // Received an update!\n     console.log("Total threads", summary.total);\n     console.log("Unread threads", summary.unread);\n     console.log("Unread subscribed threads", summary.unreadSubscribed);\n     console.log("Resolved threads", summary.resolved);\n  },\n  {partialMatch: true}\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveLocationSummary(ref);',
            },
            parameters: {
              propertyOrder: ['location', 'callback', 'options'],
              required: ['location', 'callback'],
              properties: {
                location: {
                  description:
                    'The [location](/reference/location) to fetch summary information for.',
                  type: 'Location',
                },
                callback: {
                  description:
                    'This callback will be called once with the current location summary, and then again every time the data changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'ThreadActivitySummaryUpdateCallback',
                },
                options: {
                  description:
                    'Options that control which threads are returned.',
                  type: 'ObserveThreadActivitySummaryOptions',
                  properties: {
                    partialMatch: {
                      description:
                        'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.  \n\nIf unset, defaults to `false`.',
                      type: 'boolean',
                    },
                    filter: {
                      type: 'Pick<ThreadListFilter, "groupID">',
                      properties: {
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['groupID'],
                      required: [],
                    },
                  },
                  propertyOrder: ['partialMatch', 'filter'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveLocationSummary` to stop observing location summary information.',
              type: 'number',
            },
          },
          observeThreadCounts: {
            name: 'observeThreadCounts',
            summary:
              'This API allows you to observe the count of all the threads in a project that are visible to the current user.',
            examples: {
              Overview:
                "const ref = window.CordSDK.thread.observeThreadCounts(\n  (threadCounts) => {\n     // Received an update!\n     console.log(\"Total threads\", threadCounts.total);\n     console.log(\"Unread threads\", threadCounts.unread);\n     console.log(\"Unread subscribed threads\", threadCounts.unreadSubscribed);\n     console.log(\"Resolved threads\", threadCounts.resolved);\n  },\n   { filter: {\n       location: {\n             'value': { 'page': 'document_details'},\n             'partialMatch': true\n            },\n       metadata: {'category': 'sales'}\n   }}\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveThreadCounts(ref);",
            },
            parameters: {
              propertyOrder: ['callback', 'options'],
              required: ['callback'],
              properties: {
                callback: {
                  description:
                    'This callback will be called once with the current observeThreadCounts data, and then again every time the data changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'ThreadActivitySummaryUpdateCallback',
                },
                options: {
                  description:
                    'Options that control the thread counts returned.',
                  type: 'ObserveThreadCountsOptions',
                  properties: {
                    filter: {
                      description:
                        'An object that can be used to filter the threads returned.',
                      type: 'ClientThreadFilter',
                      properties: {
                        location: {
                          description:
                            'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        resolvedStatus: {
                          description:
                            'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                          type: 'string',
                          enum: ['any', 'resolved', 'unresolved'],
                        },
                        metadata: {
                          description:
                            'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                        viewer: {
                          description:
                            'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                          anyOf: [
                            { type: '"subscribed"' },
                            { type: '"mentioned"' },
                            {
                              type: 'ViewerThreadStatus[]',
                              items: {
                                type: 'string',
                                enum: ['subscribed', 'mentioned'],
                              },
                            },
                          ],
                        },
                      },
                      propertyOrder: [
                        'location',
                        'resolvedStatus',
                        'metadata',
                        'groupID',
                        'viewer',
                      ],
                      required: [],
                    },
                  },
                  propertyOrder: ['filter'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference which can be passed to `unobserveThreadCounts` to stop observing thread counts.',
              type: 'number',
            },
          },
          observeLocationData: {
            name: 'observeLocationData',
            summary:
              'This method allows you to observe detailed data about a [location](/reference/location), including live updates.',
            examples: {
              Overview:
                "const ref = window.CordSDK.thread.observeLocationData(\n  { page: 'document_details' },\n  ({ threads, loading, hasMore, fetchMore }) => {\n    console.log('Got a thread data update:');\n    if (loading) {\n      console.log('Loading...');\n    }\n    threads.forEach((threadSummary) =>\n      console.log(\\`Thread \\${threadSummary.id} has \\${threadSummary.total} messages!\\`),\n    );\n    if (!loading && hasMore && threads.length < 25) {\n      // Get the first 25 threads, 10 at a time.\n      fetchMore(10);\n    }\n  },\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveLocationData(ref);",
            },
            parameters: {
              propertyOrder: ['location', 'callback', 'options'],
              required: ['location', 'callback'],
              properties: {
                location: {
                  description:
                    'The [location](/reference/location) to fetch data for.',
                  type: 'Location',
                },
                callback: {
                  description:
                    'This callback will be called once with the current location data, and then again every time the data changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'LocationDataCallback',
                },
                options: {
                  description: 'Miscellaneous options. See below.',
                  type: 'ObserveLocationDataOptions',
                  properties: {
                    sortBy: {
                      description:
                        'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
                      type: 'string',
                      enum: [
                        'first_message_timestamp',
                        'most_recent_message_timestamp',
                      ],
                    },
                    sortDirection: {
                      description:
                        'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
                      type: 'string',
                      enum: ['ascending', 'descending'],
                    },
                    partialMatch: {
                      description:
                        'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.  \n\nIf unset, defaults to `false`.',
                      type: 'boolean',
                    },
                    filter: {
                      description:
                        'An object that can be used to filter the threads returned.',
                      type: 'ThreadListFilter',
                      properties: {
                        metadata: {
                          description:
                            'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        location: {
                          description:
                            'The [Location](/reference/location) of the threads.',
                          type: 'Location',
                        },
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                        resolvedStatus: {
                          description:
                            'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `unresolved`.',
                          type: 'string',
                          enum: ['any', 'resolved', 'unresolved'],
                        },
                        viewer: {
                          description:
                            'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                          anyOf: [
                            { type: '"subscribed"' },
                            { type: '"mentioned"' },
                            {
                              type: 'ViewerThreadStatus[]',
                              items: {
                                type: 'string',
                                enum: ['subscribed', 'mentioned'],
                              },
                            },
                          ],
                        },
                      },
                      propertyOrder: [
                        'metadata',
                        'location',
                        'groupID',
                        'resolvedStatus',
                        'viewer',
                      ],
                      required: [],
                    },
                  },
                  propertyOrder: [
                    'sortBy',
                    'sortDirection',
                    'partialMatch',
                    'filter',
                  ],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveLocationData` to stop observing location data.',
              type: 'number',
            },
          },
          observeThreads: {
            name: 'observeThreads',
            summary:
              'This API allows you to observe threads data within your project, that are visible to the current user, including live updates. You can use the available filter options to fine tune the threads returned.',
            examples: {
              Overview:
                "const ref = window.CordSDK.thread.observeThreads(\n  ({ threads, loading, hasMore, fetchMore, counts }) => {\n    console.log('Got a thread data update:');\n    if (loading) {\n      console.log('Loading...');\n    }\n     if (counts){\n      console.log(`Total threads: ${counts.total} and unread threads: ${counts.unread}`)\n     }\n    threads.forEach((thread) =>\n      console.log(`Thread ${thread.id} has ${thread.total} messages!`)\n    );\n    if (!loading && hasMore && threads.length < 25) {\n      // Get the first 25 threads, 10 at a time.\n      fetchMore(10);\n    }\n  },\n  { filter: {\n       location: {\n             'value': { 'page': 'document_details'},\n             'partialMatch': true\n            },\n       metadata: {'category': 'sales'}\n   }}\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveThreads(ref);",
            },
            parameters: {
              propertyOrder: ['callback', 'options'],
              required: ['callback'],
              properties: {
                callback: {
                  description:
                    'This callback will be called once with the options data, and then again every time the data changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'ThreadsCallback',
                },
                options: {
                  description:
                    'Options that control which threads are returned.',
                  type: 'ObserveThreadsOptions',
                  properties: {
                    sortBy: {
                      description:
                        'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
                      type: 'string',
                      enum: [
                        'first_message_timestamp',
                        'most_recent_message_timestamp',
                      ],
                    },
                    sortDirection: {
                      description:
                        'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
                      type: 'string',
                      enum: ['ascending', 'descending'],
                    },
                    filter: {
                      description:
                        'An object that can be used to filter the threads returned.',
                      type: 'ClientThreadFilter',
                      properties: {
                        location: {
                          description:
                            'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        resolvedStatus: {
                          description:
                            'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                          type: 'string',
                          enum: ['any', 'resolved', 'unresolved'],
                        },
                        metadata: {
                          description:
                            'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                        viewer: {
                          description:
                            'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                          anyOf: [
                            { type: '"subscribed"' },
                            { type: '"mentioned"' },
                            {
                              type: 'ViewerThreadStatus[]',
                              items: {
                                type: 'string',
                                enum: ['subscribed', 'mentioned'],
                              },
                            },
                          ],
                        },
                      },
                      propertyOrder: [
                        'location',
                        'resolvedStatus',
                        'metadata',
                        'groupID',
                        'viewer',
                      ],
                      required: [],
                    },
                    initialFetchCount: {
                      description:
                        'The number of threads to initially fetch. Once these are returned you can use the `fetchMore` property to get additional threads.  \n\nThe default for this is 10, and has a limit of 1000.',
                      type: 'number',
                    },
                  },
                  propertyOrder: [
                    'sortBy',
                    'sortDirection',
                    'filter',
                    'initialFetchCount',
                  ],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference which can be passed to `unobserveThreads` to stop observing threads data.',
              type: 'number',
            },
          },
          observeThreadSummary: {
            name: 'observeThreadSummary',
            summary:
              'This method allows you to observe summary information about a thread, such as its location and number of unread messages, including live updates.',
            examples: {
              Overview:
                'const ref = window.CordSDK.thread.observeThreadSummary(\n  \'my-awesome-thread-id\',\n  (summary) => {\n    // Received an update!\n    console.log("Total messages", summary.total);\n    console.log("Unread messages", summary.unread);\n  },\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveThreadSummary(ref);',
            },
            parameters: {
              propertyOrder: ['threadId', 'callback', 'options'],
              required: ['threadId', 'callback'],
              properties: {
                threadId: {
                  description:
                    'The thread ID to fetch summary information for. If a thread with this ID does not exist, it will be created.',
                  type: 'string',
                },
                callback: {
                  description:
                    'This callback will be called once with the current thread summary, and then again every time the data changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'ThreadSummaryUpdateCallback',
                },
                options: {
                  description: 'Options for creating new threads.',
                  type: 'ThreadObserverOptions',
                  properties: {
                    filter: {
                      description:
                        "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
                      type: 'ClientThreadFilter',
                      properties: {
                        location: {
                          description:
                            'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        resolvedStatus: {
                          description:
                            'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                          type: 'string',
                          enum: ['any', 'resolved', 'unresolved'],
                        },
                        metadata: {
                          description:
                            'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                        viewer: {
                          description:
                            'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                          anyOf: [
                            { type: '"subscribed"' },
                            { type: '"mentioned"' },
                            {
                              type: 'ViewerThreadStatus[]',
                              items: {
                                type: 'string',
                                enum: ['subscribed', 'mentioned'],
                              },
                            },
                          ],
                        },
                      },
                      propertyOrder: [
                        'location',
                        'resolvedStatus',
                        'metadata',
                        'groupID',
                        'viewer',
                      ],
                      required: [],
                    },
                    initialFetchCount: {
                      description:
                        'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
                      type: 'number',
                    },
                  },
                  propertyOrder: ['filter', 'initialFetchCount'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference which can be passed to `unobserveThreadSummary` to stop observing thread summary information.',
              type: 'number',
            },
          },
          observeThreadData: {
            name: 'observeThreadData',
            summary:
              'This method allows you to observe detailed data about a thread, including data about all the messages inside it, including live updates.',
            examples: {
              Overview:
                "const ref = window.CordSDK.thread.observeThreadData(\n  'my-awesome-thread-id',\n  ({ messages, loading, hasMore, fetchMore }) => {\n    console.log('Got a thread data update:');\n    if (loading) {\n      console.log('Loading...');\n    }\n    messages.forEach((messageSummary) =>\n      console.log(`Message ${messageSummary.id} was created at ${messageSummary.createdTimestamp}!`),\n    );\n    if (!loading && hasMore && messages.length < 25) {\n      // Get the first 25 threads, 10 at a time.\n      fetchMore(10);\n    }\n  },\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveThreadData(ref);",
            },
            parameters: {
              propertyOrder: ['threadId', 'callback', 'options'],
              required: ['threadId', 'callback'],
              properties: {
                threadId: {
                  description: 'The thread ID to fetch data for.',
                  type: 'string',
                },
                callback: {
                  description:
                    'This callback will be called once with the current thread data, and then again every time it changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'ThreadDataCallback',
                },
                options: {
                  description: 'Options for creating new threads.',
                  type: 'ThreadObserverOptions',
                  properties: {
                    filter: {
                      description:
                        "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
                      type: 'ClientThreadFilter',
                      properties: {
                        location: {
                          description:
                            'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        resolvedStatus: {
                          description:
                            'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                          type: 'string',
                          enum: ['any', 'resolved', 'unresolved'],
                        },
                        metadata: {
                          description:
                            'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                        viewer: {
                          description:
                            'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                          anyOf: [
                            { type: '"subscribed"' },
                            { type: '"mentioned"' },
                            {
                              type: 'ViewerThreadStatus[]',
                              items: {
                                type: 'string',
                                enum: ['subscribed', 'mentioned'],
                              },
                            },
                          ],
                        },
                      },
                      propertyOrder: [
                        'location',
                        'resolvedStatus',
                        'metadata',
                        'groupID',
                        'viewer',
                      ],
                      required: [],
                    },
                    initialFetchCount: {
                      description:
                        'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
                      type: 'number',
                    },
                  },
                  propertyOrder: ['filter', 'initialFetchCount'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveThreadData` to stop observing thread data.',
              type: 'number',
            },
          },
          observeThread: {
            name: 'observeThread',
            summary:
              'This method allows you to observe all messages and data for a thread, including live updates.',
            examples: {
              Overview:
                "const ref = window.CordSDK.thread.observeThread(\n  'my-awesome-thread-id',\n  ({ messages, loading, hasMore, fetchMore, thread }) => {\n    console.log('Got a thread data update:');\n    if (loading) {\n      console.log('Loading...');\n    }\n    if (thread) {\n      console.log(`${thread.unread}/${thread.total} unread`)\n    }\n    messages.forEach((messageSummary) =>\n      console.log(`Message ${messageSummary.id} was created at ${messageSummary.createdTimestamp}!`),\n    );\n    if (!loading && hasMore && messages.length < 25) {\n      // Get the first 25 threads, 10 at a time.\n      fetchMore(10);\n    }\n  },\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveThread(ref);",
            },
            parameters: {
              propertyOrder: ['threadID', 'callback', 'options'],
              required: ['threadID', 'callback'],
              properties: {
                threadID: {
                  description: 'The thread ID to fetch messages from.',
                  type: 'string',
                },
                callback: {
                  description:
                    'This callback will be called once with the current thread data, and then again every time it changes. The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'ThreadCallback',
                },
                options: {
                  description: 'Options for creating new threads.',
                  type: 'ThreadObserverOptions',
                  properties: {
                    filter: {
                      description:
                        "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
                      type: 'ClientThreadFilter',
                      properties: {
                        location: {
                          description:
                            'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        resolvedStatus: {
                          description:
                            'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                          type: 'string',
                          enum: ['any', 'resolved', 'unresolved'],
                        },
                        metadata: {
                          description:
                            'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                        viewer: {
                          description:
                            'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                          anyOf: [
                            { type: '"subscribed"' },
                            { type: '"mentioned"' },
                            {
                              type: 'ViewerThreadStatus[]',
                              items: {
                                type: 'string',
                                enum: ['subscribed', 'mentioned'],
                              },
                            },
                          ],
                        },
                      },
                      propertyOrder: [
                        'location',
                        'resolvedStatus',
                        'metadata',
                        'groupID',
                        'viewer',
                      ],
                      required: [],
                    },
                    initialFetchCount: {
                      description:
                        'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
                      type: 'number',
                    },
                  },
                  propertyOrder: ['filter', 'initialFetchCount'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveThread` to stop observing thread.',
              type: 'number',
            },
          },
          observeMessage: {
            name: 'observeMessage',
            summary:
              'This method allows you fetch data for a single message, including live updates.',
            examples: {
              Overview:
                "const ref = window.CordSDK.thread.observeMessage(\n  'my-awesome-message-id',\n  (message) => {\n    console.log('Got a thread data update:');\n    if (message === undefined) {\n      console.log('Loading...');\n    }\n    if (message) {\n      console.log(`Message /${message.id} was authored by: /${message.authorID}`)\n    }\n  }\n);\n// ... Later, when updates are no longer needed ...\nwindow.CordSDK.thread.unobserveMessage(ref);",
            },
            parameters: {
              propertyOrder: ['messageID', 'callback'],
              required: ['messageID', 'callback'],
              properties: {
                messageID: {
                  description: 'The ID of the message.',
                  type: 'string',
                },
                callback: {
                  description:
                    "This callback will be called once with the current message data, and then again every time it changes. The argument passed to the callback is an object containing the message data or null if there's no message found with the provided messageID.",
                  type: 'MessageCallback',
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveMessage` to stop observing message information.',
              type: 'number',
            },
          },
          setSubscribed: {
            name: 'setSubscribed',
            summary:
              'Set the subscribed status for an existing thread for the current user. A subscribed user will be notified of any new thread activity.',
            examples: {
              Overview:
                "await window.CordSDK.thread.setSubscribed('my-awesome-thread-id', false);",
            },
            parameters: {
              propertyOrder: ['threadID', 'subscribed'],
              required: ['threadID', 'subscribed'],
              properties: {
                threadID: {
                  description: 'The ID of the thread.',
                  type: 'string',
                },
                subscribed: {
                  description:
                    'Whether the user should be subscribed to the thread.',
                  type: 'boolean',
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<true>',
            },
          },
          setSeen: {
            overloaded: true,
            overloads: [
              {
                name: 'setSeen',
                summary:
                  'Mark entire threads as seen or unseen for the current user.  This does not affect whether the user is subscribed to the thread or not.',
                examples: {
                  Overview:
                    "// To mark a thread as unseen\nawait window.CordSDK.thread.setSeen('my-awesome-thread-id', false);\n\n// To mark a thread as seen\nawait window.CordSDK.thread.setSeen('my-awesome-thread-id', true);",
                },
                parameters: {
                  propertyOrder: ['threadID', 'seen'],
                  required: ['threadID', 'seen'],
                  properties: {
                    threadID: {
                      description: 'The ID of the thread to operate on.',
                      type: 'string',
                    },
                    seen: {
                      description:
                        'Whether the thread should now be seen (true) or unseen (false).',
                      type: 'boolean',
                    },
                  },
                },
                returns: {
                  description:
                    'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
                  type: 'Promise<true>',
                },
              },
              {
                name: 'setSeen',
                summary:
                  'Mark entire threads as seen or unseen for the current user.  This does not affect whether the user is subscribed to the thread or not.',
                examples: {
                  Overview:
                    '// To mark threads as unseen\nawait window.CordSDK.thread.setSeen({ metadata: {archived: true} }, false);\n\n// To mark threads as seen\nawait window.CordSDK.thread.setSeen({ metadata: {archived: true} }, true);',
                },
                parameters: {
                  propertyOrder: ['filter', 'seen'],
                  required: ['filter', 'seen'],
                  properties: {
                    filter: {
                      description: 'The set of threads to operate on.',
                      type: 'ClientThreadFilter',
                      properties: {
                        location: {
                          description:
                            'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                          anyOf: [
                            { type: 'Location' },
                            {
                              type: 'LocationFilterOptions',
                              properties: {
                                value: {
                                  description:
                                    'The [Location](/reference/location) of the threads.',
                                  type: 'Location',
                                },
                                partialMatch: {
                                  description:
                                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: ['value', 'partialMatch'],
                              required: ['value', 'partialMatch'],
                            },
                          ],
                        },
                        resolvedStatus: {
                          description:
                            'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                          type: 'string',
                          enum: ['any', 'resolved', 'unresolved'],
                        },
                        metadata: {
                          description:
                            'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                          type: 'EntityMetadata',
                        },
                        groupID: {
                          description:
                            'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                          type: 'string',
                        },
                        viewer: {
                          description:
                            'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                          anyOf: [
                            { type: '"subscribed"' },
                            { type: '"mentioned"' },
                            {
                              type: 'ViewerThreadStatus[]',
                              items: {
                                type: 'string',
                                enum: ['subscribed', 'mentioned'],
                              },
                            },
                          ],
                        },
                      },
                      propertyOrder: [
                        'location',
                        'resolvedStatus',
                        'metadata',
                        'groupID',
                        'viewer',
                      ],
                      required: [],
                    },
                    seen: {
                      description:
                        'Whether the threads should now be seen (true) or unseen (false).',
                      type: 'boolean',
                    },
                  },
                },
                returns: {
                  description:
                    'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
                  type: 'Promise<true>',
                },
              },
            ],
          },
          createThread: {
            name: 'createThread',
            summary:
              "Create a new empty thread i.e. a thread without messages. Please note that because the new thread won't have any messages, it will not be displayed on any of the thread-related components like [ThreadedComments](/components/cord-threaded-comments), [ThreadList](/components/cord-thread-list) or [Thread](/components/cord-thread). If you would like to create a thread containing a message instead, please use the [SendMessage API](/js-apis-and-hooks/thread-api/sendMessage) and pass in thread data via the `createThread` argument.",
            examples: {
              Overview:
                "await window.CordSDK.thread.createThread({\n  id: 'my-awesome-thread-id',\n  name: 'A more awesome name',\n  location: {'page': 'sales'},\n  url: \"https://my-awesome-url.com\",\n});",
            },
            parameters: {
              propertyOrder: ['data'],
              required: ['data'],
              properties: {
                data: {
                  description: 'The data values the new thread should have.',
                  type: 'ClientCreateThread',
                  properties: {
                    addSubscribers: {
                      description:
                        'A list of subscribers to add to this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    name: {
                      description:
                        'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                      type: 'string',
                    },
                    url: {
                      description:
                        "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                      type: 'string',
                    },
                    location: {
                      description:
                        'The [location](/reference/location) of this thread.',
                      type: 'Location',
                    },
                    id: {
                      description: 'The ID for this thread.',
                      type: 'string',
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    groupID: {
                      description: 'The group ID this thread is in.',
                      type: 'string',
                    },
                    extraClassnames: {
                      description:
                        'An optional space separated list of classnames to add to the thread.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'addSubscribers',
                    'name',
                    'url',
                    'location',
                    'id',
                    'metadata',
                    'groupID',
                    'extraClassnames',
                  ],
                  required: ['name', 'url', 'location'],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<true>',
            },
          },
          updateThread: {
            name: 'updateThread',
            summary: 'Update an existing thread with new data.',
            examples: {
              Overview:
                "await window.CordSDK.thread.updateThread('my-awesome-thread-id', {\n  name: 'A more awesome name',\n  resolved: true,\n});",
            },
            parameters: {
              propertyOrder: ['threadID', 'data'],
              required: ['threadID', 'data'],
              properties: {
                threadID: {
                  description: 'The ID of the thread to update.',
                  type: 'string',
                },
                data: {
                  description: 'The data values that should be updated.',
                  type: 'ClientUpdateThread',
                  properties: {
                    resolved: {
                      description:
                        'Whether the thread is resolved.  Setting this to `true` is equivalent to setting `resolvedTimestamp` to the current time, and setting this to `false` is equivalent to setting `resolvedTimestamp` to `null`.',
                      type: 'boolean',
                    },
                    typing: {
                      description:
                        'Whether to mark the current user as typing in the thread. The typing indicator expires after 3 seconds, so to continually show the indicator it needs to be called on an interval.  Passing `false` is a no-op and the indicator will time out normally.',
                      type: 'boolean',
                    },
                    name: {
                      description:
                        'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                      type: 'string',
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    url: {
                      description:
                        "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                      type: 'string',
                    },
                    extraClassnames: {
                      description:
                        'An optional space separated list of classnames to add to the thread.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'resolved',
                    'typing',
                    'name',
                    'metadata',
                    'url',
                    'extraClassnames',
                  ],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<true>',
            },
          },
          shareThread: {
            name: 'shareThread',
            summary:
              'Shares the most recent message, including a link to the thread, via email.',
            examples: {
              Overview:
                "await window.CordSDK.thread.shareThread('my-awesome-thread-id', {\n  method: 'email',\n  email: 'example@email.com',\n});",
            },
            parameters: {
              propertyOrder: ['threadID', 'options'],
              required: ['threadID', 'options'],
              properties: {
                threadID: {
                  description: 'The ID of the thread to share.',
                  type: 'string',
                },
                options: {
                  description: 'Options to configure how to share a thread.',
                  anyOf: [
                    {
                      type: 'ShareThreadViaEmail',
                      properties: {
                        method: {
                          description:
                            'Sharing a thread via email will include the first and last message of the thread, and a screenshot of the page.',
                          type: '"email"',
                        },
                        email: {
                          description:
                            'Email address the thread will be shared to.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['method', 'email'],
                      required: ['method', 'email'],
                    },
                    {
                      type: 'ShareThreadToSlack',
                      properties: {
                        method: {
                          description:
                            'When you share a thread on Slack, it copies the thread to the chosen Slack channel. This includes any new messages added to the thread on Slack or Cord. To share a thread on Slack, the group needs to be linked to a Slack Workspace and can be connected using the [connectToSlack](/js-apis-and-hooks/user-api/connectToSlack) method. Also, when you share a thread to a Slack channel, a Cord Slack bot is added automatically to that channel.',
                          type: '"slack"',
                        },
                        channelID: {
                          description:
                            'The slack channel ID the thread will be shared to.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['method', 'channelID'],
                      required: ['method', 'channelID'],
                    },
                  ],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<true>',
            },
          },
          sendMessage: {
            name: 'sendMessage',
            summary:
              'Add a new message to a thread.  The message will be authored by the current user and belong to their current group.',
            examples: {
              Overview:
                "await window.CordSDK.thread.sendMessage(\n  'my-awesome-thread-id',\n  {\n    content: [{ type: 'p', children: [{ text: 'Amazing job!' }]}],\n  }\n);",
            },
            parameters: {
              propertyOrder: ['threadID', 'data'],
              required: ['threadID', 'data'],
              properties: {
                threadID: {
                  description:
                    'The ID of the thread to add the message to.  If this thread does not yet exist, the `createThread` parameter determines what happens.',
                  type: 'string',
                },
                data: {
                  description: 'The data values for the new message.',
                  type: 'ClientCreateMessage',
                  properties: {
                    createThread: {
                      description:
                        "The parameters for creating a thread if the supplied thread doesn't exist yet.  If the thread doesn't exist but `createThread` isn't provided, the call will generate an error.  This value is ignored if the thread already exists.",
                      type: 'Omit<ClientCreateThread, "id">',
                      properties: {
                        name: {
                          description:
                            'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                          type: 'string',
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        url: {
                          description:
                            "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                          type: 'string',
                        },
                        groupID: {
                          description: 'The group ID this thread is in.',
                          type: 'string',
                        },
                        extraClassnames: {
                          description:
                            'An optional space separated list of classnames to add to the thread.',
                          type: ['null', 'string'],
                        },
                        location: {
                          description:
                            'The [location](/reference/location) of this thread.',
                          type: 'Location',
                        },
                        addSubscribers: {
                          description:
                            'A list of subscribers to add to this thread.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                      },
                      propertyOrder: [
                        'name',
                        'metadata',
                        'url',
                        'groupID',
                        'extraClassnames',
                        'location',
                        'addSubscribers',
                      ],
                      required: ['name', 'url', 'location'],
                    },
                    subscribeToThread: {
                      description:
                        "Whether to subscribe the sender of the message to the thread, so that they get notified about replies.  If not specified, defaults to `true`.  If false, the user's subscription status will be left unchanged.",
                      type: 'boolean',
                    },
                    addReactions: {
                      description:
                        'A list of unicode strings representing the reactions you want to add to this message. Trying to create a reaction that already exists for a user does nothing.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    addAttachments: {
                      description:
                        'A list of attachments to add to the message.  The same file cannot be attached to the same message multiple times.',
                      type: 'CreateFileAttachment[]',
                      items: {
                        type: 'CreateFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of attachment.  This is `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description:
                              'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
                            type: 'string',
                          },
                        },
                        propertyOrder: ['type', 'id'],
                        required: ['type', 'id'],
                      },
                    },
                    addScreenshot: {
                      description:
                        "Whether to capture and attach a screenshot to the message.  The screenshot will appear as a `MessageScreenshotAttachment` in the message's [`attachments`](/js-apis-and-hooks/thread-api/observeMessage#attachments) and may be used in other situations, such as to provide context to notification emails.  \n\nWhether the sent message includes a screenshot is determined entirely by this property, and is independent of the `capture_when` setting in the [SDK initialization settings](/js-apis-and-hooks/initialization).  \n\nTaking a screenshot is a potentially-slow process, depending on the contents of the page, so it's done asynchronously in the background after the message is sent.  If the user closes the page or navigates away after the message has been sent but before the screenshot is uploaded, the screenshot data may be lost.  In this case, the screenshot attachment will end up with a status of `cancelled`.",
                      type: 'boolean',
                    },
                    content: {
                      description: 'The content of the message.',
                      type: 'MessageContent',
                      items: {
                        anyOf: [
                          {
                            type: 'MessageAssigneeNode',
                            properties: {
                              type: { type: 'MessageNodeType.ASSIGNEE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              user: {
                                type: 'object',
                                properties: { id: { type: 'string' } },
                                propertyOrder: ['id'],
                                required: ['id'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'user',
                            ],
                            required: ['type', 'children', 'user'],
                          },
                          {
                            type: 'MessageBulletNode',
                            properties: {
                              type: { type: 'MessageNodeType.BULLET' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              indent: { type: 'number' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'indent',
                            ],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageCodeNode',
                            properties: {
                              type: { type: 'MessageNodeType.CODE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageLinkNode',
                            properties: {
                              type: { type: 'MessageNodeType.LINK' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              url: { type: 'string' },
                            },
                            propertyOrder: ['type', 'class', 'children', 'url'],
                            required: ['type', 'children', 'url'],
                          },
                          {
                            type: 'MessageMentionNode',
                            properties: {
                              type: { type: 'MessageNodeType.MENTION' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              user: {
                                type: 'object',
                                properties: { id: { type: 'string' } },
                                propertyOrder: ['id'],
                                required: ['id'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'user',
                            ],
                            required: ['type', 'children', 'user'],
                          },
                          {
                            type: 'MessageNumberBulletNode',
                            properties: {
                              type: { type: 'MessageNodeType.NUMBER_BULLET' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              bulletNumber: { type: 'number' },
                              indent: { type: 'number' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'bulletNumber',
                              'indent',
                            ],
                            required: ['type', 'children', 'bulletNumber'],
                          },
                          {
                            type: 'MessageParagraphNode',
                            properties: {
                              type: { type: 'MessageNodeType.PARAGRAPH' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageQuoteNode',
                            properties: {
                              type: { type: 'MessageNodeType.QUOTE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageTextNode',
                            properties: {
                              type: { type: 'undefined' },
                              class: { type: 'string' },
                              text: { type: 'string' },
                              bold: { type: 'boolean' },
                              italic: { type: 'boolean' },
                              underline: { type: 'boolean' },
                              code: { type: 'boolean' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'text',
                              'bold',
                              'italic',
                              'underline',
                              'code',
                            ],
                            required: ['text'],
                          },
                          {
                            type: 'MessageTodoNode',
                            properties: {
                              type: { type: 'MessageNodeType.TODO' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              todoID: { type: 'string' },
                              done: { type: 'boolean' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'todoID',
                              'done',
                            ],
                            required: ['type', 'children', 'todoID', 'done'],
                          },
                          {
                            type: 'MessageMarkdownNode',
                            properties: {
                              type: { type: 'MessageNodeType.MARKDOWN' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                        ],
                      },
                    },
                    id: {
                      description:
                        'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                      type: 'string',
                    },
                    iconURL: {
                      description:
                        'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                      type: ['null', 'string'],
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    url: {
                      description:
                        "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                      type: ['null', 'string'],
                    },
                    translationKey: {
                      description:
                        'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                      type: ['null', 'string'],
                    },
                    extraClassnames: {
                      description:
                        'A optional space separated list of classnames to add to the message.',
                      type: ['null', 'string'],
                    },
                    skipLinkPreviews: {
                      description:
                        "If set, Cord won't analyze links in the message to generate previews.",
                      type: 'boolean',
                    },
                  },
                  propertyOrder: [
                    'createThread',
                    'subscribeToThread',
                    'addReactions',
                    'addAttachments',
                    'addScreenshot',
                    'content',
                    'id',
                    'iconURL',
                    'metadata',
                    'url',
                    'translationKey',
                    'extraClassnames',
                    'skipLinkPreviews',
                  ],
                  required: ['content'],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<true>',
            },
          },
          updateMessage: {
            overloaded: true,
            overloads: [
              {
                name: 'updateMessage',
                summary:
                  'Update the content or properties of an existing message.  This can only be used to modify messages created by the current viewer.',
                examples: {
                  Overview:
                    "await window.CordSDK.thread.updateMessage(\n  'my-awesome-thread-id',\n  'message-42',\n  {\n    content: [{ type: 'p', children: [{ text: 'An updated message content' }]}],\n  }\n);",
                },
                parameters: {
                  propertyOrder: ['threadID', 'messageID', 'data'],
                  required: ['threadID', 'messageID', 'data'],
                  properties: {
                    threadID: {
                      description:
                        'The ID of the thread containing the message.',
                      type: 'string',
                    },
                    messageID: {
                      description: 'The ID of the message to update.',
                      type: 'string',
                    },
                    data: {
                      description:
                        'The data values to update.  Any omitted values will be left at their current values.',
                      type: 'ClientUpdateMessage',
                      properties: {
                        deleted: {
                          description:
                            'Whether to change the deleted status of this message.',
                          type: 'boolean',
                        },
                        removeReactions: {
                          description:
                            'A list of unicode strings representing the reactions you want to remove from this message. Removing a reaction that does not exist will have no effect and will not return an error. An error is returned if a reaction is both added and deleted in the same request.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        removeAttachments: {
                          description:
                            "The attachments you want to remove from this message.  Removing an attachment that doesn't exist has no effect and won't return an error. Attempting to add and remove the same attachment in one request is an error.",
                          type: 'RemoveAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'RemoveLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of attachment to remove.  This is `link_preview` for link preview attachments.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment to remove.',
                                    type: 'string',
                                  },
                                },
                                propertyOrder: ['type', 'id'],
                                required: ['type', 'id'],
                              },
                              {
                                type: 'RemoveFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of attachment to remove.  This is `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the file attachment to remove.',
                                    type: 'string',
                                  },
                                },
                                propertyOrder: ['type', 'id'],
                                required: ['type', 'id'],
                              },
                            ],
                          },
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                        addReactions: {
                          description:
                            'A list of unicode strings representing the reactions you want to add to this message. Trying to create a reaction that already exists for a user does nothing.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        addAttachments: {
                          description:
                            'A list of attachments to add to the message.  The same file cannot be attached to the same message multiple times.',
                          type: 'CreateFileAttachment[]',
                          items: {
                            type: 'CreateFileAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of attachment.  This is `file` for file attachments.',
                                type: '"file"',
                              },
                              id: {
                                description:
                                  'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
                                type: 'string',
                              },
                            },
                            propertyOrder: ['type', 'id'],
                            required: ['type', 'id'],
                          },
                        },
                      },
                      propertyOrder: [
                        'deleted',
                        'removeReactions',
                        'removeAttachments',
                        'iconURL',
                        'metadata',
                        'url',
                        'content',
                        'translationKey',
                        'extraClassnames',
                        'skipLinkPreviews',
                        'addReactions',
                        'addAttachments',
                      ],
                      required: [],
                    },
                  },
                },
                returns: {
                  description:
                    'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
                  type: 'Promise<true>',
                },
              },
              {
                name: 'updateMessage',
                summary:
                  'Update the content or properties of an existing message.  This can only be used to modify messages created by the current viewer.',
                examples: {
                  Overview:
                    "await window.CordSDK.thread.updateMessage(\n  'message-42',\n  {\n    content: [{ type: 'p', children: [{ text: 'An updated message content' }]}],\n  }\n);",
                },
                parameters: {
                  propertyOrder: ['messageID', 'data'],
                  required: ['messageID', 'data'],
                  properties: {
                    messageID: {
                      description: 'The ID of the message to update.',
                      type: 'string',
                    },
                    data: {
                      description:
                        'The data values to update.  Any omitted values will be left at their current values.',
                      type: 'ClientUpdateMessage',
                      properties: {
                        deleted: {
                          description:
                            'Whether to change the deleted status of this message.',
                          type: 'boolean',
                        },
                        removeReactions: {
                          description:
                            'A list of unicode strings representing the reactions you want to remove from this message. Removing a reaction that does not exist will have no effect and will not return an error. An error is returned if a reaction is both added and deleted in the same request.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        removeAttachments: {
                          description:
                            "The attachments you want to remove from this message.  Removing an attachment that doesn't exist has no effect and won't return an error. Attempting to add and remove the same attachment in one request is an error.",
                          type: 'RemoveAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'RemoveLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of attachment to remove.  This is `link_preview` for link preview attachments.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment to remove.',
                                    type: 'string',
                                  },
                                },
                                propertyOrder: ['type', 'id'],
                                required: ['type', 'id'],
                              },
                              {
                                type: 'RemoveFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of attachment to remove.  This is `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the file attachment to remove.',
                                    type: 'string',
                                  },
                                },
                                propertyOrder: ['type', 'id'],
                                required: ['type', 'id'],
                              },
                            ],
                          },
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: {
                                    type: 'MessageContent',
                                    items: { type: 'MessageAnyNode' },
                                  },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                        addReactions: {
                          description:
                            'A list of unicode strings representing the reactions you want to add to this message. Trying to create a reaction that already exists for a user does nothing.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        addAttachments: {
                          description:
                            'A list of attachments to add to the message.  The same file cannot be attached to the same message multiple times.',
                          type: 'CreateFileAttachment[]',
                          items: {
                            type: 'CreateFileAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of attachment.  This is `file` for file attachments.',
                                type: '"file"',
                              },
                              id: {
                                description:
                                  'The ID of the file to attach.  This must have been previously uploaded via the [file API](/js-apis-and-hooks/file-api/uploadFile).',
                                type: 'string',
                              },
                            },
                            propertyOrder: ['type', 'id'],
                            required: ['type', 'id'],
                          },
                        },
                      },
                      propertyOrder: [
                        'deleted',
                        'removeReactions',
                        'removeAttachments',
                        'iconURL',
                        'metadata',
                        'url',
                        'content',
                        'translationKey',
                        'extraClassnames',
                        'skipLinkPreviews',
                        'addReactions',
                        'addAttachments',
                      ],
                      required: [],
                    },
                  },
                },
                returns: {
                  description:
                    'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
                  type: 'Promise<true>',
                },
              },
            ],
          },
          searchMessages: {
            name: 'searchMessages',
            summary: 'This method allows you search for messages by content.',
            examples: {
              Overview:
                "await window.CordSDK.thread.searchMessages({textToMatch: 'hello'});",
            },
            parameters: {
              propertyOrder: ['searchOptions'],
              required: ['searchOptions'],
              properties: {
                searchOptions: {
                  description:
                    'Various options for how to search the messages.  Each option is optional, but if you supply no options the result will be an empty array.',
                  type: 'SearchOptionsType',
                  properties: {
                    textToMatch: {
                      description:
                        'The string you want to find in message content.',
                      type: 'string',
                    },
                    authorID: {
                      description:
                        'The user ID of the person who sent the message.',
                      type: 'string',
                    },
                    groupID: {
                      description:
                        'The ID of the group the message belongs to. If omitted, the search will be across all groups the current user is a member of.',
                      type: 'string',
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs of data associated with the message.',
                      type: 'EntityMetadata',
                    },
                    locationOptions: {
                      description:
                        'Location to filter the messages by.  \n\nSet locationOptions.location to a specific thread location to search. If locationOptions.partialMatch is `true`, we perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, we fetch information only from the specified location.',
                      type: 'object',
                      properties: {
                        location: { type: 'Location' },
                        partialMatch: { type: 'boolean' },
                      },
                      propertyOrder: ['location', 'partialMatch'],
                      required: ['location', 'partialMatch'],
                    },
                    timestampRange: {
                      description:
                        'Optional date objects used to scope search.',
                      type: 'TimestampRange',
                      properties: {
                        from: {
                          description:
                            "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                          type: 'Date',
                        },
                        to: {
                          description:
                            "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['from', 'to'],
                      required: [],
                    },
                    limit: {
                      description:
                        'Number of messages to return. This will default to 50 if no value is provided but will be capped at 1000 if a value is provided.',
                      type: 'number',
                    },
                    sortBy: {
                      description:
                        "Sort the messages returned based on either their creation timestamp or relevance. Relevance refers to how closely the provided `textToMatch` string matches the content of the messages. Combine this with `sortDirection` to fine-tune the sorting order.  \n\nBy default, sorting is performed by `relevance` if `textToMatch` is provided, but will fallback to `created_timestamp` if it's not.",
                      type: 'string',
                      enum: ['created_timestamp', 'relevance'],
                    },
                    sortDirection: {
                      description:
                        "Property to control the order in which the messages returned are sorted. Using `sortBy` value of `relevance` and `sortDirection` of `descending` are the best options for getting the most relevant results at the top and is the default sorting criteria.  \n\nThe default value for this is 'descending'.",
                      type: 'string',
                      enum: ['ascending', 'descending'],
                    },
                  },
                  propertyOrder: [
                    'textToMatch',
                    'authorID',
                    'groupID',
                    'metadata',
                    'locationOptions',
                    'timestampRange',
                    'limit',
                    'sortBy',
                    'sortDirection',
                  ],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'An array containing message objects including thread location.',
              type: 'Promise<SearchResultData[] | undefined>',
            },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    ThreadData: {
      name: 'ThreadData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          firstMessage: {
            anyOf: [
              { type: 'null' },
              {
                type: 'ClientMessageData',
                properties: {
                  seen: {
                    description:
                      'Whether the message has been seen by the current viewer.',
                    type: 'boolean',
                  },
                  id: {
                    description:
                      'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                    type: 'string',
                  },
                  authorID: {
                    description: 'The ID for the user that sent the message.',
                    type: 'string',
                  },
                  groupID: {
                    description:
                      'The ID for the group this message belongs to.',
                    type: 'string',
                  },
                  threadID: {
                    description:
                      'The ID for the thread this message is part of.',
                    type: 'string',
                  },
                  content: {
                    description: 'The content of the message.',
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: {
                    description:
                      'A plaintext version of the structured message content.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                    type: ['null', 'string'],
                  },
                  createdTimestamp: {
                    description:
                      'The timestamp when this message was created.  The default value is the current time.',
                    type: 'Date',
                  },
                  deletedTimestamp: {
                    description:
                      'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  updatedTimestamp: {
                    description:
                      'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  iconURL: {
                    description:
                      'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                    type: ['null', 'string'],
                  },
                  translationKey: {
                    description:
                      'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                    type: ['null', 'string'],
                  },
                  type: {
                    description:
                      'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'A optional space separated list of classnames to add to the message.',
                    type: ['null', 'string'],
                  },
                  attachments: {
                    description: 'The items attached to this message.',
                    type: 'MessageAttachment[]',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageFileAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `file` for file attachments.',
                              type: '"file"',
                            },
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                        {
                          type: 'MessageAnnotationAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `annotation` for annotation attachments.',
                              type: '"annotation"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the annotation, if any.',
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              ],
                            },
                            locationData: {
                              description:
                                'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                              type: ['null', 'string'],
                            },
                            customData: {
                              description:
                                "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'CustomAnnotationData',
                                  properties: {
                                    location: {
                                      description:
                                        'The custom location you produced for this annotation at annotation capture time.',
                                      type: 'Location',
                                    },
                                    coordsRelativeToTarget: {
                                      description:
                                        'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                      type: 'object',
                                      properties: {
                                        x: { type: 'number' },
                                        y: { type: 'number' },
                                      },
                                      propertyOrder: ['x', 'y'],
                                      required: ['x', 'y'],
                                    },
                                    label: {
                                      description:
                                        'Your custom user-visible label for the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                  required: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                },
                              ],
                            },
                            textContent: {
                              description:
                                'The text that was selected when creating the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                          required: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                        },
                        {
                          type: 'MessageScreenshotAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                              type: '"screenshot"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'screenshot'],
                          required: ['type', 'screenshot'],
                        },
                        {
                          type: 'MessageLinkPreviewAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `link_preview` for file link previews.',
                              type: '"link_preview"',
                            },
                            id: {
                              description:
                                'The ID of the link preview attachment.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The url from which the preview was generated.',
                              type: 'string',
                            },
                            imageURL: {
                              description:
                                'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                              type: ['null', 'string'],
                            },
                            title: {
                              description:
                                "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                              type: ['null', 'string'],
                            },
                            description: {
                              description:
                                'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                          required: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                        },
                      ],
                    },
                  },
                  reactions: {
                    description: 'The reactions to this message.',
                    type: 'Reaction[]',
                    items: {
                      type: 'Reaction',
                      properties: {
                        reaction: {
                          description: 'The emoji reaction.',
                          type: 'string',
                        },
                        userID: {
                          description:
                            'The ID of the user who reacted to the message.',
                          type: 'string',
                        },
                        timestamp: {
                          description:
                            'The timestamp of when the reaction was created.',
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['reaction', 'userID', 'timestamp'],
                      required: ['reaction', 'userID', 'timestamp'],
                    },
                  },
                  seenBy: {
                    description:
                      'A list of IDs of the users that have seen the message.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  skipLinkPreviews: {
                    description:
                      "If set, Cord won't analyze links in the message to generate previews.",
                    type: 'boolean',
                  },
                },
                propertyOrder: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
                required: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
              },
            ],
            description:
              'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
          },
          messages: {
            type: 'ClientMessageData[]',
            items: {
              type: 'ClientMessageData',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
            },
            description:
              'An array of objects, one for each message in the specified thread.  \n\nThis array is paginated. At first, it will contain summaries of only the latest (newest) few messages. Calling `fetchMore` will cause further message summaries to be appended to the array.',
          },
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
        },
        propertyOrder: [
          'firstMessage',
          'messages',
          'loading',
          'fetchMore',
          'hasMore',
        ],
        required: [
          'firstMessage',
          'messages',
          'loading',
          'fetchMore',
          'hasMore',
        ],
      },
    },
    ClientThreadData: {
      name: 'ClientThreadData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          messages: {
            type: 'ClientMessageData[]',
            items: {
              type: 'ClientMessageData',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
            },
            description:
              'An array of objects, one for each message in the specified thread.  \n\nThis array is paginated. At first, it will contain only the latest (newest) messages. Calling `fetchMore` will cause further messages to be appended to the array.',
          },
          thread: {
            anyOf: [
              { type: 'undefined' },
              { type: 'null' },
              {
                type: 'ThreadSummary',
                properties: {
                  unread: {
                    description:
                      "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                    type: 'number',
                  },
                  viewerIsThreadParticipant: {
                    description:
                      'Whether the current viewer has either left a message or reacted to this thread.',
                    type: 'boolean',
                  },
                  firstMessage: {
                    description:
                      'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  lastMessage: {
                    description:
                      'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  id: {
                    description: 'The ID for this thread.',
                    type: 'string',
                  },
                  groupID: {
                    description: 'The group ID this thread is in.',
                    type: 'string',
                  },
                  total: {
                    description:
                      'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  userMessages: {
                    description:
                      'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  actionMessages: {
                    description:
                      'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  deletedMessages: {
                    description:
                      'The number of deleted messages in this thread.',
                    type: 'number',
                  },
                  resolved: {
                    description:
                      'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                    type: 'boolean',
                  },
                  resolvedTimestamp: {
                    description:
                      'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  participants: {
                    description:
                      'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                    type: 'ThreadParticipant[]',
                    items: {
                      type: 'ThreadParticipant',
                      properties: {
                        lastSeenTimestamp: {
                          description:
                            'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        userID: {
                          description:
                            "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'lastSeenTimestamp',
                        'userID',
                        'displayName',
                      ],
                      required: ['lastSeenTimestamp', 'userID', 'displayName'],
                    },
                  },
                  subscribers: {
                    description:
                      'All of the users who are subscribed to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  repliers: {
                    description:
                      'All of the users who have replied to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  mentioned: {
                    description:
                      'All of the users who were mentioned in a message in this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  actionMessageRepliers: {
                    description:
                      "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  typing: {
                    description:
                      'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  name: {
                    description:
                      'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                    type: 'string',
                  },
                  location: {
                    description:
                      'The [location](/reference/location) of this thread.',
                    type: 'Location',
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'An optional space separated list of classnames to add to the thread.',
                    type: ['null', 'string'],
                  },
                },
                propertyOrder: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
                required: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
              },
            ],
            description:
              'Information about the thread.  This will be undefined if the thread is still loading and null if the thread does not exist.',
          },
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
        },
        propertyOrder: [
          'messages',
          'thread',
          'loading',
          'fetchMore',
          'hasMore',
        ],
        required: ['messages', 'thread', 'loading', 'fetchMore', 'hasMore'],
      },
    },
    ServerUpdateThread: {
      name: 'ServerUpdateThread',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: {
            type: 'string',
            description:
              'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
          },
          id: { type: 'string', description: 'The ID for this thread.' },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          url: {
            type: 'string',
            description:
              "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
          },
          groupID: {
            type: 'string',
            description: 'The group ID this thread is in.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'An optional space separated list of classnames to add to the thread.',
          },
          location: {
            type: 'Location',
            description: 'The [location](/reference/location) of this thread.',
          },
          resolvedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
          },
          userID: {
            type: 'string',
            description:
              'Certain changes to the thread may post a message into the thread -- in particular, resolving or unresolving a thread posts a message into the thread saying "User un/resolved this thread". This parameter is the ID of the User who will be listed as the author of that message. It\'s optional -- if no user is specified, then those messages won\'t get posted.',
          },
          typing: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              "Marks the specified users as typing in this thread.  The typing indicator expires after 3 seconds, so to continually show the indicator it needs to be called on an interval.  Pass an empty array to clear all users' typing indicators.",
          },
          resolved: {
            type: 'boolean',
            description:
              'Whether the thread is resolved.  Setting this to `true` is equivalent to setting `resolvedTimestamp` to the current time, and setting this to `false` is equivalent to setting `resolvedTimestamp` to `null`.',
          },
          seenByUsers: {
            type: 'ServerThreadSeenUser[]',
            items: {
              type: 'ServerThreadSeenUser',
              properties: {
                userID: {
                  description:
                    'ID of the user that has seen/not seen the thread.',
                  type: 'string',
                },
                seen: {
                  description: 'Whether the user has seen the thread or not.',
                  type: 'boolean',
                },
              },
              propertyOrder: ['userID', 'seen'],
              required: ['userID', 'seen'],
            },
            description:
              'Marks the specified users as having seen/not seen this thread. If a user is not included in this list, the seen status will not be changed.',
          },
          addSubscribers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'A list of subscribers to add to this thread.',
          },
          removeSubscribers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'A list of subscribers to remove from this thread.',
          },
        },
        propertyOrder: [
          'name',
          'id',
          'metadata',
          'url',
          'groupID',
          'extraClassnames',
          'location',
          'resolvedTimestamp',
          'userID',
          'typing',
          'resolved',
          'seenByUsers',
          'addSubscribers',
          'removeSubscribers',
        ],
        required: [],
      },
    },
    ServerCreateThread: {
      name: 'ServerCreateThread',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          addSubscribers: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'A list of subscribers to add to this thread.',
          },
          name: {
            type: 'string',
            description:
              'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
          },
          url: {
            type: 'string',
            description:
              "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
          },
          groupID: {
            type: 'string',
            description: 'The group ID this thread is in.',
          },
          location: {
            type: 'Location',
            description: 'The [location](/reference/location) of this thread.',
          },
          id: { type: 'string', description: 'The ID for this thread.' },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'An optional space separated list of classnames to add to the thread.',
          },
        },
        propertyOrder: [
          'addSubscribers',
          'name',
          'url',
          'groupID',
          'location',
          'id',
          'metadata',
          'extraClassnames',
        ],
        required: ['name', 'url', 'groupID', 'location'],
      },
    },
    ServerListThreadFilter: {
      name: 'ServerListThreadFilter',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          metadata: {
            type: 'EntityMetadata',
            description:
              'Return only objects containing these metadata keys and values. (Metadata is arbitrary key-value pairs of data that you can associate with an object.)',
          },
          groupID: {
            type: 'string',
            description:
              'Return only threads [belonging to this group](/reference/permissions).',
          },
          location: {
            anyOf: [
              { type: 'Location' },
              {
                type: 'LocationFilterOptions',
                properties: {
                  value: {
                    description:
                      'The [Location](/reference/location) of the threads.',
                    type: 'Location',
                  },
                  partialMatch: {
                    description:
                      'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                    type: 'boolean',
                  },
                },
                propertyOrder: ['value', 'partialMatch'],
                required: ['value', 'partialMatch'],
              },
            ],
            description:
              'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
          },
          resolvedStatus: {
            type: 'string',
            enum: ['any', 'resolved', 'unresolved'],
            description:
              'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
          },
          firstMessageTimestamp: {
            type: 'TimestampRange',
            properties: {
              from: {
                description:
                  "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                type: 'Date',
              },
              to: {
                description:
                  "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                type: 'Date',
              },
            },
            propertyOrder: ['from', 'to'],
            required: [],
            description:
              'Return only threads with a "first message timestamp" within this range. The "first message timestamp" of a thread is the timestamp when the first message in the thread was created. (This is typically when the thread was created.)',
          },
          mostRecentMessageTimestamp: {
            type: 'TimestampRange',
            properties: {
              from: {
                description:
                  "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                type: 'Date',
              },
              to: {
                description:
                  "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                type: 'Date',
              },
            },
            propertyOrder: ['from', 'to'],
            required: [],
            description:
              'Return only threads with a "most recent message timestamp" within this range. The "most recent message timestamp" of a thread is the timestamp when the most recent message in the thread was created or updated. (This is typically when the thread was most recently replied to.)',
          },
        },
        propertyOrder: [
          'metadata',
          'groupID',
          'location',
          'resolvedStatus',
          'firstMessageTimestamp',
          'mostRecentMessageTimestamp',
        ],
        required: [],
      },
    },
    ServerListThreadParameters: {
      name: 'ServerListThreadParameters',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          filter: {
            type: 'ServerListThreadFilter',
            properties: {
              metadata: {
                description:
                  'Return only objects containing these metadata keys and values. (Metadata is arbitrary key-value pairs of data that you can associate with an object.)',
                type: 'EntityMetadata',
              },
              groupID: {
                description:
                  'Return only threads [belonging to this group](/reference/permissions).',
                type: 'string',
              },
              location: {
                description:
                  'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                anyOf: [
                  { type: 'Location' },
                  {
                    type: 'LocationFilterOptions',
                    properties: {
                      value: {
                        description:
                          'The [Location](/reference/location) of the threads.',
                        type: 'Location',
                      },
                      partialMatch: {
                        description:
                          'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                        type: 'boolean',
                      },
                    },
                    propertyOrder: ['value', 'partialMatch'],
                    required: ['value', 'partialMatch'],
                  },
                ],
              },
              resolvedStatus: {
                description:
                  'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                type: 'string',
                enum: ['any', 'resolved', 'unresolved'],
              },
              firstMessageTimestamp: {
                description:
                  'Return only threads with a "first message timestamp" within this range. The "first message timestamp" of a thread is the timestamp when the first message in the thread was created. (This is typically when the thread was created.)',
                type: 'TimestampRange',
                properties: {
                  from: {
                    description:
                      "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                    type: 'Date',
                  },
                  to: {
                    description:
                      "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                    type: 'Date',
                  },
                },
                propertyOrder: ['from', 'to'],
                required: [],
              },
              mostRecentMessageTimestamp: {
                description:
                  'Return only threads with a "most recent message timestamp" within this range. The "most recent message timestamp" of a thread is the timestamp when the most recent message in the thread was created or updated. (This is typically when the thread was most recently replied to.)',
                type: 'TimestampRange',
                properties: {
                  from: {
                    description:
                      "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                    type: 'Date',
                  },
                  to: {
                    description:
                      "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                    type: 'Date',
                  },
                },
                propertyOrder: ['from', 'to'],
                required: [],
              },
            },
            propertyOrder: [
              'metadata',
              'groupID',
              'location',
              'resolvedStatus',
              'firstMessageTimestamp',
              'mostRecentMessageTimestamp',
            ],
            required: [],
            description:
              'Threads will be matched against the filters specified. This is a partial match, which means any keys other than the ones you specify are ignored when checking for a match. Please note that because this is a query parameter in a REST API, this JSON object must be URI encoded before being sent.',
          },
          limit: {
            type: 'number',
            description: 'Number of threads to return. Defaults to 1000.',
          },
          token: {
            type: 'string',
            description:
              'Pagination token. This is returned in the `pagination` object of a previous response.',
          },
        },
        propertyOrder: ['filter', 'limit', 'token'],
        required: [],
      },
    },
    ServerThreadSeenUser: {
      name: 'ServerThreadSeenUser',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          userID: {
            type: 'string',
            description: 'ID of the user that has seen/not seen the thread.',
          },
          seen: {
            type: 'boolean',
            description: 'Whether the user has seen the thread or not.',
          },
        },
        propertyOrder: ['userID', 'seen'],
        required: ['userID', 'seen'],
      },
    },
    ClientUserData: {
      name: 'ClientUserData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: 'string',
            description: "The user's ID.  This is unique within a project.",
          },
          name: { type: ['null', 'string'], description: "The user's name." },
          shortName: {
            type: ['null', 'string'],
            description:
              "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
          },
          displayName: {
            type: 'string',
            description:
              'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
          },
          secondaryDisplayName: {
            type: 'string',
            description:
              'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
          },
          profilePictureURL: {
            type: ['null', 'string'],
            description: "A URL to the user's profile picture.",
          },
          metadata: {
            type: 'EntityMetadata',
            description: 'Any metadata that has been set for the user.',
          },
        },
        propertyOrder: [
          'id',
          'name',
          'shortName',
          'displayName',
          'secondaryDisplayName',
          'profilePictureURL',
          'metadata',
        ],
        required: [
          'id',
          'name',
          'shortName',
          'displayName',
          'secondaryDisplayName',
          'profilePictureURL',
          'metadata',
        ],
      },
    },
    ViewerUserData: {
      name: 'ViewerUserData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          groupID: {
            type: ['null', 'string'],
            description:
              'The identifier for the group that the current user is using (i.e., the group specified in the access token). Null if and only if no group was specified in the access token.',
          },
          notificationPreferences: {
            type: 'object',
            properties: {
              sendViaSlack: { type: 'boolean' },
              sendViaEmail: { type: 'boolean' },
            },
            propertyOrder: ['sendViaSlack', 'sendViaEmail'],
            required: ['sendViaSlack', 'sendViaEmail'],
          },
          isSlackConnected: {
            type: 'boolean',
            description: 'If the user has connected to a Slack user',
          },
          groupIsSlackConnected: {
            type: 'boolean',
            description: 'If the group is connected to a Slack workspace',
          },
          groups: {
            type: 'string[]',
            items: { type: 'string' },
            description: 'The group ids the user is currently a member of.',
          },
          id: {
            type: 'string',
            description: "The user's ID.  This is unique within a project.",
          },
          name: { type: ['null', 'string'], description: "The user's name." },
          shortName: {
            type: ['null', 'string'],
            description:
              "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
          },
          displayName: {
            type: 'string',
            description:
              'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
          },
          secondaryDisplayName: {
            type: 'string',
            description:
              'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
          },
          profilePictureURL: {
            type: ['null', 'string'],
            description: "A URL to the user's profile picture.",
          },
          metadata: {
            type: 'EntityMetadata',
            description: 'Any metadata that has been set for the user.',
          },
        },
        propertyOrder: [
          'groupID',
          'notificationPreferences',
          'isSlackConnected',
          'groupIsSlackConnected',
          'groups',
          'id',
          'name',
          'shortName',
          'displayName',
          'secondaryDisplayName',
          'profilePictureURL',
          'metadata',
        ],
        required: [
          'groupID',
          'notificationPreferences',
          'isSlackConnected',
          'groupIsSlackConnected',
          'groups',
          'id',
          'name',
          'shortName',
          'displayName',
          'secondaryDisplayName',
          'profilePictureURL',
          'metadata',
        ],
      },
    },
    OrgMembersData: {
      name: 'OrgMembersData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
          orgMembers: {
            type: 'ClientUserData[]',
            items: {
              type: 'ClientUserData',
              properties: {
                id: {
                  description:
                    "The user's ID.  This is unique within a project.",
                  type: 'string',
                },
                name: {
                  description: "The user's name.",
                  type: ['null', 'string'],
                },
                shortName: {
                  description:
                    "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                  type: ['null', 'string'],
                },
                displayName: {
                  description:
                    'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                  type: 'string',
                },
                secondaryDisplayName: {
                  description:
                    'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                  type: 'string',
                },
                profilePictureURL: {
                  description: "A URL to the user's profile picture.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description: 'Any metadata that has been set for the user.',
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
              required: [
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
            },
          },
        },
        propertyOrder: ['loading', 'fetchMore', 'hasMore', 'orgMembers'],
        required: ['loading', 'fetchMore', 'hasMore', 'orgMembers'],
      },
    },
    ObserveOrgMembersOptions: {
      name: 'ObserveOrgMembersOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { organizationID: { type: 'string' } },
        propertyOrder: ['organizationID'],
        required: [],
      },
    },
    GroupMembersData: {
      name: 'GroupMembersData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          loading: {
            type: 'boolean',
            description:
              'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
          },
          fetchMore: {
            type: 'FetchMoreCallback',
            description:
              "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
          },
          hasMore: {
            type: 'boolean',
            description:
              "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
          },
          groupMembers: {
            type: 'ClientUserData[]',
            items: {
              type: 'ClientUserData',
              properties: {
                id: {
                  description:
                    "The user's ID.  This is unique within a project.",
                  type: 'string',
                },
                name: {
                  description: "The user's name.",
                  type: ['null', 'string'],
                },
                shortName: {
                  description:
                    "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                  type: ['null', 'string'],
                },
                displayName: {
                  description:
                    'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                  type: 'string',
                },
                secondaryDisplayName: {
                  description:
                    'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                  type: 'string',
                },
                profilePictureURL: {
                  description: "A URL to the user's profile picture.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description: 'Any metadata that has been set for the user.',
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
              required: [
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
            },
          },
        },
        propertyOrder: ['loading', 'fetchMore', 'hasMore', 'groupMembers'],
        required: ['loading', 'fetchMore', 'hasMore', 'groupMembers'],
      },
    },
    ObserveGroupMembersOptions: {
      name: 'ObserveGroupMembersOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          groupID: {
            type: 'string',
            description:
              'The group to search for.  The viewer must be a member of the group in order to receive its data.',
          },
        },
        propertyOrder: ['groupID'],
        required: [],
      },
    },
    NotificationPreferences: {
      name: 'NotificationPreferences',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          sendViaSlack: {
            type: 'boolean',
            description: 'Whether notifications should be sent via slack.',
          },
          sendViaEmail: {
            type: 'boolean',
            description: 'Whether notifications should be sent via email.',
          },
        },
        propertyOrder: ['sendViaSlack', 'sendViaEmail'],
        required: ['sendViaSlack', 'sendViaEmail'],
      },
    },
    ConnectToSlackOptions: {
      name: 'ConnectToSlackOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          onCompleteOAuth: {
            type: '(success: boolean) => void',
            description:
              'This callback will be called once the user has finished/cancelled the oauth process. If users interrupt the OAuth process by closing the popup window, this callback will not run. The argument passed to the callback is a boolean which states if the user has successfully connected Slack.',
          },
          groupID: {
            type: 'string',
            description:
              'The group the user should connect to Slack in.  The viewer must be a member of the group in order for the connection flow to trigger.',
          },
        },
        propertyOrder: ['onCompleteOAuth', 'groupID'],
        required: [],
      },
    },
    DisconnectSlackWorkspaceOptions: {
      name: 'DisconnectSlackWorkspaceOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          onDisconnect: {
            type: '(success: boolean) => void',
            description:
              'The argument passed to the callback will tell you whether the user has successfully disconnected.',
          },
          groupID: {
            type: 'string',
            description:
              'The group the user will disconnect the Slack workspace from.  The viewer must be a member of the group in order for the disconnection flow to trigger.',
          },
        },
        propertyOrder: ['onDisconnect', 'groupID'],
        required: [],
      },
    },
    SearchUsersSortByLocation: {
      name: 'SearchUsersSortByLocation',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: '"location"' },
          location: { type: 'Location' },
        },
        propertyOrder: ['type', 'location'],
        required: ['type', 'location'],
      },
    },
    SearchUsersSortBy: {
      name: 'SearchUsersSortBy',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: { type: '"location"' },
          location: { type: 'Location' },
        },
        propertyOrder: ['type', 'location'],
        required: ['type', 'location'],
      },
    },
    SearchUsersOptions: {
      name: 'SearchUsersOptions',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          searchQuery: {
            type: 'string',
            description: "The string to match the start of a user's name.",
          },
          groupID: {
            type: 'string',
            description:
              'The group to search within. The viewer must be a member of the group in order to receive its data.  \n\nIf unset, tries to read one from the client auth token.',
          },
          sortBy: {
            type: 'SearchUsersSortByLocation',
            properties: {
              type: { type: '"location"' },
              location: { type: 'Location' },
            },
            propertyOrder: ['type', 'location'],
            required: ['type', 'location'],
            description:
              'Sort users in order of when they visited the location.',
          },
          sortDirection: {
            type: 'string',
            enum: ['ascending', 'descending'],
            description:
              'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which searched users are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n`ascending`: sort users who have not visited the location first in the list, followed by those who visited a long time ago, followed by those who visited recently.  \n\n`descending`: sort users who have recently visited the location first in the list, followed by those who visited a long time ago, followed by those who have not visited the location at all.  \n\nIf unset, defaults to `descending`.',
          },
        },
        propertyOrder: ['searchQuery', 'groupID', 'sortBy', 'sortDirection'],
        required: [],
      },
    },
    SearchUsersResult: {
      name: 'SearchUsersResult',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          users: {
            type: 'ClientUserData[]',
            items: {
              type: 'ClientUserData',
              properties: {
                id: {
                  description:
                    "The user's ID.  This is unique within a project.",
                  type: 'string',
                },
                name: {
                  description: "The user's name.",
                  type: ['null', 'string'],
                },
                shortName: {
                  description:
                    "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                  type: ['null', 'string'],
                },
                displayName: {
                  description:
                    'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                  type: 'string',
                },
                secondaryDisplayName: {
                  description:
                    'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                  type: 'string',
                },
                profilePictureURL: {
                  description: "A URL to the user's profile picture.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description: 'Any metadata that has been set for the user.',
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
              required: [
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
            },
          },
        },
        propertyOrder: ['users'],
        required: ['users'],
      },
    },
    ICordUserSDK: {
      name: 'ICordUserSDK',
      methods: {
        methodOrder: [
          'setNotificationPreferences',
          'observeUserData',
          'observeViewerData',
          'observeGroupMembers',
          'connectToSlack',
          'disconnectSlackWorkspace',
          'searchUsers',
        ],
        required: [
          'setNotificationPreferences',
          'observeUserData',
          'observeViewerData',
          'observeGroupMembers',
          'connectToSlack',
          'disconnectSlackWorkspace',
          'searchUsers',
        ],
        methods: {
          setNotificationPreferences: {
            name: 'setNotificationPreferences',
            summary:
              'This method allows you to set notification preferences for the current viewer.',
            examples: {
              Overview:
                'window.CordSDK.user.setNotificationPreferences({ sendViaSlack: true, sendViaEmail: true});',
            },
            parameters: {
              propertyOrder: ['preferences'],
              required: ['preferences'],
              properties: {
                preferences: {
                  description:
                    'An object with two optional properties, `sendViaSlack` and `sendViaEmail`, to specify the new notification preferences for the viewer.',
                  type: 'Partial<NotificationPreferences>',
                  properties: {
                    sendViaSlack: {
                      description:
                        'Whether notifications should be sent via slack.',
                      type: 'boolean',
                    },
                    sendViaEmail: {
                      description:
                        'Whether notifications should be sent via email.',
                      type: 'boolean',
                    },
                  },
                  propertyOrder: ['sendViaSlack', 'sendViaEmail'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<true>',
            },
          },
          observeUserData: {
            overloaded: true,
            overloads: [
              {
                name: 'observeUserData',
                summary:
                  'This method allows you to observe data about a user, including live updates.',
                examples: {
                  Overview:
                    'const ref = window.CordSDK.user.observeUserData(userID, callback);\nwindow.CordSDK.user.unobserveUserData(ref);',
                  Usage:
                    'const ref = window.CordSDK.user.observeUserData(\n  \'user-123\',\n  (data) => {\n    // Received an update!\n    console.log("User name", data.name);\n    console.log("User short name", data.shortName);\n    console.log("User profile picture URL", data.profilePictureURL);\n  }\n);',
                },
                parameters: {
                  propertyOrder: ['userID', 'callback'],
                  required: ['userID', 'callback'],
                  properties: {
                    userID: {
                      description: 'The user to fetch data for.',
                      type: 'string',
                    },
                    callback: {
                      description:
                        'This callback will be called once with the current data, and then again every time the data changes.  The argument passed to the callback is an object which will contain the fields described under "Available Data" above.  If there\'s no user with that ID, the callback will be called with `null`.',
                      type: 'SingleUserUpdateCallback',
                    },
                  },
                },
                returns: {
                  description:
                    'A reference number which can be passed to `unobserveUserData` to stop observing user data.',
                  type: 'number',
                },
              },
              {
                name: 'observeUserData',
                summary:
                  'This method allows you to observe data about multiple users, including live updates.',
                examples: {
                  Overview:
                    'const ref = window.CordSDK.user.observeUserData(userIDs, callback);\nwindow.CordSDK.user.unobserveUserData(ref);',
                  Usage:
                    "const ref = window.CordSDK.user.observeUserData(\n  ['user-123', 'user-456'],\n  (data) => {\n    // Received an update!\n    console.log(\"User-123 name\", data['user-123']?.name);\n    console.log(\"User-456 name\", data['user-456']?.name);\n  }\n);",
                },
                parameters: {
                  propertyOrder: ['userIDs', 'callback'],
                  required: ['userIDs', 'callback'],
                  properties: {
                    userIDs: {
                      description: 'The list of user IDs to fetch data for.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    callback: {
                      description:
                        'This callback will be called once with the current data, and then again every time the data changes.  The argument passed to the callback is an object with a property for each requested user ID.  If the property is missing, the data for that user has not yet been loaded; if there\'s no user with that ID, it will be `null`; and otherwise it will be an object which will contain the fields described under "Available Data" above.',
                      type: 'MultipleUserUpdateCallback',
                    },
                  },
                },
                returns: {
                  description:
                    'A reference number which can be passed to `unobserveUserData` to stop observing user data.',
                  type: 'number',
                },
              },
            ],
          },
          observeViewerData: {
            name: 'observeViewerData',
            summary:
              'This method allows you to observe data about the logged-in user, including live updates.',
            examples: {
              Overview:
                'const ref = window.CordSDK.user.observeViewerData(\n  (data) => {\n    // Received an update!\n    console.log("User name", data.name);\n    console.log("User short name", data.shortName);\n    console.log("User profile picture URL", data.profilePictureURL);\n    console.log("Group ID", data.groupID);\n  }\n);',
            },
            parameters: {
              propertyOrder: ['callback'],
              required: ['callback'],
              properties: {
                callback: {
                  description:
                    'This callback will be called once with the current data, and then again every time the data changes.  The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'ViewerUserUpdateCallback',
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveViewerData` to stop observing the data.',
              type: 'number',
            },
          },
          observeGroupMembers: {
            name: 'observeGroupMembers',
            summary:
              'This method allows you to observe the members of a group the current user is a member of - either the current group the viewer is logged into, or, if specified as an option, another group the viewer is a member of.',
            examples: {
              Overview:
                "const ref = window.CordSDK.user.observeGroupMembers(\n  ({ groupMembers, loading, hasMore, fetchMore }) => {\n    console.log('Got a group members update:');\n    if (loading) {\n      console.log('Loading...');\n    }\n    groupMembers.forEach((groupMember) =>\n      console.log(`Group member ${groupMember.id} is called ${groupMember.name}!`),\n    );\n    if (!loading && hasMore && groupMembers.length < 25) {\n      // Get the first 25 group members, 10 at a time.\n      fetchMore(10);\n    }\n  },\n  {groupID: 'group123'}\n);",
            },
            parameters: {
              propertyOrder: ['callback', 'options'],
              required: ['callback'],
              properties: {
                callback: {
                  description:
                    'This callback will be called once with the current data, and then again every time the data changes.  The argument passed to the callback is an object which will contain the fields described under "Available Data" above.',
                  type: 'GroupMembersDataCallback',
                },
                options: {
                  description: 'An object of filters.',
                  type: 'ObserveGroupMembersOptions',
                  properties: {
                    groupID: {
                      description:
                        'The group to search for.  The viewer must be a member of the group in order to receive its data.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['groupID'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A reference number which can be passed to `unobserveGroupMembers` to stop observing the data.',
              type: 'number',
            },
          },
          connectToSlack: {
            overloaded: true,
            overloads: [
              {
                name: 'connectToSlack',
                summary:
                  "Calling this method will trigger a popup window to appear containing a flow for the user to link their Cord user to a Slack user. Completion of the flow will additionally connect the user's Slack workspace to their Cord group if that Cord group is not already connected to a Slack workspace. Calling this method will not do anything if the Cord user is already linked to a Slack user.",
                examples: {
                  Overview:
                    "window.CordSDK.user.connectToSlack(\n   (success) => console.log('Has user successfully signed into Slack', success)\n);",
                },
                parameters: {
                  propertyOrder: ['callback'],
                  required: ['callback'],
                  properties: { callback: { type: 'ConnectToSlackCallback' } },
                },
                returns: {
                  description:
                    'This function returns a promise that resolves to nothing when the Slack connection popup window opens.',
                  type: 'Promise<void>',
                },
              },
              {
                name: 'connectToSlack',
                summary:
                  "Calling this method will trigger a popup window to appear containing a flow for the user to link their Cord user to a Slack user. Completion of the flow will additionally connect the user's Slack workspace to their Cord group if that Cord group is not already connected to a Slack workspace. Calling this method will not do anything if the Cord user is already linked to a Slack user.",
                examples: {
                  Overview:
                    "window.CordSDK.user.connectToSlack({\n   onCompleteOAuth: (success) => console.log('Has user successfully signed into Slack: ', success)\n});",
                },
                parameters: {
                  propertyOrder: ['options'],
                  required: [],
                  properties: {
                    options: {
                      type: 'ConnectToSlackOptions',
                      properties: {
                        onCompleteOAuth: {
                          description:
                            'This callback will be called once the user has finished/cancelled the oauth process. If users interrupt the OAuth process by closing the popup window, this callback will not run. The argument passed to the callback is a boolean which states if the user has successfully connected Slack.',
                          type: '(success: boolean) => void',
                        },
                        groupID: {
                          description:
                            'The group the user should connect to Slack in.  The viewer must be a member of the group in order for the connection flow to trigger.',
                          type: 'string',
                        },
                      },
                      propertyOrder: ['onCompleteOAuth', 'groupID'],
                      required: [],
                    },
                  },
                },
                returns: {
                  description:
                    'This function returns a promise that resolves to nothing when the Slack connection popup window opens.',
                  type: 'Promise<void>',
                },
              },
            ],
          },
          disconnectSlackWorkspace: {
            name: 'disconnectSlackWorkspace',
            summary:
              'This method will disconnect the Slack workspace from the Cord group. This means all users who were connected to Slack will also be disconnected.',
            examples: {
              Overview:
                "window.CordSDK.user.disconnectSlackWorkspace({\n   onDisconnect: (success) => console.log('User successfully disconnected: ', success)\n});",
            },
            parameters: {
              propertyOrder: ['options'],
              required: [],
              properties: {
                options: {
                  type: 'DisconnectSlackWorkspaceOptions',
                  properties: {
                    onDisconnect: {
                      description:
                        'The argument passed to the callback will tell you whether the user has successfully disconnected.',
                      type: '(success: boolean) => void',
                    },
                    groupID: {
                      description:
                        'The group the user will disconnect the Slack workspace from.  The viewer must be a member of the group in order for the disconnection flow to trigger.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['onDisconnect', 'groupID'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to `true` if the operation succeeded or rejects if it failed.',
              type: 'Promise<boolean>',
            },
          },
          searchUsers: {
            name: 'searchUsers',
            summary:
              'This method allows searching for users with various options. Using the `searchQuery` will filter users by what their name start with.',
            examples: {
              Overview:
                "// Will return a list of users with names beginning with 'al'\nawait window.CordSDK.user.searchUsers({ searchQuery: 'al', groupID: 'my-group-id'});",
            },
            parameters: {
              propertyOrder: ['options'],
              required: [],
              properties: {
                options: {
                  type: 'SearchUsersOptions',
                  properties: {
                    searchQuery: {
                      description:
                        "The string to match the start of a user's name.",
                      type: 'string',
                    },
                    groupID: {
                      description:
                        'The group to search within. The viewer must be a member of the group in order to receive its data.  \n\nIf unset, tries to read one from the client auth token.',
                      type: 'string',
                    },
                    sortBy: {
                      description:
                        'Sort users in order of when they visited the location.',
                      type: 'SearchUsersSortByLocation',
                      properties: {
                        type: { type: '"location"' },
                        location: { type: 'Location' },
                      },
                      propertyOrder: ['type', 'location'],
                      required: ['type', 'location'],
                    },
                    sortDirection: {
                      description:
                        'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which searched users are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n`ascending`: sort users who have not visited the location first in the list, followed by those who visited a long time ago, followed by those who visited recently.  \n\n`descending`: sort users who have recently visited the location first in the list, followed by those who visited a long time ago, followed by those who have not visited the location at all.  \n\nIf unset, defaults to `descending`.',
                      type: 'string',
                      enum: ['ascending', 'descending'],
                    },
                  },
                  propertyOrder: [
                    'searchQuery',
                    'groupID',
                    'sortBy',
                    'sortDirection',
                  ],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'A promise that resolves to into an object with `users` which is a list of users in the group. This is a one time return.',
              type: 'Promise<SearchUsersResult>',
            },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    ServerUserData: {
      name: 'ServerUserData',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          id: {
            type: ['string', 'number'],
            description: 'Provided ID for the user',
          },
          email: { type: ['null', 'string'], description: 'Email address' },
          name: { type: ['null', 'string'], description: 'Full user name' },
          shortName: {
            type: ['null', 'string'],
            description:
              'Short user name. In most cases, this will be preferred over name when set.',
          },
          status: { type: 'string', enum: ['active', 'deleted'] },
          profilePictureURL: {
            type: ['null', 'string'],
            description:
              "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          createdTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description: 'Creation timestamp',
          },
        },
        propertyOrder: [
          'id',
          'email',
          'name',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
          'createdTimestamp',
        ],
        required: [
          'id',
          'email',
          'name',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
          'createdTimestamp',
        ],
      },
    },
    ServerUpdateUser: {
      name: 'ServerUpdateUser',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: { type: ['null', 'string'], description: 'Full user name' },
          email: { type: ['null', 'string'], description: 'Email address' },
          shortName: {
            type: ['null', 'string'],
            description:
              'Short user name. In most cases, this will be preferred over name when set.',
          },
          status: { type: 'string', enum: ['active', 'deleted'] },
          profilePictureURL: {
            type: ['null', 'string'],
            description:
              "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          addGroups: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              "A list of group IDs this user should be made a member of.  It is an error to specify a group that doesn't exist or one that is also being removed in the same call.  It is not an error to add a user to a group they're already a member of.",
          },
          removeGroups: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              "A list of group IDs this user should stop being a member of.  It is an error to specify a group that doesn't exist or one that is also being added in the same call.  It is not an error to remove a user from a group they are not a member of.",
          },
        },
        propertyOrder: [
          'name',
          'email',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
          'addGroups',
          'removeGroups',
        ],
        required: [],
      },
    },
    ServerCreateUser: {
      name: 'ServerCreateUser',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          name: { type: ['null', 'string'], description: 'Full user name' },
          email: { type: ['null', 'string'], description: 'Email address' },
          shortName: {
            type: ['null', 'string'],
            description:
              'Short user name. In most cases, this will be preferred over name when set.',
          },
          status: { type: 'string', enum: ['active', 'deleted'] },
          profilePictureURL: {
            type: ['null', 'string'],
            description:
              "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          id: {
            type: ['string', 'number'],
            description: 'Provided ID for the user',
          },
        },
        propertyOrder: [
          'name',
          'email',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
          'id',
        ],
        required: ['id'],
      },
    },
    ServerListUser: {
      name: 'ServerListUser',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          email: { type: ['null', 'string'] },
          name: { type: ['null', 'string'], description: 'Full user name' },
          id: {
            type: ['string', 'number'],
            description: 'Provided ID for the user',
          },
          createdTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description: 'Creation timestamp',
          },
          shortName: {
            type: ['null', 'string'],
            description:
              'Short user name. In most cases, this will be preferred over name when set.',
          },
          status: { type: 'string', enum: ['active', 'deleted'] },
          profilePictureURL: {
            type: ['null', 'string'],
            description:
              "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
        },
        propertyOrder: [
          'email',
          'name',
          'id',
          'createdTimestamp',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
        ],
        required: [
          'email',
          'name',
          'id',
          'createdTimestamp',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
        ],
      },
    },
    ServerGetUser: {
      name: 'ServerGetUser',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          groups: {
            type: 'ID[]',
            items: { type: ['string', 'number'] },
            description: 'List of groups the user is a member of.',
          },
          groupIDsWithLinkedSlackProfile: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list containing all the groups the user has explicity linked their Slack profile to. This list excludes groups connected to a Slack workspace where the user has not linked their Slack profile.',
          },
          email: { type: ['null', 'string'] },
          name: { type: ['null', 'string'], description: 'Full user name' },
          id: {
            type: ['string', 'number'],
            description: 'Provided ID for the user',
          },
          createdTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description: 'Creation timestamp',
          },
          shortName: {
            type: ['null', 'string'],
            description:
              'Short user name. In most cases, this will be preferred over name when set.',
          },
          status: { type: 'string', enum: ['active', 'deleted'] },
          profilePictureURL: {
            type: ['null', 'string'],
            description:
              "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
        },
        propertyOrder: [
          'groups',
          'groupIDsWithLinkedSlackProfile',
          'email',
          'name',
          'id',
          'createdTimestamp',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
        ],
        required: [
          'groups',
          'groupIDsWithLinkedSlackProfile',
          'email',
          'name',
          'id',
          'createdTimestamp',
          'shortName',
          'status',
          'profilePictureURL',
          'metadata',
        ],
      },
    },
    ServerListUsers: {
      name: 'ServerListUsers',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          users: {
            type: 'ServerListUser[]',
            items: {
              type: 'ServerListUser',
              properties: {
                email: { type: ['null', 'string'] },
                name: {
                  description: 'Full user name',
                  type: ['null', 'string'],
                },
                id: {
                  description: 'Provided ID for the user',
                  type: ['string', 'number'],
                },
                createdTimestamp: {
                  description: 'Creation timestamp',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                shortName: {
                  description:
                    'Short user name. In most cases, this will be preferred over name when set.',
                  type: ['null', 'string'],
                },
                status: { type: 'string', enum: ['active', 'deleted'] },
                profilePictureURL: {
                  description:
                    "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'email',
                'name',
                'id',
                'createdTimestamp',
                'shortName',
                'status',
                'profilePictureURL',
                'metadata',
              ],
              required: [
                'email',
                'name',
                'id',
                'createdTimestamp',
                'shortName',
                'status',
                'profilePictureURL',
                'metadata',
              ],
            },
          },
          pagination: {
            type: 'PaginationDetails',
            properties: {
              token: {
                description:
                  'The token to use to get the next page of results. If empty, there are no more results.',
                type: ['null', 'string'],
              },
              total: {
                description:
                  'Total number of results. Might be bigger than the number of results returned on the query. Useful to display a "total" counter.',
                type: 'number',
              },
            },
            propertyOrder: ['token', 'total'],
            required: ['token', 'total'],
          },
        },
        propertyOrder: ['users', 'pagination'],
        required: ['users', 'pagination'],
      },
    },
    ServerListUserParameters: {
      name: 'ServerListUserParameters',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          limit: {
            type: 'number',
            description:
              'Number of users to return. The default limit is set to 1000.',
          },
          token: {
            type: 'string',
            description:
              'Pagination token. This is returned in the `pagination` object of a previous response.',
          },
          filter: {
            type: 'Pick<FilterParameters, "metadata">',
            properties: {
              metadata: {
                description:
                  'Return only objects containing these metadata keys and values. (Metadata is arbitrary key-value pairs of data that you can associate with an object.)',
                type: 'EntityMetadata',
              },
            },
            propertyOrder: ['metadata'],
            required: [],
            description:
              'This is a JSON object with one optional entry.  Users will be matched against the filter specified. This is a partial match, which means any keys other than the ones you specify are ignored when checking for a match. Please note that because this is a query parameter in a REST API, this JSON object must be URI encoded before being sent.',
          },
        },
        propertyOrder: ['limit', 'token', 'filter'],
        required: [],
      },
    },
    ServerDeleteUser: {
      name: 'ServerDeleteUser',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          permanently_delete: {
            type: 'boolean',
            description: 'The user will be deleted only if this value is true.',
          },
        },
        propertyOrder: ['permanently_delete'],
        required: ['permanently_delete'],
      },
    },
    WebhookPayloads: {
      name: 'WebhookPayloads',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          'thread-message-added': {
            type: 'ThreadMessageAddedWebhookPayload',
            properties: {
              threadID: { type: 'string' },
              messageID: { type: 'string' },
              groupID: { type: 'string' },
              projectID: { type: 'string' },
              author: {
                type: 'ClientUserData',
                properties: {
                  id: {
                    description:
                      "The user's ID.  This is unique within a project.",
                    type: 'string',
                  },
                  name: {
                    description: "The user's name.",
                    type: ['null', 'string'],
                  },
                  shortName: {
                    description:
                      "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                    type: ['null', 'string'],
                  },
                  displayName: {
                    description:
                      'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                    type: 'string',
                  },
                  secondaryDisplayName: {
                    description:
                      'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                    type: 'string',
                  },
                  profilePictureURL: {
                    description: "A URL to the user's profile picture.",
                    type: ['null', 'string'],
                  },
                  metadata: {
                    description: 'Any metadata that has been set for the user.',
                    type: 'EntityMetadata',
                  },
                },
                propertyOrder: [
                  'id',
                  'name',
                  'shortName',
                  'displayName',
                  'secondaryDisplayName',
                  'profilePictureURL',
                  'metadata',
                ],
                required: [
                  'id',
                  'name',
                  'shortName',
                  'displayName',
                  'secondaryDisplayName',
                  'profilePictureURL',
                  'metadata',
                ],
              },
              content: {
                type: 'MessageContent',
                items: {
                  anyOf: [
                    {
                      type: 'MessageAssigneeNode',
                      properties: {
                        type: { type: 'MessageNodeType.ASSIGNEE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'indent'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageCodeNode',
                      properties: {
                        type: { type: 'MessageNodeType.CODE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageLinkNode',
                      properties: {
                        type: { type: 'MessageNodeType.LINK' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        url: { type: 'string' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'url'],
                      required: ['type', 'children', 'url'],
                    },
                    {
                      type: 'MessageMentionNode',
                      properties: {
                        type: { type: 'MessageNodeType.MENTION' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageNumberBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.NUMBER_BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        bulletNumber: { type: 'number' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'bulletNumber',
                        'indent',
                      ],
                      required: ['type', 'children', 'bulletNumber'],
                    },
                    {
                      type: 'MessageParagraphNode',
                      properties: {
                        type: { type: 'MessageNodeType.PARAGRAPH' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageQuoteNode',
                      properties: {
                        type: { type: 'MessageNodeType.QUOTE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageTextNode',
                      properties: {
                        type: { type: 'undefined' },
                        class: { type: 'string' },
                        text: { type: 'string' },
                        bold: { type: 'boolean' },
                        italic: { type: 'boolean' },
                        underline: { type: 'boolean' },
                        code: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'text',
                        'bold',
                        'italic',
                        'underline',
                        'code',
                      ],
                      required: ['text'],
                    },
                    {
                      type: 'MessageTodoNode',
                      properties: {
                        type: { type: 'MessageNodeType.TODO' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        todoID: { type: 'string' },
                        done: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'todoID',
                        'done',
                      ],
                      required: ['type', 'children', 'todoID', 'done'],
                    },
                    {
                      type: 'MessageMarkdownNode',
                      properties: {
                        type: { type: 'MessageNodeType.MARKDOWN' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                  ],
                },
              },
              plaintext: { type: 'string' },
              url: { type: 'string' },
              messageType: {
                type: 'string',
                enum: ['action_message', 'user_message'],
              },
              metadata: { type: 'EntityMetadata' },
              message: {
                type: 'WebhookMessage',
                properties: {
                  author: {
                    type: 'ClientUserData',
                    properties: {
                      id: {
                        description:
                          "The user's ID.  This is unique within a project.",
                        type: 'string',
                      },
                      name: {
                        description: "The user's name.",
                        type: ['null', 'string'],
                      },
                      shortName: {
                        description:
                          "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                        type: ['null', 'string'],
                      },
                      displayName: {
                        description:
                          'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                        type: 'string',
                      },
                      secondaryDisplayName: {
                        description:
                          'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                        type: 'string',
                      },
                      profilePictureURL: {
                        description: "A URL to the user's profile picture.",
                        type: ['null', 'string'],
                      },
                      metadata: {
                        description:
                          'Any metadata that has been set for the user.',
                        type: 'EntityMetadata',
                      },
                    },
                    propertyOrder: [
                      'id',
                      'name',
                      'shortName',
                      'displayName',
                      'secondaryDisplayName',
                      'profilePictureURL',
                      'metadata',
                    ],
                    required: [
                      'id',
                      'name',
                      'shortName',
                      'displayName',
                      'secondaryDisplayName',
                      'profilePictureURL',
                      'metadata',
                    ],
                  },
                  id: {
                    description:
                      'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                    type: 'string',
                  },
                  authorID: {
                    description: 'The ID for the user that sent the message.',
                    type: 'string',
                  },
                  groupID: {
                    description:
                      'The ID for the group this message belongs to.',
                    type: 'string',
                  },
                  threadID: {
                    description:
                      'The ID for the thread this message is part of.',
                    type: 'string',
                  },
                  content: {
                    description: 'The content of the message.',
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: {
                    description:
                      'A plaintext version of the structured message content.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                    type: ['null', 'string'],
                  },
                  createdTimestamp: {
                    description:
                      'The timestamp when this message was created.  The default value is the current time.',
                    type: 'Date',
                  },
                  deletedTimestamp: {
                    description:
                      'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  updatedTimestamp: {
                    description:
                      'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  iconURL: {
                    description:
                      'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                    type: ['null', 'string'],
                  },
                  translationKey: {
                    description:
                      'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                    type: ['null', 'string'],
                  },
                  type: {
                    description:
                      'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'A optional space separated list of classnames to add to the message.',
                    type: ['null', 'string'],
                  },
                  attachments: {
                    description: 'The items attached to this message.',
                    type: 'MessageAttachment[]',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageFileAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `file` for file attachments.',
                              type: '"file"',
                            },
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                        {
                          type: 'MessageAnnotationAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `annotation` for annotation attachments.',
                              type: '"annotation"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the annotation, if any.',
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              ],
                            },
                            locationData: {
                              description:
                                'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                              type: ['null', 'string'],
                            },
                            customData: {
                              description:
                                "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'CustomAnnotationData',
                                  properties: {
                                    location: {
                                      description:
                                        'The custom location you produced for this annotation at annotation capture time.',
                                      type: 'Location',
                                    },
                                    coordsRelativeToTarget: {
                                      description:
                                        'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                      type: 'object',
                                      properties: {
                                        x: { type: 'number' },
                                        y: { type: 'number' },
                                      },
                                      propertyOrder: ['x', 'y'],
                                      required: ['x', 'y'],
                                    },
                                    label: {
                                      description:
                                        'Your custom user-visible label for the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                  required: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                },
                              ],
                            },
                            textContent: {
                              description:
                                'The text that was selected when creating the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                          required: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                        },
                        {
                          type: 'MessageScreenshotAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                              type: '"screenshot"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'screenshot'],
                          required: ['type', 'screenshot'],
                        },
                        {
                          type: 'MessageLinkPreviewAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `link_preview` for file link previews.',
                              type: '"link_preview"',
                            },
                            id: {
                              description:
                                'The ID of the link preview attachment.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The url from which the preview was generated.',
                              type: 'string',
                            },
                            imageURL: {
                              description:
                                'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                              type: ['null', 'string'],
                            },
                            title: {
                              description:
                                "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                              type: ['null', 'string'],
                            },
                            description: {
                              description:
                                'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                          required: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                        },
                      ],
                    },
                  },
                  reactions: {
                    description: 'The reactions to this message.',
                    type: 'Reaction[]',
                    items: {
                      type: 'Reaction',
                      properties: {
                        reaction: {
                          description: 'The emoji reaction.',
                          type: 'string',
                        },
                        userID: {
                          description:
                            'The ID of the user who reacted to the message.',
                          type: 'string',
                        },
                        timestamp: {
                          description:
                            'The timestamp of when the reaction was created.',
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['reaction', 'userID', 'timestamp'],
                      required: ['reaction', 'userID', 'timestamp'],
                    },
                  },
                  seenBy: {
                    description:
                      'A list of IDs of the users that have seen the message.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  skipLinkPreviews: {
                    description:
                      "If set, Cord won't analyze links in the message to generate previews.",
                    type: 'boolean',
                  },
                },
                propertyOrder: [
                  'author',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
                required: [
                  'author',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
              },
              thread: {
                type: 'CoreThreadData',
                properties: {
                  id: {
                    description: 'The ID for this thread.',
                    type: 'string',
                  },
                  groupID: {
                    description: 'The group ID this thread is in.',
                    type: 'string',
                  },
                  total: {
                    description:
                      'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  userMessages: {
                    description:
                      'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  actionMessages: {
                    description:
                      'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  deletedMessages: {
                    description:
                      'The number of deleted messages in this thread.',
                    type: 'number',
                  },
                  resolved: {
                    description:
                      'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                    type: 'boolean',
                  },
                  resolvedTimestamp: {
                    description:
                      'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  participants: {
                    description:
                      'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                    type: 'ThreadParticipant[]',
                    items: {
                      type: 'ThreadParticipant',
                      properties: {
                        lastSeenTimestamp: {
                          description:
                            'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        userID: {
                          description:
                            "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'lastSeenTimestamp',
                        'userID',
                        'displayName',
                      ],
                      required: ['lastSeenTimestamp', 'userID', 'displayName'],
                    },
                  },
                  subscribers: {
                    description:
                      'All of the users who are subscribed to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  repliers: {
                    description:
                      'All of the users who have replied to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  mentioned: {
                    description:
                      'All of the users who were mentioned in a message in this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  actionMessageRepliers: {
                    description:
                      "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  typing: {
                    description:
                      'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  name: {
                    description:
                      'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                    type: 'string',
                  },
                  location: {
                    description:
                      'The [location](/reference/location) of this thread.',
                    type: 'Location',
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'An optional space separated list of classnames to add to the thread.',
                    type: ['null', 'string'],
                  },
                },
                propertyOrder: [
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
                required: [
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
              },
              usersToNotify: {
                type: 'UsersToNotify[]',
                items: {
                  type: 'UsersToNotify',
                  properties: {
                    replyActions: {
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'NotificationReplyAction[]',
                          items: {
                            type: 'string',
                            enum: [
                              'mention',
                              'create-thread',
                              'assign-task',
                              'unassign-task',
                              'attach-file',
                            ],
                          },
                        },
                      ],
                    },
                    id: {
                      description:
                        "The user's ID.  This is unique within a project.",
                      type: 'string',
                    },
                    name: {
                      description: "The user's name.",
                      type: ['null', 'string'],
                    },
                    shortName: {
                      description:
                        "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                      type: 'string',
                    },
                    secondaryDisplayName: {
                      description:
                        'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                      type: 'string',
                    },
                    profilePictureURL: {
                      description: "A URL to the user's profile picture.",
                      type: ['null', 'string'],
                    },
                    metadata: {
                      description:
                        'Any metadata that has been set for the user.',
                      type: 'EntityMetadata',
                    },
                  },
                  propertyOrder: [
                    'replyActions',
                    'id',
                    'name',
                    'shortName',
                    'displayName',
                    'secondaryDisplayName',
                    'profilePictureURL',
                    'metadata',
                  ],
                  required: [
                    'replyActions',
                    'id',
                    'name',
                    'shortName',
                    'displayName',
                    'secondaryDisplayName',
                    'profilePictureURL',
                    'metadata',
                  ],
                },
              },
            },
            propertyOrder: [
              'threadID',
              'messageID',
              'groupID',
              'projectID',
              'author',
              'content',
              'plaintext',
              'url',
              'messageType',
              'metadata',
              'message',
              'thread',
              'usersToNotify',
            ],
            required: [
              'threadID',
              'messageID',
              'groupID',
              'projectID',
              'author',
              'content',
              'plaintext',
              'url',
              'messageType',
              'metadata',
              'message',
              'thread',
              'usersToNotify',
            ],
          },
          'notification-created': {
            type: 'NotificationCreatedWebhookPayload',
            properties: {
              recipientUserID: { type: 'string' },
              id: {
                description:
                  'The [ID](/reference/identifiers) for this notification.',
                type: 'string',
              },
              senderUserIDs: {
                description:
                  'The [IDs](/reference/identifiers) of the user(s) who sent this notification. The Cord backend will sometimes aggregate multiple notifications together, causing them to have multiple senders. For example, if multiple people react to the same message, that will generate only one notification (but with multiple senders, one for each person who reacted).',
                type: 'string[]',
                items: { type: 'string' },
              },
              iconUrl: {
                description:
                  "The URL of an icon image for this notification, if one was specified when it was created. This will always be `null` for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
                type: ['null', 'string'],
              },
              header: {
                description:
                  'The "header" or "text" of the notification. This will represent text like "Alice replied to your thread." or similar. For notifications you create via the REST API, this will be based upon the `template` parameter, see below.',
                type: 'NotificationHeaderNode[]',
                items: {
                  anyOf: [
                    {
                      type: 'NotificationTextHeader',
                      properties: {
                        type: {
                          description:
                            'Indicator that this is a string header node.',
                          type: '"text"',
                        },
                        text: {
                          description:
                            'The text to display. This text may start and/or end with whitespace, which should typically *not* be trimmed. For example, in order to display the notification `"Alice replied to your thread."`, this would typically be composed of two nodes -- a user node for Alice, and then a text node containing `" replied to your thread."`, with a meaningful space at the front, to separate this node from Alice\'s name.',
                          type: 'string',
                        },
                        bold: {
                          description:
                            'Whether the text should be formatted in bold.',
                          type: 'boolean',
                        },
                      },
                      propertyOrder: ['type', 'text', 'bold'],
                      required: ['type', 'text', 'bold'],
                    },
                    {
                      type: 'NotificationUserHeader',
                      properties: {
                        type: {
                          description:
                            'Indicator that this is a user reference header node.',
                          type: '"user"',
                        },
                        user: {
                          description: 'The indicated user.',
                          type: 'ClientUserData',
                          properties: {
                            id: {
                              description:
                                "The user's ID.  This is unique within a project.",
                              type: 'string',
                            },
                            name: {
                              description: "The user's name.",
                              type: ['null', 'string'],
                            },
                            shortName: {
                              description:
                                "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                              type: ['null', 'string'],
                            },
                            displayName: {
                              description:
                                'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                              type: 'string',
                            },
                            secondaryDisplayName: {
                              description:
                                'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                              type: 'string',
                            },
                            profilePictureURL: {
                              description:
                                "A URL to the user's profile picture.",
                              type: ['null', 'string'],
                            },
                            metadata: {
                              description:
                                'Any metadata that has been set for the user.',
                              type: 'EntityMetadata',
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'shortName',
                            'displayName',
                            'secondaryDisplayName',
                            'profilePictureURL',
                            'metadata',
                          ],
                          required: [
                            'id',
                            'name',
                            'shortName',
                            'displayName',
                            'secondaryDisplayName',
                            'profilePictureURL',
                            'metadata',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'user'],
                      required: ['type', 'user'],
                    },
                  ],
                },
              },
              headerTranslation: {
                description:
                  'A translation that can be used to translate the header of the notification. All Cord-created notifications will have a translation, but this may be null for notifications you [create through the REST API](/rest-apis/notifications#Create-a-notification). See [the translations documentation](/customization/translations) for more information.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'Translation',
                    properties: {
                      key: {
                        description:
                          'A translation key that is used to look up the proper translation.  See [the translations documentation](/customization/translations) for more information on how translations work.',
                        type: 'string',
                      },
                      parameters: {
                        description:
                          "The parameters to supply to the translation.  This will always be set, but may be an empty object if the translation doesn't take any parameters.",
                        type: 'TranslationParameters',
                      },
                    },
                    propertyOrder: ['key', 'parameters'],
                    required: ['key', 'parameters'],
                  },
                ],
              },
              attachment: {
                description:
                  'Additional context attached to the notification. For example, if this notification is about a new reaction on a message, the attachment will specify what message received that new reaction.  \n\nA renderer will typically check the `type` field of the attachment and render that attachment type below the `header`.  \n\nWe may include other types of attachments in the future and therefore recommend having a default case when handling the attachment types.',
                anyOf: [
                  { type: 'null' },
                  {
                    type: 'NotificationURLAttachment',
                    properties: {
                      type: {
                        description: 'Indicator that this is a URL attachment.',
                        type: '"url"',
                      },
                      url: {
                        description:
                          'The URL this attachment points to. This would typically be the URL to send the browser to if this notification is clicked.',
                        type: 'string',
                      },
                    },
                    propertyOrder: ['type', 'url'],
                    required: ['type', 'url'],
                  },
                  {
                    type: 'NotificationMessageAttachment',
                    properties: {
                      type: {
                        description:
                          'Indicator that this is a message attachment.',
                        type: '"message"',
                      },
                      message: {
                        description: 'The relevant message.',
                        type: 'CoreMessageData',
                        properties: {
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    },
                    propertyOrder: ['type', 'message'],
                    required: ['type', 'message'],
                  },
                  {
                    type: 'NotificationThreadAttachment',
                    properties: {
                      type: {
                        description:
                          'Indicator that this is a thread attachment.',
                        type: '"thread"',
                      },
                      thread: {
                        description: 'The relevant thread.',
                        type: 'CoreThreadData',
                        properties: {
                          id: {
                            description: 'The ID for this thread.',
                            type: 'string',
                          },
                          groupID: {
                            description: 'The group ID this thread is in.',
                            type: 'string',
                          },
                          total: {
                            description:
                              'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                            type: 'number',
                          },
                          userMessages: {
                            description:
                              'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                            type: 'number',
                          },
                          actionMessages: {
                            description:
                              'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                            type: 'number',
                          },
                          deletedMessages: {
                            description:
                              'The number of deleted messages in this thread.',
                            type: 'number',
                          },
                          resolved: {
                            description:
                              'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                            type: 'boolean',
                          },
                          resolvedTimestamp: {
                            description:
                              'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          participants: {
                            description:
                              'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                            type: 'ThreadParticipant[]',
                            items: {
                              type: 'ThreadParticipant',
                              properties: {
                                lastSeenTimestamp: {
                                  description:
                                    'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                                },
                                userID: {
                                  description:
                                    "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                  type: ['null', 'string'],
                                },
                                displayName: {
                                  description:
                                    "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'lastSeenTimestamp',
                                'userID',
                                'displayName',
                              ],
                              required: [
                                'lastSeenTimestamp',
                                'userID',
                                'displayName',
                              ],
                            },
                          },
                          subscribers: {
                            description:
                              'All of the users who are subscribed to this thread.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          repliers: {
                            description:
                              'All of the users who have replied to this thread.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          mentioned: {
                            description:
                              'All of the users who were mentioned in a message in this thread.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          actionMessageRepliers: {
                            description:
                              "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          typing: {
                            description:
                              'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          name: {
                            description:
                              'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                            type: 'string',
                          },
                          location: {
                            description:
                              'The [location](/reference/location) of this thread.',
                            type: 'Location',
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'An optional space separated list of classnames to add to the thread.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'id',
                          'groupID',
                          'total',
                          'userMessages',
                          'actionMessages',
                          'deletedMessages',
                          'resolved',
                          'resolvedTimestamp',
                          'participants',
                          'subscribers',
                          'repliers',
                          'mentioned',
                          'actionMessageRepliers',
                          'typing',
                          'name',
                          'url',
                          'location',
                          'metadata',
                          'extraClassnames',
                        ],
                        required: [
                          'id',
                          'groupID',
                          'total',
                          'userMessages',
                          'actionMessages',
                          'deletedMessages',
                          'resolved',
                          'resolvedTimestamp',
                          'participants',
                          'subscribers',
                          'repliers',
                          'mentioned',
                          'actionMessageRepliers',
                          'typing',
                          'name',
                          'url',
                          'location',
                          'metadata',
                          'extraClassnames',
                        ],
                      },
                    },
                    propertyOrder: ['type', 'thread'],
                    required: ['type', 'thread'],
                  },
                ],
              },
              readStatus: {
                description:
                  'Whether this notification has been read by the recipient yet.',
                type: 'string',
                enum: ['unread', 'read'],
              },
              timestamp: {
                description: 'The time this notification was sent.',
                type: 'Date',
              },
              extraClassnames: {
                description:
                  'A space separated list of classnames to add to the notification.',
                type: ['null', 'string'],
              },
              metadata: {
                description:
                  "An arbitrary JSON object specified when the notification was created. This will always be an empty object for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
                type: 'EntityMetadata',
              },
            },
            propertyOrder: [
              'recipientUserID',
              'id',
              'senderUserIDs',
              'iconUrl',
              'header',
              'headerTranslation',
              'attachment',
              'readStatus',
              'timestamp',
              'extraClassnames',
              'metadata',
            ],
            required: [
              'recipientUserID',
              'id',
              'senderUserIDs',
              'iconUrl',
              'header',
              'headerTranslation',
              'attachment',
              'readStatus',
              'timestamp',
              'extraClassnames',
              'metadata',
            ],
          },
          'url-verification': {
            type: 'URLVerificationWebhookPayload',
            properties: { message: { type: 'string' } },
            propertyOrder: ['message'],
            required: ['message'],
          },
        },
        propertyOrder: [
          'thread-message-added',
          'notification-created',
          'url-verification',
        ],
        required: [
          'thread-message-added',
          'notification-created',
          'url-verification',
        ],
      },
    },
    ThreadMessageAddedWebhookPayload: {
      name: 'ThreadMessageAddedWebhookPayload',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          threadID: { type: 'string' },
          messageID: { type: 'string' },
          groupID: { type: 'string' },
          projectID: { type: 'string' },
          author: {
            type: 'ClientUserData',
            properties: {
              id: {
                description: "The user's ID.  This is unique within a project.",
                type: 'string',
              },
              name: {
                description: "The user's name.",
                type: ['null', 'string'],
              },
              shortName: {
                description:
                  "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                type: ['null', 'string'],
              },
              displayName: {
                description:
                  'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                type: 'string',
              },
              secondaryDisplayName: {
                description:
                  'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                type: 'string',
              },
              profilePictureURL: {
                description: "A URL to the user's profile picture.",
                type: ['null', 'string'],
              },
              metadata: {
                description: 'Any metadata that has been set for the user.',
                type: 'EntityMetadata',
              },
            },
            propertyOrder: [
              'id',
              'name',
              'shortName',
              'displayName',
              'secondaryDisplayName',
              'profilePictureURL',
              'metadata',
            ],
            required: [
              'id',
              'name',
              'shortName',
              'displayName',
              'secondaryDisplayName',
              'profilePictureURL',
              'metadata',
            ],
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
          },
          plaintext: { type: 'string' },
          url: { type: 'string' },
          messageType: {
            type: 'string',
            enum: ['action_message', 'user_message'],
          },
          metadata: { type: 'EntityMetadata' },
          message: {
            type: 'WebhookMessage',
            properties: {
              author: {
                type: 'ClientUserData',
                properties: {
                  id: {
                    description:
                      "The user's ID.  This is unique within a project.",
                    type: 'string',
                  },
                  name: {
                    description: "The user's name.",
                    type: ['null', 'string'],
                  },
                  shortName: {
                    description:
                      "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                    type: ['null', 'string'],
                  },
                  displayName: {
                    description:
                      'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                    type: 'string',
                  },
                  secondaryDisplayName: {
                    description:
                      'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                    type: 'string',
                  },
                  profilePictureURL: {
                    description: "A URL to the user's profile picture.",
                    type: ['null', 'string'],
                  },
                  metadata: {
                    description: 'Any metadata that has been set for the user.',
                    type: 'EntityMetadata',
                  },
                },
                propertyOrder: [
                  'id',
                  'name',
                  'shortName',
                  'displayName',
                  'secondaryDisplayName',
                  'profilePictureURL',
                  'metadata',
                ],
                required: [
                  'id',
                  'name',
                  'shortName',
                  'displayName',
                  'secondaryDisplayName',
                  'profilePictureURL',
                  'metadata',
                ],
              },
              id: {
                description:
                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                type: 'string',
              },
              authorID: {
                description: 'The ID for the user that sent the message.',
                type: 'string',
              },
              groupID: {
                description: 'The ID for the group this message belongs to.',
                type: 'string',
              },
              threadID: {
                description: 'The ID for the thread this message is part of.',
                type: 'string',
              },
              content: {
                description: 'The content of the message.',
                type: 'MessageContent',
                items: {
                  anyOf: [
                    {
                      type: 'MessageAssigneeNode',
                      properties: {
                        type: { type: 'MessageNodeType.ASSIGNEE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'indent'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageCodeNode',
                      properties: {
                        type: { type: 'MessageNodeType.CODE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageLinkNode',
                      properties: {
                        type: { type: 'MessageNodeType.LINK' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        url: { type: 'string' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'url'],
                      required: ['type', 'children', 'url'],
                    },
                    {
                      type: 'MessageMentionNode',
                      properties: {
                        type: { type: 'MessageNodeType.MENTION' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageNumberBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.NUMBER_BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        bulletNumber: { type: 'number' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'bulletNumber',
                        'indent',
                      ],
                      required: ['type', 'children', 'bulletNumber'],
                    },
                    {
                      type: 'MessageParagraphNode',
                      properties: {
                        type: { type: 'MessageNodeType.PARAGRAPH' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageQuoteNode',
                      properties: {
                        type: { type: 'MessageNodeType.QUOTE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageTextNode',
                      properties: {
                        type: { type: 'undefined' },
                        class: { type: 'string' },
                        text: { type: 'string' },
                        bold: { type: 'boolean' },
                        italic: { type: 'boolean' },
                        underline: { type: 'boolean' },
                        code: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'text',
                        'bold',
                        'italic',
                        'underline',
                        'code',
                      ],
                      required: ['text'],
                    },
                    {
                      type: 'MessageTodoNode',
                      properties: {
                        type: { type: 'MessageNodeType.TODO' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        todoID: { type: 'string' },
                        done: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'todoID',
                        'done',
                      ],
                      required: ['type', 'children', 'todoID', 'done'],
                    },
                    {
                      type: 'MessageMarkdownNode',
                      properties: {
                        type: { type: 'MessageNodeType.MARKDOWN' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                  ],
                },
              },
              plaintext: {
                description:
                  'A plaintext version of the structured message content.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                type: ['null', 'string'],
              },
              createdTimestamp: {
                description:
                  'The timestamp when this message was created.  The default value is the current time.',
                type: 'Date',
              },
              deletedTimestamp: {
                description:
                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              updatedTimestamp: {
                description:
                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              iconURL: {
                description:
                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                type: ['null', 'string'],
              },
              translationKey: {
                description:
                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                type: ['null', 'string'],
              },
              type: {
                description:
                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                type: 'string',
                enum: ['action_message', 'user_message'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'A optional space separated list of classnames to add to the message.',
                type: ['null', 'string'],
              },
              attachments: {
                description: 'The items attached to this message.',
                type: 'MessageAttachment[]',
                items: {
                  anyOf: [
                    {
                      type: 'MessageFileAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `file` for file attachments.',
                          type: '"file"',
                        },
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                    {
                      type: 'MessageAnnotationAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                          type: '"annotation"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the annotation, if any.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          ],
                        },
                        locationData: {
                          description:
                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                          type: ['null', 'string'],
                        },
                        customData: {
                          description:
                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'CustomAnnotationData',
                              properties: {
                                location: {
                                  description:
                                    'The custom location you produced for this annotation at annotation capture time.',
                                  type: 'Location',
                                },
                                coordsRelativeToTarget: {
                                  description:
                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                  type: 'object',
                                  properties: {
                                    x: { type: 'number' },
                                    y: { type: 'number' },
                                  },
                                  propertyOrder: ['x', 'y'],
                                  required: ['x', 'y'],
                                },
                                label: {
                                  description:
                                    'Your custom user-visible label for the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                              required: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                            },
                          ],
                        },
                        textContent: {
                          description:
                            'The text that was selected when creating the annotation, if any.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                      required: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                    },
                    {
                      type: 'MessageScreenshotAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                          type: '"screenshot"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'screenshot'],
                      required: ['type', 'screenshot'],
                    },
                    {
                      type: 'MessageLinkPreviewAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `link_preview` for file link previews.',
                          type: '"link_preview"',
                        },
                        id: {
                          description: 'The ID of the link preview attachment.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The url from which the preview was generated.',
                          type: 'string',
                        },
                        imageURL: {
                          description:
                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                          type: ['null', 'string'],
                        },
                        title: {
                          description:
                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                          type: ['null', 'string'],
                        },
                        description: {
                          description:
                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                      required: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                    },
                  ],
                },
              },
              reactions: {
                description: 'The reactions to this message.',
                type: 'Reaction[]',
                items: {
                  type: 'Reaction',
                  properties: {
                    reaction: {
                      description: 'The emoji reaction.',
                      type: 'string',
                    },
                    userID: {
                      description:
                        'The ID of the user who reacted to the message.',
                      type: 'string',
                    },
                    timestamp: {
                      description:
                        'The timestamp of when the reaction was created.',
                      type: 'Date',
                    },
                  },
                  propertyOrder: ['reaction', 'userID', 'timestamp'],
                  required: ['reaction', 'userID', 'timestamp'],
                },
              },
              seenBy: {
                description:
                  'A list of IDs of the users that have seen the message.',
                type: 'string[]',
                items: { type: 'string' },
              },
              skipLinkPreviews: {
                description:
                  "If set, Cord won't analyze links in the message to generate previews.",
                type: 'boolean',
              },
            },
            propertyOrder: [
              'author',
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
            required: [
              'author',
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
          },
          thread: {
            type: 'CoreThreadData',
            properties: {
              id: { description: 'The ID for this thread.', type: 'string' },
              groupID: {
                description: 'The group ID this thread is in.',
                type: 'string',
              },
              total: {
                description:
                  'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                type: 'number',
              },
              userMessages: {
                description:
                  'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                type: 'number',
              },
              actionMessages: {
                description:
                  'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                type: 'number',
              },
              deletedMessages: {
                description: 'The number of deleted messages in this thread.',
                type: 'number',
              },
              resolved: {
                description:
                  'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                type: 'boolean',
              },
              resolvedTimestamp: {
                description:
                  'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              participants: {
                description:
                  'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                type: 'ThreadParticipant[]',
                items: {
                  type: 'ThreadParticipant',
                  properties: {
                    lastSeenTimestamp: {
                      description:
                        'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    userID: {
                      description:
                        "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: ['lastSeenTimestamp', 'userID', 'displayName'],
                  required: ['lastSeenTimestamp', 'userID', 'displayName'],
                },
              },
              subscribers: {
                description:
                  'All of the users who are subscribed to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              repliers: {
                description:
                  'All of the users who have replied to this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              mentioned: {
                description:
                  'All of the users who were mentioned in a message in this thread.',
                type: 'string[]',
                items: { type: 'string' },
              },
              actionMessageRepliers: {
                description:
                  "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                type: 'string[]',
                items: { type: 'string' },
              },
              typing: {
                description:
                  'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                type: 'string[]',
                items: { type: 'string' },
              },
              name: {
                description:
                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                type: 'string',
              },
              location: {
                description:
                  'The [location](/reference/location) of this thread.',
                type: 'Location',
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'An optional space separated list of classnames to add to the thread.',
                type: ['null', 'string'],
              },
            },
            propertyOrder: [
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
            required: [
              'id',
              'groupID',
              'total',
              'userMessages',
              'actionMessages',
              'deletedMessages',
              'resolved',
              'resolvedTimestamp',
              'participants',
              'subscribers',
              'repliers',
              'mentioned',
              'actionMessageRepliers',
              'typing',
              'name',
              'url',
              'location',
              'metadata',
              'extraClassnames',
            ],
          },
          usersToNotify: {
            type: 'UsersToNotify[]',
            items: {
              type: 'UsersToNotify',
              properties: {
                replyActions: {
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'NotificationReplyAction[]',
                      items: {
                        type: 'string',
                        enum: [
                          'mention',
                          'create-thread',
                          'assign-task',
                          'unassign-task',
                          'attach-file',
                        ],
                      },
                    },
                  ],
                },
                id: {
                  description:
                    "The user's ID.  This is unique within a project.",
                  type: 'string',
                },
                name: {
                  description: "The user's name.",
                  type: ['null', 'string'],
                },
                shortName: {
                  description:
                    "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                  type: ['null', 'string'],
                },
                displayName: {
                  description:
                    'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                  type: 'string',
                },
                secondaryDisplayName: {
                  description:
                    'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                  type: 'string',
                },
                profilePictureURL: {
                  description: "A URL to the user's profile picture.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description: 'Any metadata that has been set for the user.',
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'replyActions',
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
              required: [
                'replyActions',
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
            },
          },
        },
        propertyOrder: [
          'threadID',
          'messageID',
          'groupID',
          'projectID',
          'author',
          'content',
          'plaintext',
          'url',
          'messageType',
          'metadata',
          'message',
          'thread',
          'usersToNotify',
        ],
        required: [
          'threadID',
          'messageID',
          'groupID',
          'projectID',
          'author',
          'content',
          'plaintext',
          'url',
          'messageType',
          'metadata',
          'message',
          'thread',
          'usersToNotify',
        ],
      },
    },
    WebhookMessage: {
      name: 'WebhookMessage',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          author: {
            type: 'ClientUserData',
            properties: {
              id: {
                description: "The user's ID.  This is unique within a project.",
                type: 'string',
              },
              name: {
                description: "The user's name.",
                type: ['null', 'string'],
              },
              shortName: {
                description:
                  "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                type: ['null', 'string'],
              },
              displayName: {
                description:
                  'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                type: 'string',
              },
              secondaryDisplayName: {
                description:
                  'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                type: 'string',
              },
              profilePictureURL: {
                description: "A URL to the user's profile picture.",
                type: ['null', 'string'],
              },
              metadata: {
                description: 'Any metadata that has been set for the user.',
                type: 'EntityMetadata',
              },
            },
            propertyOrder: [
              'id',
              'name',
              'shortName',
              'displayName',
              'secondaryDisplayName',
              'profilePictureURL',
              'metadata',
            ],
            required: [
              'id',
              'name',
              'shortName',
              'displayName',
              'secondaryDisplayName',
              'profilePictureURL',
              'metadata',
            ],
          },
          id: {
            type: 'string',
            description:
              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
          },
          authorID: {
            type: 'string',
            description: 'The ID for the user that sent the message.',
          },
          groupID: {
            type: 'string',
            description: 'The ID for the group this message belongs to.',
          },
          threadID: {
            type: 'string',
            description: 'The ID for the thread this message is part of.',
          },
          content: {
            type: 'MessageContent',
            items: {
              anyOf: [
                {
                  type: 'MessageAssigneeNode',
                  properties: {
                    type: { type: 'MessageNodeType.ASSIGNEE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'indent'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageCodeNode',
                  properties: {
                    type: { type: 'MessageNodeType.CODE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageLinkNode',
                  properties: {
                    type: { type: 'MessageNodeType.LINK' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    url: { type: 'string' },
                  },
                  propertyOrder: ['type', 'class', 'children', 'url'],
                  required: ['type', 'children', 'url'],
                },
                {
                  type: 'MessageMentionNode',
                  properties: {
                    type: { type: 'MessageNodeType.MENTION' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    user: {
                      type: 'object',
                      properties: { id: { type: 'string' } },
                      propertyOrder: ['id'],
                      required: ['id'],
                    },
                  },
                  propertyOrder: ['type', 'class', 'children', 'user'],
                  required: ['type', 'children', 'user'],
                },
                {
                  type: 'MessageNumberBulletNode',
                  properties: {
                    type: { type: 'MessageNodeType.NUMBER_BULLET' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    bulletNumber: { type: 'number' },
                    indent: { type: 'number' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'bulletNumber',
                    'indent',
                  ],
                  required: ['type', 'children', 'bulletNumber'],
                },
                {
                  type: 'MessageParagraphNode',
                  properties: {
                    type: { type: 'MessageNodeType.PARAGRAPH' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageQuoteNode',
                  properties: {
                    type: { type: 'MessageNodeType.QUOTE' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
                {
                  type: 'MessageTextNode',
                  properties: {
                    type: { type: 'undefined' },
                    class: { type: 'string' },
                    text: { type: 'string' },
                    bold: { type: 'boolean' },
                    italic: { type: 'boolean' },
                    underline: { type: 'boolean' },
                    code: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'text',
                    'bold',
                    'italic',
                    'underline',
                    'code',
                  ],
                  required: ['text'],
                },
                {
                  type: 'MessageTodoNode',
                  properties: {
                    type: { type: 'MessageNodeType.TODO' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                    todoID: { type: 'string' },
                    done: { type: 'boolean' },
                  },
                  propertyOrder: [
                    'type',
                    'class',
                    'children',
                    'todoID',
                    'done',
                  ],
                  required: ['type', 'children', 'todoID', 'done'],
                },
                {
                  type: 'MessageMarkdownNode',
                  properties: {
                    type: { type: 'MessageNodeType.MARKDOWN' },
                    class: { type: 'string' },
                    children: { type: 'MessageContent' },
                  },
                  propertyOrder: ['type', 'class', 'children'],
                  required: ['type', 'children'],
                },
              ],
            },
            description: 'The content of the message.',
          },
          plaintext: {
            type: 'string',
            description:
              'A plaintext version of the structured message content.',
          },
          url: {
            type: ['null', 'string'],
            description:
              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
          },
          createdTimestamp: {
            type: 'Date',
            description:
              'The timestamp when this message was created.  The default value is the current time.',
          },
          deletedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
          },
          updatedTimestamp: {
            anyOf: [{ type: 'null' }, { type: 'Date' }],
            description:
              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
          },
          iconURL: {
            type: ['null', 'string'],
            description:
              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
          },
          translationKey: {
            type: ['null', 'string'],
            description:
              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
          },
          type: {
            type: 'string',
            enum: ['action_message', 'user_message'],
            description:
              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              'Arbitrary key-value pairs that can be used to store additional information.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A optional space separated list of classnames to add to the message.',
          },
          attachments: {
            type: 'MessageAttachment[]',
            items: {
              anyOf: [
                {
                  type: 'MessageFileAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `file` for file attachments.',
                      type: '"file"',
                    },
                    id: { description: 'The ID of the file.', type: 'string' },
                    name: {
                      description: 'The name of the file.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                      type: 'string',
                    },
                    mimeType: {
                      description: 'The MIME type of the file.',
                      type: 'string',
                    },
                    size: {
                      description: 'The size of the file, in bytes.',
                      type: 'number',
                    },
                    uploadStatus: {
                      description:
                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                      type: 'string',
                      enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                  required: [
                    'type',
                    'id',
                    'name',
                    'url',
                    'mimeType',
                    'size',
                    'uploadStatus',
                  ],
                },
                {
                  type: 'MessageAnnotationAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                      type: '"annotation"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the annotation, if any.',
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      ],
                    },
                    locationData: {
                      description:
                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                      type: ['null', 'string'],
                    },
                    customData: {
                      description:
                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'CustomAnnotationData',
                          properties: {
                            location: {
                              description:
                                'The custom location you produced for this annotation at annotation capture time.',
                              type: 'Location',
                            },
                            coordsRelativeToTarget: {
                              description:
                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                              type: 'object',
                              properties: {
                                x: { type: 'number' },
                                y: { type: 'number' },
                              },
                              propertyOrder: ['x', 'y'],
                              required: ['x', 'y'],
                            },
                            label: {
                              description:
                                'Your custom user-visible label for the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                          required: [
                            'location',
                            'coordsRelativeToTarget',
                            'label',
                          ],
                        },
                      ],
                    },
                    textContent: {
                      description:
                        'The text that was selected when creating the annotation, if any.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                  required: [
                    'type',
                    'screenshot',
                    'locationData',
                    'customData',
                    'textContent',
                  ],
                },
                {
                  type: 'MessageScreenshotAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                      type: '"screenshot"',
                    },
                    screenshot: {
                      description:
                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                      type: 'UploadedFile',
                      properties: {
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                  },
                  propertyOrder: ['type', 'screenshot'],
                  required: ['type', 'screenshot'],
                },
                {
                  type: 'MessageLinkPreviewAttachment',
                  properties: {
                    type: {
                      description:
                        'The type of this attachment, which is always `link_preview` for file link previews.',
                      type: '"link_preview"',
                    },
                    id: {
                      description: 'The ID of the link preview attachment.',
                      type: 'string',
                    },
                    url: {
                      description:
                        'The url from which the preview was generated.',
                      type: 'string',
                    },
                    imageURL: {
                      description:
                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                      type: ['null', 'string'],
                    },
                    title: {
                      description:
                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                      type: ['null', 'string'],
                    },
                    description: {
                      description:
                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                  required: [
                    'type',
                    'id',
                    'url',
                    'imageURL',
                    'title',
                    'description',
                  ],
                },
              ],
            },
            description: 'The items attached to this message.',
          },
          reactions: {
            type: 'Reaction[]',
            items: {
              type: 'Reaction',
              properties: {
                reaction: {
                  description: 'The emoji reaction.',
                  type: 'string',
                },
                userID: {
                  description: 'The ID of the user who reacted to the message.',
                  type: 'string',
                },
                timestamp: {
                  description:
                    'The timestamp of when the reaction was created.',
                  type: 'Date',
                },
              },
              propertyOrder: ['reaction', 'userID', 'timestamp'],
              required: ['reaction', 'userID', 'timestamp'],
            },
            description: 'The reactions to this message.',
          },
          seenBy: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'A list of IDs of the users that have seen the message.',
          },
          skipLinkPreviews: {
            type: 'boolean',
            description:
              "If set, Cord won't analyze links in the message to generate previews.",
          },
        },
        propertyOrder: [
          'author',
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
        required: [
          'author',
          'id',
          'authorID',
          'groupID',
          'threadID',
          'content',
          'plaintext',
          'url',
          'createdTimestamp',
          'deletedTimestamp',
          'updatedTimestamp',
          'iconURL',
          'translationKey',
          'type',
          'metadata',
          'extraClassnames',
          'attachments',
          'reactions',
          'seenBy',
          'skipLinkPreviews',
        ],
      },
    },
    UsersToNotify: {
      name: 'UsersToNotify',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          replyActions: {
            anyOf: [
              { type: 'null' },
              {
                type: 'NotificationReplyAction[]',
                items: {
                  type: 'string',
                  enum: [
                    'mention',
                    'create-thread',
                    'assign-task',
                    'unassign-task',
                    'attach-file',
                  ],
                },
              },
            ],
          },
          id: {
            type: 'string',
            description: "The user's ID.  This is unique within a project.",
          },
          name: { type: ['null', 'string'], description: "The user's name." },
          shortName: {
            type: ['null', 'string'],
            description:
              "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
          },
          displayName: {
            type: 'string',
            description:
              'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
          },
          secondaryDisplayName: {
            type: 'string',
            description:
              'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
          },
          profilePictureURL: {
            type: ['null', 'string'],
            description: "A URL to the user's profile picture.",
          },
          metadata: {
            type: 'EntityMetadata',
            description: 'Any metadata that has been set for the user.',
          },
        },
        propertyOrder: [
          'replyActions',
          'id',
          'name',
          'shortName',
          'displayName',
          'secondaryDisplayName',
          'profilePictureURL',
          'metadata',
        ],
        required: [
          'replyActions',
          'id',
          'name',
          'shortName',
          'displayName',
          'secondaryDisplayName',
          'profilePictureURL',
          'metadata',
        ],
      },
    },
    NotificationCreatedWebhookPayload: {
      name: 'NotificationCreatedWebhookPayload',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          recipientUserID: { type: 'string' },
          id: {
            type: 'string',
            description:
              'The [ID](/reference/identifiers) for this notification.',
          },
          senderUserIDs: {
            type: 'string[]',
            items: { type: 'string' },
            description:
              'The [IDs](/reference/identifiers) of the user(s) who sent this notification. The Cord backend will sometimes aggregate multiple notifications together, causing them to have multiple senders. For example, if multiple people react to the same message, that will generate only one notification (but with multiple senders, one for each person who reacted).',
          },
          iconUrl: {
            type: ['null', 'string'],
            description:
              "The URL of an icon image for this notification, if one was specified when it was created. This will always be `null` for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
          },
          header: {
            type: 'NotificationHeaderNode[]',
            items: {
              anyOf: [
                {
                  type: 'NotificationTextHeader',
                  properties: {
                    type: {
                      description:
                        'Indicator that this is a string header node.',
                      type: '"text"',
                    },
                    text: {
                      description:
                        'The text to display. This text may start and/or end with whitespace, which should typically *not* be trimmed. For example, in order to display the notification `"Alice replied to your thread."`, this would typically be composed of two nodes -- a user node for Alice, and then a text node containing `" replied to your thread."`, with a meaningful space at the front, to separate this node from Alice\'s name.',
                      type: 'string',
                    },
                    bold: {
                      description:
                        'Whether the text should be formatted in bold.',
                      type: 'boolean',
                    },
                  },
                  propertyOrder: ['type', 'text', 'bold'],
                  required: ['type', 'text', 'bold'],
                },
                {
                  type: 'NotificationUserHeader',
                  properties: {
                    type: {
                      description:
                        'Indicator that this is a user reference header node.',
                      type: '"user"',
                    },
                    user: {
                      description: 'The indicated user.',
                      type: 'ClientUserData',
                      properties: {
                        id: {
                          description:
                            "The user's ID.  This is unique within a project.",
                          type: 'string',
                        },
                        name: {
                          description: "The user's name.",
                          type: ['null', 'string'],
                        },
                        shortName: {
                          description:
                            "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                          type: 'string',
                        },
                        secondaryDisplayName: {
                          description:
                            'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                          type: 'string',
                        },
                        profilePictureURL: {
                          description: "A URL to the user's profile picture.",
                          type: ['null', 'string'],
                        },
                        metadata: {
                          description:
                            'Any metadata that has been set for the user.',
                          type: 'EntityMetadata',
                        },
                      },
                      propertyOrder: [
                        'id',
                        'name',
                        'shortName',
                        'displayName',
                        'secondaryDisplayName',
                        'profilePictureURL',
                        'metadata',
                      ],
                      required: [
                        'id',
                        'name',
                        'shortName',
                        'displayName',
                        'secondaryDisplayName',
                        'profilePictureURL',
                        'metadata',
                      ],
                    },
                  },
                  propertyOrder: ['type', 'user'],
                  required: ['type', 'user'],
                },
              ],
            },
            description:
              'The "header" or "text" of the notification. This will represent text like "Alice replied to your thread." or similar. For notifications you create via the REST API, this will be based upon the `template` parameter, see below.',
          },
          headerTranslation: {
            anyOf: [
              { type: 'null' },
              {
                type: 'Translation',
                properties: {
                  key: {
                    description:
                      'A translation key that is used to look up the proper translation.  See [the translations documentation](/customization/translations) for more information on how translations work.',
                    type: 'string',
                  },
                  parameters: {
                    description:
                      "The parameters to supply to the translation.  This will always be set, but may be an empty object if the translation doesn't take any parameters.",
                    type: 'TranslationParameters',
                  },
                },
                propertyOrder: ['key', 'parameters'],
                required: ['key', 'parameters'],
              },
            ],
            description:
              'A translation that can be used to translate the header of the notification. All Cord-created notifications will have a translation, but this may be null for notifications you [create through the REST API](/rest-apis/notifications#Create-a-notification). See [the translations documentation](/customization/translations) for more information.',
          },
          attachment: {
            anyOf: [
              { type: 'null' },
              {
                type: 'NotificationURLAttachment',
                properties: {
                  type: {
                    description: 'Indicator that this is a URL attachment.',
                    type: '"url"',
                  },
                  url: {
                    description:
                      'The URL this attachment points to. This would typically be the URL to send the browser to if this notification is clicked.',
                    type: 'string',
                  },
                },
                propertyOrder: ['type', 'url'],
                required: ['type', 'url'],
              },
              {
                type: 'NotificationMessageAttachment',
                properties: {
                  type: {
                    description: 'Indicator that this is a message attachment.',
                    type: '"message"',
                  },
                  message: {
                    description: 'The relevant message.',
                    type: 'CoreMessageData',
                    properties: {
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                },
                propertyOrder: ['type', 'message'],
                required: ['type', 'message'],
              },
              {
                type: 'NotificationThreadAttachment',
                properties: {
                  type: {
                    description: 'Indicator that this is a thread attachment.',
                    type: '"thread"',
                  },
                  thread: {
                    description: 'The relevant thread.',
                    type: 'CoreThreadData',
                    properties: {
                      id: {
                        description: 'The ID for this thread.',
                        type: 'string',
                      },
                      groupID: {
                        description: 'The group ID this thread is in.',
                        type: 'string',
                      },
                      total: {
                        description:
                          'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      userMessages: {
                        description:
                          'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      actionMessages: {
                        description:
                          'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      deletedMessages: {
                        description:
                          'The number of deleted messages in this thread.',
                        type: 'number',
                      },
                      resolved: {
                        description:
                          'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                        type: 'boolean',
                      },
                      resolvedTimestamp: {
                        description:
                          'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      participants: {
                        description:
                          'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                        type: 'ThreadParticipant[]',
                        items: {
                          type: 'ThreadParticipant',
                          properties: {
                            lastSeenTimestamp: {
                              description:
                                'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            userID: {
                              description:
                                "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                            displayName: {
                              description:
                                "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                          required: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                        },
                      },
                      subscribers: {
                        description:
                          'All of the users who are subscribed to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      repliers: {
                        description:
                          'All of the users who have replied to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      mentioned: {
                        description:
                          'All of the users who were mentioned in a message in this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      actionMessageRepliers: {
                        description:
                          "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      typing: {
                        description:
                          'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      name: {
                        description:
                          'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                        type: 'string',
                      },
                      location: {
                        description:
                          'The [location](/reference/location) of this thread.',
                        type: 'Location',
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'An optional space separated list of classnames to add to the thread.',
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                    required: [
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                  },
                },
                propertyOrder: ['type', 'thread'],
                required: ['type', 'thread'],
              },
            ],
            description:
              'Additional context attached to the notification. For example, if this notification is about a new reaction on a message, the attachment will specify what message received that new reaction.  \n\nA renderer will typically check the `type` field of the attachment and render that attachment type below the `header`.  \n\nWe may include other types of attachments in the future and therefore recommend having a default case when handling the attachment types.',
          },
          readStatus: {
            type: 'string',
            enum: ['unread', 'read'],
            description:
              'Whether this notification has been read by the recipient yet.',
          },
          timestamp: {
            type: 'Date',
            description: 'The time this notification was sent.',
          },
          extraClassnames: {
            type: ['null', 'string'],
            description:
              'A space separated list of classnames to add to the notification.',
          },
          metadata: {
            type: 'EntityMetadata',
            description:
              "An arbitrary JSON object specified when the notification was created. This will always be an empty object for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
          },
        },
        propertyOrder: [
          'recipientUserID',
          'id',
          'senderUserIDs',
          'iconUrl',
          'header',
          'headerTranslation',
          'attachment',
          'readStatus',
          'timestamp',
          'extraClassnames',
          'metadata',
        ],
        required: [
          'recipientUserID',
          'id',
          'senderUserIDs',
          'iconUrl',
          'header',
          'headerTranslation',
          'attachment',
          'readStatus',
          'timestamp',
          'extraClassnames',
          'metadata',
        ],
      },
    },
    URLVerificationWebhookPayload: {
      name: 'URLVerificationWebhookPayload',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: { message: { type: 'string' } },
        propertyOrder: ['message'],
        required: ['message'],
      },
    },
    WebhookWrapperProperties: {
      name: 'WebhookWrapperProperties',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          type: {
            type: 'T',
            description:
              'The type of event.  The contents of the event property will vary depending on the event type.  See https://docs.cord.com/reference/events-webhook#Events-2 for more detail about the body of each event type.',
          },
          timestamp: {
            type: 'string',
            description: 'The time at which this event was sent.',
          },
          projectID: {
            type: 'string',
            description: 'The ID for the project this event belongs to.',
          },
          event: {
            type: 'WebhookPayloads[T]',
            description:
              'The body of the event, which will vary depending on event type. See https://docs.cord.com/reference/events-webhook#Events-2 for more detail about the body of each event type.',
          },
        },
        propertyOrder: ['type', 'timestamp', 'projectID', 'event'],
        required: ['type', 'timestamp', 'projectID', 'event'],
      },
    },
    ServerCreateWebhook: {
      name: 'ServerCreateWebhook',
      methods: { methodOrder: [], required: [], methods: {} },
      properties: {
        properties: {
          url: {
            type: 'string',
            description: 'The URL to register that will receive webhook events',
          },
          events: {
            type: '(keyof WebhookPayloads)[]',
            items: {
              type: 'string',
              enum: [
                'thread-message-added',
                'notification-created',
                'url-verification',
              ],
            },
            description: 'The events which you will receive',
          },
        },
        propertyOrder: ['url', 'events'],
        required: ['url', 'events'],
      },
    },
  },
  react: {
    notification: {
      useNotificationCounts: {
        name: 'useNotificationCounts',
        summary:
          'This method allows you to observe the notification summary for the current user, including live updates.',
        examples: {
          Overview:
            "import { notification } from '@cord-sdk/react';\nconst counts = notification.useNotificationCounts({\n      filter: {\n          metadata: { flavor: 'minty' },\n          location: { page: 'bookmarks' },\n          groupID: 'group123',\n       },\n    });\n\nreturn (\n  <div>\n     {!counts && \"Loading...\"}\n     {counts && (\n       <p>Unread notifications: {counts.unread}</p>\n      )}\n  </div>\n );",
        },
        parameters: {
          propertyOrder: ['options'],
          required: [],
          properties: {
            options: {
              description: '',
              type: 'ObserveNotificationSummaryOptions',
              properties: {
                filter: {
                  description:
                    'An object that can be used to filter the notifications returned.',
                  type: 'NotificationListFilter',
                  properties: {
                    metadata: {
                      description:
                        'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    location: {
                      description:
                        'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    groupID: {
                      description:
                        'The group to which the message that prompted the notification belongs.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['metadata', 'location', 'groupID'],
                  required: [],
                },
              },
              propertyOrder: ['filter'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'A reference number which can be passed to unobserveSummary  to stop observing notification summary information.',
          anyOf: [
            { type: 'null' },
            {
              type: 'NotificationSummary',
              properties: {
                unread: {
                  description:
                    "The number of notifications that the current user hasn't seen yet.",
                  type: 'number',
                },
              },
              propertyOrder: ['unread'],
              required: ['unread'],
            },
          ],
        },
      },
      useNotifications: {
        name: 'useNotifications',
        summary:
          'This method allows you to observe the full notification data for the current user, including live updates.',
        examples: {
          Overview:
            "import { notification } from '@cord-sdk/react';\nconst { notifications, loading, hasMore, fetchMore } = notification.useNotifications(\n  filter: { metadata: { flavor: 'minty' } } },\n);\nreturn (\n  <div>\n    {notifications.map((notification) => (\n      <div key={notification.id}>\n        Got notification {notification.id}!\n      </div>\n    ))}\n    {loading ? (\n      <div>Loading...</div>\n    ) : hasMore ? (\n      <div onClick={() => fetchMore(10)}>Fetch 10 more</div>\n    ) : null}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['options'],
          required: [],
          properties: {
            options: {
              description: 'Miscellaneous options. See below.',
              type: 'ObserveNotificationDataOptions',
              properties: {
                filter: {
                  description:
                    'An object that can be used to filter the notifications returned.',
                  type: 'NotificationListFilter',
                  properties: {
                    metadata: {
                      description:
                        'An arbitrary JSON object specified when the notification is created. The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to filter only notifications with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    location: {
                      description:
                        'The [location](/reference/location) where the notifications live. This will be the location of the thread containing the message which prompted the notification.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    groupID: {
                      description:
                        'The group to which the message that prompted the notification belongs.',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['metadata', 'location', 'groupID'],
                  required: [],
                },
              },
              propertyOrder: ['filter'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          type: 'ClientNotificationData',
          properties: {
            notifications: {
              description:
                "The current user's notifications, in reverse-chronological order (i.e., newest first). Calling `fetchMore` will load a batch of older notifications and append them to this list. Any new notifications that are sent to the current viewer will automatically be prepended to this list.",
              type: 'CoreNotificationData[]',
              items: {
                type: 'CoreNotificationData',
                properties: {
                  id: {
                    description:
                      'The [ID](/reference/identifiers) for this notification.',
                    type: 'string',
                  },
                  senderUserIDs: {
                    description:
                      'The [IDs](/reference/identifiers) of the user(s) who sent this notification. The Cord backend will sometimes aggregate multiple notifications together, causing them to have multiple senders. For example, if multiple people react to the same message, that will generate only one notification (but with multiple senders, one for each person who reacted).',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  iconUrl: {
                    description:
                      "The URL of an icon image for this notification, if one was specified when it was created. This will always be `null` for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
                    type: ['null', 'string'],
                  },
                  header: {
                    description:
                      'The "header" or "text" of the notification. This will represent text like "Alice replied to your thread." or similar. For notifications you create via the REST API, this will be based upon the `template` parameter, see below.',
                    type: 'NotificationHeaderNode[]',
                    items: {
                      anyOf: [
                        {
                          type: 'NotificationTextHeader',
                          properties: {
                            type: {
                              description:
                                'Indicator that this is a string header node.',
                              type: '"text"',
                            },
                            text: {
                              description:
                                'The text to display. This text may start and/or end with whitespace, which should typically *not* be trimmed. For example, in order to display the notification `"Alice replied to your thread."`, this would typically be composed of two nodes -- a user node for Alice, and then a text node containing `" replied to your thread."`, with a meaningful space at the front, to separate this node from Alice\'s name.',
                              type: 'string',
                            },
                            bold: {
                              description:
                                'Whether the text should be formatted in bold.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['type', 'text', 'bold'],
                          required: ['type', 'text', 'bold'],
                        },
                        {
                          type: 'NotificationUserHeader',
                          properties: {
                            type: {
                              description:
                                'Indicator that this is a user reference header node.',
                              type: '"user"',
                            },
                            user: {
                              description: 'The indicated user.',
                              type: 'ClientUserData',
                              properties: {
                                id: {
                                  description:
                                    "The user's ID.  This is unique within a project.",
                                  type: 'string',
                                },
                                name: {
                                  description: "The user's name.",
                                  type: ['null', 'string'],
                                },
                                shortName: {
                                  description:
                                    "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                                  type: ['null', 'string'],
                                },
                                displayName: {
                                  description:
                                    'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                                  type: 'string',
                                },
                                secondaryDisplayName: {
                                  description:
                                    'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                                  type: 'string',
                                },
                                profilePictureURL: {
                                  description:
                                    "A URL to the user's profile picture.",
                                  type: ['null', 'string'],
                                },
                                metadata: {
                                  description:
                                    'Any metadata that has been set for the user.',
                                  type: 'EntityMetadata',
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'shortName',
                                'displayName',
                                'secondaryDisplayName',
                                'profilePictureURL',
                                'metadata',
                              ],
                              required: [
                                'id',
                                'name',
                                'shortName',
                                'displayName',
                                'secondaryDisplayName',
                                'profilePictureURL',
                                'metadata',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'user'],
                          required: ['type', 'user'],
                        },
                      ],
                    },
                  },
                  headerTranslation: {
                    description:
                      'A translation that can be used to translate the header of the notification. All Cord-created notifications will have a translation, but this may be null for notifications you [create through the REST API](/rest-apis/notifications#Create-a-notification). See [the translations documentation](/customization/translations) for more information.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'Translation',
                        properties: {
                          key: {
                            description:
                              'A translation key that is used to look up the proper translation.  See [the translations documentation](/customization/translations) for more information on how translations work.',
                            type: 'string',
                          },
                          parameters: {
                            description:
                              "The parameters to supply to the translation.  This will always be set, but may be an empty object if the translation doesn't take any parameters.",
                            type: 'TranslationParameters',
                          },
                        },
                        propertyOrder: ['key', 'parameters'],
                        required: ['key', 'parameters'],
                      },
                    ],
                  },
                  attachment: {
                    description:
                      'Additional context attached to the notification. For example, if this notification is about a new reaction on a message, the attachment will specify what message received that new reaction.  \n\nA renderer will typically check the `type` field of the attachment and render that attachment type below the `header`.  \n\nWe may include other types of attachments in the future and therefore recommend having a default case when handling the attachment types.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'NotificationURLAttachment',
                        properties: {
                          type: {
                            description:
                              'Indicator that this is a URL attachment.',
                            type: '"url"',
                          },
                          url: {
                            description:
                              'The URL this attachment points to. This would typically be the URL to send the browser to if this notification is clicked.',
                            type: 'string',
                          },
                        },
                        propertyOrder: ['type', 'url'],
                        required: ['type', 'url'],
                      },
                      {
                        type: 'NotificationMessageAttachment',
                        properties: {
                          type: {
                            description:
                              'Indicator that this is a message attachment.',
                            type: '"message"',
                          },
                          message: {
                            description: 'The relevant message.',
                            type: 'CoreMessageData',
                            properties: {
                              id: {
                                description:
                                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                                type: 'string',
                              },
                              authorID: {
                                description:
                                  'The ID for the user that sent the message.',
                                type: 'string',
                              },
                              groupID: {
                                description:
                                  'The ID for the group this message belongs to.',
                                type: 'string',
                              },
                              threadID: {
                                description:
                                  'The ID for the thread this message is part of.',
                                type: 'string',
                              },
                              content: {
                                description: 'The content of the message.',
                                type: 'MessageContent',
                                items: {
                                  anyOf: [
                                    {
                                      type: 'MessageAssigneeNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.ASSIGNEE',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        user: {
                                          type: 'object',
                                          properties: {
                                            id: { type: 'string' },
                                          },
                                          propertyOrder: ['id'],
                                          required: ['id'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'user',
                                      ],
                                      required: ['type', 'children', 'user'],
                                    },
                                    {
                                      type: 'MessageBulletNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.BULLET',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        indent: { type: 'number' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'indent',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageCodeNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.CODE' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageLinkNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.LINK' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        url: { type: 'string' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'url',
                                      ],
                                      required: ['type', 'children', 'url'],
                                    },
                                    {
                                      type: 'MessageMentionNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.MENTION',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        user: {
                                          type: 'object',
                                          properties: {
                                            id: { type: 'string' },
                                          },
                                          propertyOrder: ['id'],
                                          required: ['id'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'user',
                                      ],
                                      required: ['type', 'children', 'user'],
                                    },
                                    {
                                      type: 'MessageNumberBulletNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.NUMBER_BULLET',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        bulletNumber: { type: 'number' },
                                        indent: { type: 'number' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'bulletNumber',
                                        'indent',
                                      ],
                                      required: [
                                        'type',
                                        'children',
                                        'bulletNumber',
                                      ],
                                    },
                                    {
                                      type: 'MessageParagraphNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.PARAGRAPH',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageQuoteNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.QUOTE' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageTextNode',
                                      properties: {
                                        type: { type: 'undefined' },
                                        class: { type: 'string' },
                                        text: { type: 'string' },
                                        bold: { type: 'boolean' },
                                        italic: { type: 'boolean' },
                                        underline: { type: 'boolean' },
                                        code: { type: 'boolean' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'text',
                                        'bold',
                                        'italic',
                                        'underline',
                                        'code',
                                      ],
                                      required: ['text'],
                                    },
                                    {
                                      type: 'MessageTodoNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.TODO' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        todoID: { type: 'string' },
                                        done: { type: 'boolean' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'todoID',
                                        'done',
                                      ],
                                      required: [
                                        'type',
                                        'children',
                                        'todoID',
                                        'done',
                                      ],
                                    },
                                    {
                                      type: 'MessageMarkdownNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.MARKDOWN',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                  ],
                                },
                              },
                              plaintext: {
                                description:
                                  'A plaintext version of the structured message content.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                                type: ['null', 'string'],
                              },
                              createdTimestamp: {
                                description:
                                  'The timestamp when this message was created.  The default value is the current time.',
                                type: 'Date',
                              },
                              deletedTimestamp: {
                                description:
                                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              updatedTimestamp: {
                                description:
                                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              iconURL: {
                                description:
                                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                                type: ['null', 'string'],
                              },
                              translationKey: {
                                description:
                                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                                type: ['null', 'string'],
                              },
                              type: {
                                description:
                                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                                type: 'string',
                                enum: ['action_message', 'user_message'],
                              },
                              metadata: {
                                description:
                                  'Arbitrary key-value pairs that can be used to store additional information.',
                                type: 'EntityMetadata',
                              },
                              extraClassnames: {
                                description:
                                  'A optional space separated list of classnames to add to the message.',
                                type: ['null', 'string'],
                              },
                              attachments: {
                                description:
                                  'The items attached to this message.',
                                type: 'MessageAttachment[]',
                                items: {
                                  anyOf: [
                                    {
                                      type: 'MessageFileAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `file` for file attachments.',
                                          type: '"file"',
                                        },
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'type',
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                    {
                                      type: 'MessageAnnotationAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                                          type: '"annotation"',
                                        },
                                        screenshot: {
                                          description:
                                            'The screenshot attached to the annotation, if any.',
                                          anyOf: [
                                            { type: 'null' },
                                            {
                                              type: 'UploadedFile',
                                              properties: {
                                                id: {
                                                  description:
                                                    'The ID of the file.',
                                                  type: 'string',
                                                },
                                                name: {
                                                  description:
                                                    'The name of the file.',
                                                  type: 'string',
                                                },
                                                url: {
                                                  description:
                                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                  type: 'string',
                                                },
                                                mimeType: {
                                                  description:
                                                    'The MIME type of the file.',
                                                  type: 'string',
                                                },
                                                size: {
                                                  description:
                                                    'The size of the file, in bytes.',
                                                  type: 'number',
                                                },
                                                uploadStatus: {
                                                  description:
                                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                  type: 'string',
                                                  enum: [
                                                    'uploading',
                                                    'uploaded',
                                                    'failed',
                                                    'cancelled',
                                                  ],
                                                },
                                              },
                                              propertyOrder: [
                                                'id',
                                                'name',
                                                'url',
                                                'mimeType',
                                                'size',
                                                'uploadStatus',
                                              ],
                                              required: [
                                                'id',
                                                'name',
                                                'url',
                                                'mimeType',
                                                'size',
                                                'uploadStatus',
                                              ],
                                            },
                                          ],
                                        },
                                        locationData: {
                                          description:
                                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                          type: ['null', 'string'],
                                        },
                                        customData: {
                                          description:
                                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                          anyOf: [
                                            { type: 'null' },
                                            {
                                              type: 'CustomAnnotationData',
                                              properties: {
                                                location: {
                                                  description:
                                                    'The custom location you produced for this annotation at annotation capture time.',
                                                  type: 'Location',
                                                },
                                                coordsRelativeToTarget: {
                                                  description:
                                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                  type: 'object',
                                                  properties: {
                                                    x: { type: 'number' },
                                                    y: { type: 'number' },
                                                  },
                                                  propertyOrder: ['x', 'y'],
                                                  required: ['x', 'y'],
                                                },
                                                label: {
                                                  description:
                                                    'Your custom user-visible label for the annotation, if any.',
                                                  type: ['null', 'string'],
                                                },
                                              },
                                              propertyOrder: [
                                                'location',
                                                'coordsRelativeToTarget',
                                                'label',
                                              ],
                                              required: [
                                                'location',
                                                'coordsRelativeToTarget',
                                                'label',
                                              ],
                                            },
                                          ],
                                        },
                                        textContent: {
                                          description:
                                            'The text that was selected when creating the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'screenshot',
                                        'locationData',
                                        'customData',
                                        'textContent',
                                      ],
                                      required: [
                                        'type',
                                        'screenshot',
                                        'locationData',
                                        'customData',
                                        'textContent',
                                      ],
                                    },
                                    {
                                      type: 'MessageScreenshotAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                          type: '"screenshot"',
                                        },
                                        screenshot: {
                                          description:
                                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      },
                                      propertyOrder: ['type', 'screenshot'],
                                      required: ['type', 'screenshot'],
                                    },
                                    {
                                      type: 'MessageLinkPreviewAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `link_preview` for file link previews.',
                                          type: '"link_preview"',
                                        },
                                        id: {
                                          description:
                                            'The ID of the link preview attachment.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The url from which the preview was generated.',
                                          type: 'string',
                                        },
                                        imageURL: {
                                          description:
                                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                          type: ['null', 'string'],
                                        },
                                        title: {
                                          description:
                                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                          type: ['null', 'string'],
                                        },
                                        description: {
                                          description:
                                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'id',
                                        'url',
                                        'imageURL',
                                        'title',
                                        'description',
                                      ],
                                      required: [
                                        'type',
                                        'id',
                                        'url',
                                        'imageURL',
                                        'title',
                                        'description',
                                      ],
                                    },
                                  ],
                                },
                              },
                              reactions: {
                                description: 'The reactions to this message.',
                                type: 'Reaction[]',
                                items: {
                                  type: 'Reaction',
                                  properties: {
                                    reaction: {
                                      description: 'The emoji reaction.',
                                      type: 'string',
                                    },
                                    userID: {
                                      description:
                                        'The ID of the user who reacted to the message.',
                                      type: 'string',
                                    },
                                    timestamp: {
                                      description:
                                        'The timestamp of when the reaction was created.',
                                      type: 'Date',
                                    },
                                  },
                                  propertyOrder: [
                                    'reaction',
                                    'userID',
                                    'timestamp',
                                  ],
                                  required: ['reaction', 'userID', 'timestamp'],
                                },
                              },
                              seenBy: {
                                description:
                                  'A list of IDs of the users that have seen the message.',
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              skipLinkPreviews: {
                                description:
                                  "If set, Cord won't analyze links in the message to generate previews.",
                                type: 'boolean',
                              },
                            },
                            propertyOrder: [
                              'id',
                              'authorID',
                              'groupID',
                              'threadID',
                              'content',
                              'plaintext',
                              'url',
                              'createdTimestamp',
                              'deletedTimestamp',
                              'updatedTimestamp',
                              'iconURL',
                              'translationKey',
                              'type',
                              'metadata',
                              'extraClassnames',
                              'attachments',
                              'reactions',
                              'seenBy',
                              'skipLinkPreviews',
                            ],
                            required: [
                              'id',
                              'authorID',
                              'groupID',
                              'threadID',
                              'content',
                              'plaintext',
                              'url',
                              'createdTimestamp',
                              'deletedTimestamp',
                              'updatedTimestamp',
                              'iconURL',
                              'translationKey',
                              'type',
                              'metadata',
                              'extraClassnames',
                              'attachments',
                              'reactions',
                              'seenBy',
                              'skipLinkPreviews',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'message'],
                        required: ['type', 'message'],
                      },
                      {
                        type: 'NotificationThreadAttachment',
                        properties: {
                          type: {
                            description:
                              'Indicator that this is a thread attachment.',
                            type: '"thread"',
                          },
                          thread: {
                            description: 'The relevant thread.',
                            type: 'CoreThreadData',
                            properties: {
                              id: {
                                description: 'The ID for this thread.',
                                type: 'string',
                              },
                              groupID: {
                                description: 'The group ID this thread is in.',
                                type: 'string',
                              },
                              total: {
                                description:
                                  'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                                type: 'number',
                              },
                              userMessages: {
                                description:
                                  'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                                type: 'number',
                              },
                              actionMessages: {
                                description:
                                  'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                                type: 'number',
                              },
                              deletedMessages: {
                                description:
                                  'The number of deleted messages in this thread.',
                                type: 'number',
                              },
                              resolved: {
                                description:
                                  'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                                type: 'boolean',
                              },
                              resolvedTimestamp: {
                                description:
                                  'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              participants: {
                                description:
                                  'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                                type: 'ThreadParticipant[]',
                                items: {
                                  type: 'ThreadParticipant',
                                  properties: {
                                    lastSeenTimestamp: {
                                      description:
                                        'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                                      anyOf: [
                                        { type: 'null' },
                                        { type: 'Date' },
                                      ],
                                    },
                                    userID: {
                                      description:
                                        "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                      type: ['null', 'string'],
                                    },
                                    displayName: {
                                      description:
                                        "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'lastSeenTimestamp',
                                    'userID',
                                    'displayName',
                                  ],
                                  required: [
                                    'lastSeenTimestamp',
                                    'userID',
                                    'displayName',
                                  ],
                                },
                              },
                              subscribers: {
                                description:
                                  'All of the users who are subscribed to this thread.',
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              repliers: {
                                description:
                                  'All of the users who have replied to this thread.',
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              mentioned: {
                                description:
                                  'All of the users who were mentioned in a message in this thread.',
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              actionMessageRepliers: {
                                description:
                                  "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              typing: {
                                description:
                                  'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              name: {
                                description:
                                  'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                                type: 'string',
                              },
                              location: {
                                description:
                                  'The [location](/reference/location) of this thread.',
                                type: 'Location',
                              },
                              metadata: {
                                description:
                                  'Arbitrary key-value pairs that can be used to store additional information.',
                                type: 'EntityMetadata',
                              },
                              extraClassnames: {
                                description:
                                  'An optional space separated list of classnames to add to the thread.',
                                type: ['null', 'string'],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'groupID',
                              'total',
                              'userMessages',
                              'actionMessages',
                              'deletedMessages',
                              'resolved',
                              'resolvedTimestamp',
                              'participants',
                              'subscribers',
                              'repliers',
                              'mentioned',
                              'actionMessageRepliers',
                              'typing',
                              'name',
                              'url',
                              'location',
                              'metadata',
                              'extraClassnames',
                            ],
                            required: [
                              'id',
                              'groupID',
                              'total',
                              'userMessages',
                              'actionMessages',
                              'deletedMessages',
                              'resolved',
                              'resolvedTimestamp',
                              'participants',
                              'subscribers',
                              'repliers',
                              'mentioned',
                              'actionMessageRepliers',
                              'typing',
                              'name',
                              'url',
                              'location',
                              'metadata',
                              'extraClassnames',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'thread'],
                        required: ['type', 'thread'],
                      },
                    ],
                  },
                  readStatus: {
                    description:
                      'Whether this notification has been read by the recipient yet.',
                    type: 'string',
                    enum: ['unread', 'read'],
                  },
                  timestamp: {
                    description: 'The time this notification was sent.',
                    type: 'Date',
                  },
                  extraClassnames: {
                    description:
                      'A space separated list of classnames to add to the notification.',
                    type: ['null', 'string'],
                  },
                  metadata: {
                    description:
                      "An arbitrary JSON object specified when the notification was created. This will always be an empty object for Cord's internally-generated notifications (i.e., it can only be non-null for notifications you create via the REST API).",
                    type: 'EntityMetadata',
                  },
                },
                propertyOrder: [
                  'id',
                  'senderUserIDs',
                  'iconUrl',
                  'header',
                  'headerTranslation',
                  'attachment',
                  'readStatus',
                  'timestamp',
                  'extraClassnames',
                  'metadata',
                ],
                required: [
                  'id',
                  'senderUserIDs',
                  'iconUrl',
                  'header',
                  'headerTranslation',
                  'attachment',
                  'readStatus',
                  'timestamp',
                  'extraClassnames',
                  'metadata',
                ],
              },
            },
            loading: {
              description:
                'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
              type: 'boolean',
            },
            fetchMore: {
              description:
                "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
              type: 'FetchMoreCallback',
            },
            hasMore: {
              description:
                "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
              type: 'boolean',
            },
          },
          propertyOrder: ['notifications', 'loading', 'fetchMore', 'hasMore'],
          required: ['notifications', 'loading', 'fetchMore', 'hasMore'],
        },
      },
    },
    presence: {
      usePresence: {
        name: 'usePresence',
        summary:
          'This method allows you to observe users who are [present](/js-apis-and-hooks/presence-api) at a particular [location](/reference/location), including live updates.',
        examples: {
          Overview:
            'import { presence } from \'@cord-sdk/react\';\nconst present = presence.usePresence(\n  { page: "https://cord.com", block: "id123" },\n  { exclude_durable: true },\n);\nreturn (\n  <>\n    {present.map((user) => <div>{user.id} is present!</div>)}\n  </>\n);',
        },
        parameters: {
          propertyOrder: ['location', 'options'],
          required: ['location'],
          properties: {
            location: {
              description:
                'The [location](/reference/location) to fetch presence information for.',
              type: 'Location',
            },
            options: {
              description:
                'Options that control which presence records are returned.',
              type: 'ObservePresenceOptions',
              properties: {
                exclude_durable: {
                  description:
                    'When `true`, only return [ephemeral presence](/js-apis-and-hooks/presence-api) records.  \n\nThis value defaults to `false`.',
                  type: 'boolean',
                },
                partial_match: {
                  description:
                    'When `true`, returns users in any [partially matching location](/reference/location), rather than in only the specific location given.  \n\nThis value defaults to `false`.',
                  type: 'boolean',
                },
              },
              propertyOrder: ['exclude_durable', 'partial_match'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'An array of objects, one for each user present at the [location](/reference/location) which was passed to this hook. Each object will contain the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          anyOf: [
            { type: 'undefined' },
            {
              type: 'UserLocationData[]',
              items: {
                type: 'UserLocationData',
                properties: {
                  ephemeral: {
                    description:
                      "Contains information about the user's [ephemeral presence](/js-apis-and-hooks/presence-api).  The location array can be empty if the user is not currently present at the requested location.",
                    type: 'object',
                    properties: {
                      locations: {
                        type: 'Location[]',
                        items: { type: 'Location' },
                      },
                    },
                    propertyOrder: ['locations'],
                    required: ['locations'],
                  },
                  id: {
                    description:
                      'The user ID of the user this presence information is for.',
                    type: 'string',
                  },
                  durable: {
                    description:
                      "Contains information about the user's [durable presence](/js-apis-and-hooks/presence-api).  Undefined if the user does not have a durable presence [set](/js-apis-and-hooks/presence-api/setPresent). The location and timestamp will be for the user's most recently-set matching durable presence record (which may not be for the requested location if using the `partial_match` option).",
                    type: 'object',
                    properties: {
                      location: { type: 'Location' },
                      timestamp: { type: 'Date' },
                    },
                    propertyOrder: ['location', 'timestamp'],
                    required: ['location', 'timestamp'],
                  },
                },
                propertyOrder: ['ephemeral', 'id', 'durable'],
                required: ['ephemeral', 'id'],
              },
            },
          ],
        },
      },
    },
    thread: {
      useLocationSummary: {
        name: 'useLocationSummary',
        summary:
          'This method allows you to observe summary information about a [location](/reference/location), including live updates.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst summary = thread.useLocationSummary({page: 'document_details'}, {partialMatch: true});\nreturn (\n  <div>\n    {!summary && \"Loading...\"}\n    {summary && (\n      <p>Total threads: {summary.total}</p>\n      <p>Unread threads: {summary.unread}</p>\n      <p>Unread subscribed threads: {summary.unreadSubscribed}</p>\n      <p>Resolved threads: {summary.resolved}</p>\n    )}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['location', 'options'],
          required: ['location'],
          properties: {
            location: {
              description:
                'The [location](/reference/location) to fetch summary information for.',
              type: 'Location',
            },
            options: {
              description: 'Options that control which threads are returned.',
              type: 'ObserveThreadActivitySummaryOptions',
              properties: {
                partialMatch: {
                  description:
                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.  \n\nIf unset, defaults to `false`.',
                  type: 'boolean',
                },
                filter: {
                  type: 'Pick<ThreadListFilter, "groupID">',
                  properties: {
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                  },
                  propertyOrder: ['groupID'],
                  required: [],
                },
              },
              propertyOrder: ['partialMatch', 'filter'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          anyOf: [
            { type: 'undefined' },
            {
              type: 'ThreadActivitySummary',
              properties: {
                total: {
                  description:
                    'The total number of threads, both resolved and unresolved. This does not include threads in which all messages have been deleted.',
                  type: 'number',
                },
                unread: {
                  description:
                    'The total number of threads that contain *at least one* unread message in the thread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                  type: 'number',
                },
                unreadSubscribed: {
                  description:
                    "The number of threads that have messages the current user hasn't seen yet and is subscribed to.  \n\nA user is automatically subscribed to threads relevant to them, for example because they have sent a message or have been @-mentioned in them. `unreadSubscribed` is always less than or equal to `unread`.",
                  type: 'number',
                },
                new: {
                  description:
                    'The total number of threads that the user has never seen before at all, i.e., *every* message in the thread is unread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                  type: 'number',
                },
                resolved: {
                  description:
                    "The number of resolved threads. This refers to threads that users have manually marked as resolved within Cord's UI components.",
                  type: 'number',
                },
                empty: {
                  description:
                    'The number of thread with no visible messages. This refers to threads in which all the messages have been deleted.',
                  type: 'number',
                },
              },
              propertyOrder: [
                'total',
                'unread',
                'unreadSubscribed',
                'new',
                'resolved',
                'empty',
              ],
              required: [
                'total',
                'unread',
                'unreadSubscribed',
                'new',
                'resolved',
                'empty',
              ],
            },
          ],
        },
      },
      useThreadCounts: {
        name: 'useThreadCounts',
        summary:
          'This API allows you to observe the count of all the threads in a project that are visible to the current user.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst threadCounts = thread.useThreadCounts(\n    { filter: {\n       location: {\n             'value' {'page': 'document_details'},\n             'partialMatch': false\n            },\n       metadata: {'category': 'sales'}\n   }}\n);\nreturn (\n  <div>\n    {!threadCounts && \"Loading...\"}\n    {threadCounts && (\n      <p>Total threads: {threadCounts.total}</p>\n      <p>Unread threads: {threadCounts.unread}</p>\n      <p>Unread subscribed threads: {threadCounts.unreadSubscribed}</p>\n      <p>Resolved threads: {threadCounts.resolved}</p>\n    )}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['options'],
          required: [],
          properties: {
            options: {
              description: 'Options that control which threads are counted.',
              type: 'ObserveThreadCountsOptions',
              properties: {
                filter: {
                  description:
                    'An object that can be used to filter the threads returned.',
                  type: 'ClientThreadFilter',
                  properties: {
                    location: {
                      description:
                        'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    resolvedStatus: {
                      description:
                        'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                      type: 'string',
                      enum: ['any', 'resolved', 'unresolved'],
                    },
                    metadata: {
                      description:
                        'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                    viewer: {
                      description:
                        'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                      anyOf: [
                        { type: '"subscribed"' },
                        { type: '"mentioned"' },
                        {
                          type: 'ViewerThreadStatus[]',
                          items: {
                            type: 'string',
                            enum: ['subscribed', 'mentioned'],
                          },
                        },
                      ],
                    },
                  },
                  propertyOrder: [
                    'location',
                    'resolvedStatus',
                    'metadata',
                    'groupID',
                    'viewer',
                  ],
                  required: [],
                },
              },
              propertyOrder: ['filter'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          anyOf: [
            { type: 'undefined' },
            {
              type: 'ThreadActivitySummary',
              properties: {
                total: {
                  description:
                    'The total number of threads, both resolved and unresolved. This does not include threads in which all messages have been deleted.',
                  type: 'number',
                },
                unread: {
                  description:
                    'The total number of threads that contain *at least one* unread message in the thread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                  type: 'number',
                },
                unreadSubscribed: {
                  description:
                    "The number of threads that have messages the current user hasn't seen yet and is subscribed to.  \n\nA user is automatically subscribed to threads relevant to them, for example because they have sent a message or have been @-mentioned in them. `unreadSubscribed` is always less than or equal to `unread`.",
                  type: 'number',
                },
                new: {
                  description:
                    'The total number of threads that the user has never seen before at all, i.e., *every* message in the thread is unread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                  type: 'number',
                },
                resolved: {
                  description:
                    "The number of resolved threads. This refers to threads that users have manually marked as resolved within Cord's UI components.",
                  type: 'number',
                },
                empty: {
                  description:
                    'The number of thread with no visible messages. This refers to threads in which all the messages have been deleted.',
                  type: 'number',
                },
              },
              propertyOrder: [
                'total',
                'unread',
                'unreadSubscribed',
                'new',
                'resolved',
                'empty',
              ],
              required: [
                'total',
                'unread',
                'unreadSubscribed',
                'new',
                'resolved',
                'empty',
              ],
            },
          ],
        },
      },
      useThreadSummary: {
        name: 'useThreadSummary',
        summary:
          'This method allows you to observe summary information about a thread, including live updates.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst summary = thread.useThreadSummary('my-awesome-thread-id');\nreturn (\n  <div>\n    {!summary && \"Loading...\"}\n    {summary && (\n      <p>Total messages: {summary.total}</p>\n      <p>Unread messages: {summary.unread}</p>\n    )}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['id', 'options'],
          required: ['id'],
          properties: {
            id: {
              description:
                'The thread ID to fetch summary information for. If a thread with this ID does not exist, it will be created.',
              type: 'string',
            },
            options: {
              description: 'Options for creating new threads.',
              type: 'ThreadObserverOptions',
              properties: {
                filter: {
                  description:
                    "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
                  type: 'ClientThreadFilter',
                  properties: {
                    location: {
                      description:
                        'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    resolvedStatus: {
                      description:
                        'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                      type: 'string',
                      enum: ['any', 'resolved', 'unresolved'],
                    },
                    metadata: {
                      description:
                        'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                    viewer: {
                      description:
                        'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                      anyOf: [
                        { type: '"subscribed"' },
                        { type: '"mentioned"' },
                        {
                          type: 'ViewerThreadStatus[]',
                          items: {
                            type: 'string',
                            enum: ['subscribed', 'mentioned'],
                          },
                        },
                      ],
                    },
                  },
                  propertyOrder: [
                    'location',
                    'resolvedStatus',
                    'metadata',
                    'groupID',
                    'viewer',
                  ],
                  required: [],
                },
                initialFetchCount: {
                  description:
                    'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
                  type: 'number',
                },
              },
              propertyOrder: ['filter', 'initialFetchCount'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          anyOf: [
            { type: 'null' },
            {
              type: 'ThreadSummary',
              properties: {
                unread: {
                  description:
                    "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                  type: 'number',
                },
                viewerIsThreadParticipant: {
                  description:
                    'Whether the current viewer has either left a message or reacted to this thread.',
                  type: 'boolean',
                },
                firstMessage: {
                  description:
                    'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'ClientMessageData',
                      properties: {
                        seen: {
                          description:
                            'Whether the message has been seen by the current viewer.',
                          type: 'boolean',
                        },
                        id: {
                          description:
                            'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                          type: 'string',
                        },
                        authorID: {
                          description:
                            'The ID for the user that sent the message.',
                          type: 'string',
                        },
                        groupID: {
                          description:
                            'The ID for the group this message belongs to.',
                          type: 'string',
                        },
                        threadID: {
                          description:
                            'The ID for the thread this message is part of.',
                          type: 'string',
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        plaintext: {
                          description:
                            'A plaintext version of the structured message content.',
                          type: 'string',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        createdTimestamp: {
                          description:
                            'The timestamp when this message was created.  The default value is the current time.',
                          type: 'Date',
                        },
                        deletedTimestamp: {
                          description:
                            'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        updatedTimestamp: {
                          description:
                            'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        type: {
                          description:
                            'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                          type: 'string',
                          enum: ['action_message', 'user_message'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        attachments: {
                          description: 'The items attached to this message.',
                          type: 'MessageAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                              {
                                type: 'MessageAnnotationAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `annotation` for annotation attachments.',
                                    type: '"annotation"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the annotation, if any.',
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    ],
                                  },
                                  locationData: {
                                    description:
                                      'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                    type: ['null', 'string'],
                                  },
                                  customData: {
                                    description:
                                      "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'CustomAnnotationData',
                                        properties: {
                                          location: {
                                            description:
                                              'The custom location you produced for this annotation at annotation capture time.',
                                            type: 'Location',
                                          },
                                          coordsRelativeToTarget: {
                                            description:
                                              'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                            type: 'object',
                                            properties: {
                                              x: { type: 'number' },
                                              y: { type: 'number' },
                                            },
                                            propertyOrder: ['x', 'y'],
                                            required: ['x', 'y'],
                                          },
                                          label: {
                                            description:
                                              'Your custom user-visible label for the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                        required: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                      },
                                    ],
                                  },
                                  textContent: {
                                    description:
                                      'The text that was selected when creating the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                                required: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                              },
                              {
                                type: 'MessageScreenshotAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                    type: '"screenshot"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                },
                                propertyOrder: ['type', 'screenshot'],
                                required: ['type', 'screenshot'],
                              },
                              {
                                type: 'MessageLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `link_preview` for file link previews.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The url from which the preview was generated.',
                                    type: 'string',
                                  },
                                  imageURL: {
                                    description:
                                      'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                    type: ['null', 'string'],
                                  },
                                  title: {
                                    description:
                                      "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                    type: ['null', 'string'],
                                  },
                                  description: {
                                    description:
                                      'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                              },
                            ],
                          },
                        },
                        reactions: {
                          description: 'The reactions to this message.',
                          type: 'Reaction[]',
                          items: {
                            type: 'Reaction',
                            properties: {
                              reaction: {
                                description: 'The emoji reaction.',
                                type: 'string',
                              },
                              userID: {
                                description:
                                  'The ID of the user who reacted to the message.',
                                type: 'string',
                              },
                              timestamp: {
                                description:
                                  'The timestamp of when the reaction was created.',
                                type: 'Date',
                              },
                            },
                            propertyOrder: ['reaction', 'userID', 'timestamp'],
                            required: ['reaction', 'userID', 'timestamp'],
                          },
                        },
                        seenBy: {
                          description:
                            'A list of IDs of the users that have seen the message.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                      },
                      propertyOrder: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                      required: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                    },
                  ],
                },
                lastMessage: {
                  description:
                    'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'ClientMessageData',
                      properties: {
                        seen: {
                          description:
                            'Whether the message has been seen by the current viewer.',
                          type: 'boolean',
                        },
                        id: {
                          description:
                            'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                          type: 'string',
                        },
                        authorID: {
                          description:
                            'The ID for the user that sent the message.',
                          type: 'string',
                        },
                        groupID: {
                          description:
                            'The ID for the group this message belongs to.',
                          type: 'string',
                        },
                        threadID: {
                          description:
                            'The ID for the thread this message is part of.',
                          type: 'string',
                        },
                        content: {
                          description: 'The content of the message.',
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        plaintext: {
                          description:
                            'A plaintext version of the structured message content.',
                          type: 'string',
                        },
                        url: {
                          description:
                            "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                          type: ['null', 'string'],
                        },
                        createdTimestamp: {
                          description:
                            'The timestamp when this message was created.  The default value is the current time.',
                          type: 'Date',
                        },
                        deletedTimestamp: {
                          description:
                            'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        updatedTimestamp: {
                          description:
                            'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        iconURL: {
                          description:
                            'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                          type: ['null', 'string'],
                        },
                        translationKey: {
                          description:
                            'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                          type: ['null', 'string'],
                        },
                        type: {
                          description:
                            'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                          type: 'string',
                          enum: ['action_message', 'user_message'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        extraClassnames: {
                          description:
                            'A optional space separated list of classnames to add to the message.',
                          type: ['null', 'string'],
                        },
                        attachments: {
                          description: 'The items attached to this message.',
                          type: 'MessageAttachment[]',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageFileAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `file` for file attachments.',
                                    type: '"file"',
                                  },
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                              {
                                type: 'MessageAnnotationAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `annotation` for annotation attachments.',
                                    type: '"annotation"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the annotation, if any.',
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    ],
                                  },
                                  locationData: {
                                    description:
                                      'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                    type: ['null', 'string'],
                                  },
                                  customData: {
                                    description:
                                      "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                    anyOf: [
                                      { type: 'null' },
                                      {
                                        type: 'CustomAnnotationData',
                                        properties: {
                                          location: {
                                            description:
                                              'The custom location you produced for this annotation at annotation capture time.',
                                            type: 'Location',
                                          },
                                          coordsRelativeToTarget: {
                                            description:
                                              'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                            type: 'object',
                                            properties: {
                                              x: { type: 'number' },
                                              y: { type: 'number' },
                                            },
                                            propertyOrder: ['x', 'y'],
                                            required: ['x', 'y'],
                                          },
                                          label: {
                                            description:
                                              'Your custom user-visible label for the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                        required: [
                                          'location',
                                          'coordsRelativeToTarget',
                                          'label',
                                        ],
                                      },
                                    ],
                                  },
                                  textContent: {
                                    description:
                                      'The text that was selected when creating the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                                required: [
                                  'type',
                                  'screenshot',
                                  'locationData',
                                  'customData',
                                  'textContent',
                                ],
                              },
                              {
                                type: 'MessageScreenshotAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                    type: '"screenshot"',
                                  },
                                  screenshot: {
                                    description:
                                      'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                },
                                propertyOrder: ['type', 'screenshot'],
                                required: ['type', 'screenshot'],
                              },
                              {
                                type: 'MessageLinkPreviewAttachment',
                                properties: {
                                  type: {
                                    description:
                                      'The type of this attachment, which is always `link_preview` for file link previews.',
                                    type: '"link_preview"',
                                  },
                                  id: {
                                    description:
                                      'The ID of the link preview attachment.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The url from which the preview was generated.',
                                    type: 'string',
                                  },
                                  imageURL: {
                                    description:
                                      'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                    type: ['null', 'string'],
                                  },
                                  title: {
                                    description:
                                      "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                    type: ['null', 'string'],
                                  },
                                  description: {
                                    description:
                                      'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                                required: [
                                  'type',
                                  'id',
                                  'url',
                                  'imageURL',
                                  'title',
                                  'description',
                                ],
                              },
                            ],
                          },
                        },
                        reactions: {
                          description: 'The reactions to this message.',
                          type: 'Reaction[]',
                          items: {
                            type: 'Reaction',
                            properties: {
                              reaction: {
                                description: 'The emoji reaction.',
                                type: 'string',
                              },
                              userID: {
                                description:
                                  'The ID of the user who reacted to the message.',
                                type: 'string',
                              },
                              timestamp: {
                                description:
                                  'The timestamp of when the reaction was created.',
                                type: 'Date',
                              },
                            },
                            propertyOrder: ['reaction', 'userID', 'timestamp'],
                            required: ['reaction', 'userID', 'timestamp'],
                          },
                        },
                        seenBy: {
                          description:
                            'A list of IDs of the users that have seen the message.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        skipLinkPreviews: {
                          description:
                            "If set, Cord won't analyze links in the message to generate previews.",
                          type: 'boolean',
                        },
                      },
                      propertyOrder: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                      required: [
                        'seen',
                        'id',
                        'authorID',
                        'groupID',
                        'threadID',
                        'content',
                        'plaintext',
                        'url',
                        'createdTimestamp',
                        'deletedTimestamp',
                        'updatedTimestamp',
                        'iconURL',
                        'translationKey',
                        'type',
                        'metadata',
                        'extraClassnames',
                        'attachments',
                        'reactions',
                        'seenBy',
                        'skipLinkPreviews',
                      ],
                    },
                  ],
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                groupID: {
                  description: 'The group ID this thread is in.',
                  type: 'string',
                },
                total: {
                  description:
                    'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                userMessages: {
                  description:
                    'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                  type: 'number',
                },
                actionMessages: {
                  description:
                    'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                  type: 'number',
                },
                deletedMessages: {
                  description: 'The number of deleted messages in this thread.',
                  type: 'number',
                },
                resolved: {
                  description:
                    'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                  type: 'boolean',
                },
                resolvedTimestamp: {
                  description:
                    'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                participants: {
                  description:
                    'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                  type: 'ThreadParticipant[]',
                  items: {
                    type: 'ThreadParticipant',
                    properties: {
                      lastSeenTimestamp: {
                        description:
                          'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      userID: {
                        description:
                          "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                      displayName: {
                        description:
                          "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'lastSeenTimestamp',
                      'userID',
                      'displayName',
                    ],
                    required: ['lastSeenTimestamp', 'userID', 'displayName'],
                  },
                },
                subscribers: {
                  description:
                    'All of the users who are subscribed to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                repliers: {
                  description:
                    'All of the users who have replied to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                mentioned: {
                  description:
                    'All of the users who were mentioned in a message in this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                actionMessageRepliers: {
                  description:
                    "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                  type: 'string[]',
                  items: { type: 'string' },
                },
                typing: {
                  description:
                    'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
              },
              propertyOrder: [
                'unread',
                'viewerIsThreadParticipant',
                'firstMessage',
                'lastMessage',
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
              required: [
                'unread',
                'viewerIsThreadParticipant',
                'firstMessage',
                'lastMessage',
                'id',
                'groupID',
                'total',
                'userMessages',
                'actionMessages',
                'deletedMessages',
                'resolved',
                'resolvedTimestamp',
                'participants',
                'subscribers',
                'repliers',
                'mentioned',
                'actionMessageRepliers',
                'typing',
                'name',
                'url',
                'location',
                'metadata',
                'extraClassnames',
              ],
            },
          ],
        },
      },
      useLocationData: {
        name: 'useLocationData',
        summary:
          'This method allows you to observe detailed data about a [location](/reference/location), including live updates.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst { threads, loading, hasMore, fetchMore } = thread.useLocationData({\n  page: 'document_details',\n});\nreturn (\n  <div>\n    {threads.map((threadSummary) => (\n      <div key={threadSummary.id}>\n        Thread ID {threadSummary.id} has {threadSummary.total} messages!\n      </div>\n    ))}\n    {loading ? (\n      <div>Loading...</div>\n    ) : hasMore ? (\n      <div onClick={() => fetchMore(10)}>Fetch 10 more</div>\n    ) : null}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['location', 'options'],
          required: ['location'],
          properties: {
            location: {
              description:
                'The [location](/reference/location) to fetch data for.',
              type: 'Location',
            },
            options: {
              description: 'Miscellaneous options.',
              type: 'ObserveLocationDataOptions',
              properties: {
                sortBy: {
                  description:
                    'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
                  type: 'string',
                  enum: [
                    'first_message_timestamp',
                    'most_recent_message_timestamp',
                  ],
                },
                sortDirection: {
                  description:
                    'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
                  type: 'string',
                  enum: ['ascending', 'descending'],
                },
                partialMatch: {
                  description:
                    'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.  \n\nIf unset, defaults to `false`.',
                  type: 'boolean',
                },
                filter: {
                  description:
                    'An object that can be used to filter the threads returned.',
                  type: 'ThreadListFilter',
                  properties: {
                    metadata: {
                      description:
                        'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    location: {
                      description:
                        'The [Location](/reference/location) of the threads.',
                      type: 'Location',
                    },
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                    resolvedStatus: {
                      description:
                        'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `unresolved`.',
                      type: 'string',
                      enum: ['any', 'resolved', 'unresolved'],
                    },
                    viewer: {
                      description:
                        'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                      anyOf: [
                        { type: '"subscribed"' },
                        { type: '"mentioned"' },
                        {
                          type: 'ViewerThreadStatus[]',
                          items: {
                            type: 'string',
                            enum: ['subscribed', 'mentioned'],
                          },
                        },
                      ],
                    },
                  },
                  propertyOrder: [
                    'metadata',
                    'location',
                    'groupID',
                    'resolvedStatus',
                    'viewer',
                  ],
                  required: [],
                },
              },
              propertyOrder: [
                'sortBy',
                'sortDirection',
                'partialMatch',
                'filter',
              ],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          type: 'LocationData',
          properties: {
            loading: {
              description:
                'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
              type: 'boolean',
            },
            fetchMore: {
              description:
                "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
              type: 'FetchMoreCallback',
            },
            hasMore: {
              description:
                "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
              type: 'boolean',
            },
            threads: {
              description:
                'An array of [thread summary](/js-apis-and-hooks/thread-api/observeThreadSummary#Available-Data) objects. There will be one of each thread at the specified [location](/reference/location).  \n\nThis array is paginated. At first, it will contain summaries of only the first few threads. Calling `fetchMore` will cause further thread summaries to be appended to the array.  \n\nThe order in which you will receive the threads is determined by the sorting options.',
              type: 'ThreadSummary[]',
              items: {
                type: 'ThreadSummary',
                properties: {
                  unread: {
                    description:
                      "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                    type: 'number',
                  },
                  viewerIsThreadParticipant: {
                    description:
                      'Whether the current viewer has either left a message or reacted to this thread.',
                    type: 'boolean',
                  },
                  firstMessage: {
                    description:
                      'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  lastMessage: {
                    description:
                      'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  id: {
                    description: 'The ID for this thread.',
                    type: 'string',
                  },
                  groupID: {
                    description: 'The group ID this thread is in.',
                    type: 'string',
                  },
                  total: {
                    description:
                      'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  userMessages: {
                    description:
                      'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  actionMessages: {
                    description:
                      'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  deletedMessages: {
                    description:
                      'The number of deleted messages in this thread.',
                    type: 'number',
                  },
                  resolved: {
                    description:
                      'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                    type: 'boolean',
                  },
                  resolvedTimestamp: {
                    description:
                      'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  participants: {
                    description:
                      'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                    type: 'ThreadParticipant[]',
                    items: {
                      type: 'ThreadParticipant',
                      properties: {
                        lastSeenTimestamp: {
                          description:
                            'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        userID: {
                          description:
                            "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'lastSeenTimestamp',
                        'userID',
                        'displayName',
                      ],
                      required: ['lastSeenTimestamp', 'userID', 'displayName'],
                    },
                  },
                  subscribers: {
                    description:
                      'All of the users who are subscribed to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  repliers: {
                    description:
                      'All of the users who have replied to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  mentioned: {
                    description:
                      'All of the users who were mentioned in a message in this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  actionMessageRepliers: {
                    description:
                      "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  typing: {
                    description:
                      'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  name: {
                    description:
                      'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                    type: 'string',
                  },
                  location: {
                    description:
                      'The [location](/reference/location) of this thread.',
                    type: 'Location',
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'An optional space separated list of classnames to add to the thread.',
                    type: ['null', 'string'],
                  },
                },
                propertyOrder: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
                required: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
              },
            },
          },
          propertyOrder: ['loading', 'fetchMore', 'hasMore', 'threads'],
          required: ['loading', 'fetchMore', 'hasMore', 'threads'],
        },
      },
      useThreads: {
        name: 'useThreads',
        summary:
          'This method allows you to observe threads data including live updates.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst { threads, loading, hasMore, fetchMore, counts } = thread.useThreads({\n  sortBy: 'first_message_timestamp',\n  filter: {\n    location: {\n      value: { page: 'document_details' },\n      partialMatch: true\n    },\n    metadata: { category: 'sales' },\n  },\n});\n\nreturn (\n  <div>\n     {counts &&\n        <div>\n          We have {counts.total} total threads and {counts.unread} unread threads.\n        </div>\n      }\n    {threads.map((thread) => (\n      <div key={thread.id}>\n        Thread ID {thread.id} has {thread.total} messages!\n      </div>\n    ))}\n    {loading ? (\n      <div>Loading...</div>\n    ) : hasMore ? (\n      <div onClick={() => fetchMore(10)}>Fetch 10 more</div>\n    ) : null}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['options'],
          required: [],
          properties: {
            options: {
              description: 'Options that control which threads are returned.',
              type: 'ObserveThreadsOptions',
              properties: {
                sortBy: {
                  description:
                    'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
                  type: 'string',
                  enum: [
                    'first_message_timestamp',
                    'most_recent_message_timestamp',
                  ],
                },
                sortDirection: {
                  description:
                    'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
                  type: 'string',
                  enum: ['ascending', 'descending'],
                },
                filter: {
                  description:
                    'An object that can be used to filter the threads returned.',
                  type: 'ClientThreadFilter',
                  properties: {
                    location: {
                      description:
                        'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    resolvedStatus: {
                      description:
                        'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                      type: 'string',
                      enum: ['any', 'resolved', 'unresolved'],
                    },
                    metadata: {
                      description:
                        'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                    viewer: {
                      description:
                        'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                      anyOf: [
                        { type: '"subscribed"' },
                        { type: '"mentioned"' },
                        {
                          type: 'ViewerThreadStatus[]',
                          items: {
                            type: 'string',
                            enum: ['subscribed', 'mentioned'],
                          },
                        },
                      ],
                    },
                  },
                  propertyOrder: [
                    'location',
                    'resolvedStatus',
                    'metadata',
                    'groupID',
                    'viewer',
                  ],
                  required: [],
                },
                initialFetchCount: {
                  description:
                    'The number of threads to initially fetch. Once these are returned you can use the `fetchMore` property to get additional threads.  \n\nThe default for this is 10, and has a limit of 1000.',
                  type: 'number',
                },
              },
              propertyOrder: [
                'sortBy',
                'sortDirection',
                'filter',
                'initialFetchCount',
              ],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          type: 'ThreadsData',
          properties: {
            loading: {
              description:
                'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
              type: 'boolean',
            },
            fetchMore: {
              description:
                "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
              type: 'FetchMoreCallback',
            },
            hasMore: {
              description:
                "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
              type: 'boolean',
            },
            threads: {
              description:
                'An array of objects containing the threads that match the request.  \n\nThis array is paginated. At first, it will contain only the first few threads. Calling `fetchMore` will cause further threads to be appended to the array.  \n\nThe order in which you will receive the threads is determined by the sorting options.',
              type: 'ThreadSummary[]',
              items: {
                type: 'ThreadSummary',
                properties: {
                  unread: {
                    description:
                      "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                    type: 'number',
                  },
                  viewerIsThreadParticipant: {
                    description:
                      'Whether the current viewer has either left a message or reacted to this thread.',
                    type: 'boolean',
                  },
                  firstMessage: {
                    description:
                      'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  lastMessage: {
                    description:
                      'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                    anyOf: [
                      { type: 'null' },
                      {
                        type: 'ClientMessageData',
                        properties: {
                          seen: {
                            description:
                              'Whether the message has been seen by the current viewer.',
                            type: 'boolean',
                          },
                          id: {
                            description:
                              'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                            type: 'string',
                          },
                          authorID: {
                            description:
                              'The ID for the user that sent the message.',
                            type: 'string',
                          },
                          groupID: {
                            description:
                              'The ID for the group this message belongs to.',
                            type: 'string',
                          },
                          threadID: {
                            description:
                              'The ID for the thread this message is part of.',
                            type: 'string',
                          },
                          content: {
                            description: 'The content of the message.',
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          plaintext: {
                            description:
                              'A plaintext version of the structured message content.',
                            type: 'string',
                          },
                          url: {
                            description:
                              "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                            type: ['null', 'string'],
                          },
                          createdTimestamp: {
                            description:
                              'The timestamp when this message was created.  The default value is the current time.',
                            type: 'Date',
                          },
                          deletedTimestamp: {
                            description:
                              'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          updatedTimestamp: {
                            description:
                              'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          iconURL: {
                            description:
                              'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                            type: ['null', 'string'],
                          },
                          translationKey: {
                            description:
                              'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                            type: ['null', 'string'],
                          },
                          type: {
                            description:
                              'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                            type: 'string',
                            enum: ['action_message', 'user_message'],
                          },
                          metadata: {
                            description:
                              'Arbitrary key-value pairs that can be used to store additional information.',
                            type: 'EntityMetadata',
                          },
                          extraClassnames: {
                            description:
                              'A optional space separated list of classnames to add to the message.',
                            type: ['null', 'string'],
                          },
                          attachments: {
                            description: 'The items attached to this message.',
                            type: 'MessageAttachment[]',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageFileAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `file` for file attachments.',
                                      type: '"file"',
                                    },
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                                {
                                  type: 'MessageAnnotationAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `annotation` for annotation attachments.',
                                      type: '"annotation"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the annotation, if any.',
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      ],
                                    },
                                    locationData: {
                                      description:
                                        'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                      type: ['null', 'string'],
                                    },
                                    customData: {
                                      description:
                                        "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                      anyOf: [
                                        { type: 'null' },
                                        {
                                          type: 'CustomAnnotationData',
                                          properties: {
                                            location: {
                                              description:
                                                'The custom location you produced for this annotation at annotation capture time.',
                                              type: 'Location',
                                            },
                                            coordsRelativeToTarget: {
                                              description:
                                                'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                              type: 'object',
                                              properties: {
                                                x: { type: 'number' },
                                                y: { type: 'number' },
                                              },
                                              propertyOrder: ['x', 'y'],
                                              required: ['x', 'y'],
                                            },
                                            label: {
                                              description:
                                                'Your custom user-visible label for the annotation, if any.',
                                              type: ['null', 'string'],
                                            },
                                          },
                                          propertyOrder: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                          required: [
                                            'location',
                                            'coordsRelativeToTarget',
                                            'label',
                                          ],
                                        },
                                      ],
                                    },
                                    textContent: {
                                      description:
                                        'The text that was selected when creating the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                  required: [
                                    'type',
                                    'screenshot',
                                    'locationData',
                                    'customData',
                                    'textContent',
                                  ],
                                },
                                {
                                  type: 'MessageScreenshotAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                      type: '"screenshot"',
                                    },
                                    screenshot: {
                                      description:
                                        'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  },
                                  propertyOrder: ['type', 'screenshot'],
                                  required: ['type', 'screenshot'],
                                },
                                {
                                  type: 'MessageLinkPreviewAttachment',
                                  properties: {
                                    type: {
                                      description:
                                        'The type of this attachment, which is always `link_preview` for file link previews.',
                                      type: '"link_preview"',
                                    },
                                    id: {
                                      description:
                                        'The ID of the link preview attachment.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The url from which the preview was generated.',
                                      type: 'string',
                                    },
                                    imageURL: {
                                      description:
                                        'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                      type: ['null', 'string'],
                                    },
                                    title: {
                                      description:
                                        "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                      type: ['null', 'string'],
                                    },
                                    description: {
                                      description:
                                        'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                  required: [
                                    'type',
                                    'id',
                                    'url',
                                    'imageURL',
                                    'title',
                                    'description',
                                  ],
                                },
                              ],
                            },
                          },
                          reactions: {
                            description: 'The reactions to this message.',
                            type: 'Reaction[]',
                            items: {
                              type: 'Reaction',
                              properties: {
                                reaction: {
                                  description: 'The emoji reaction.',
                                  type: 'string',
                                },
                                userID: {
                                  description:
                                    'The ID of the user who reacted to the message.',
                                  type: 'string',
                                },
                                timestamp: {
                                  description:
                                    'The timestamp of when the reaction was created.',
                                  type: 'Date',
                                },
                              },
                              propertyOrder: [
                                'reaction',
                                'userID',
                                'timestamp',
                              ],
                              required: ['reaction', 'userID', 'timestamp'],
                            },
                          },
                          seenBy: {
                            description:
                              'A list of IDs of the users that have seen the message.',
                            type: 'string[]',
                            items: { type: 'string' },
                          },
                          skipLinkPreviews: {
                            description:
                              "If set, Cord won't analyze links in the message to generate previews.",
                            type: 'boolean',
                          },
                        },
                        propertyOrder: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                        required: [
                          'seen',
                          'id',
                          'authorID',
                          'groupID',
                          'threadID',
                          'content',
                          'plaintext',
                          'url',
                          'createdTimestamp',
                          'deletedTimestamp',
                          'updatedTimestamp',
                          'iconURL',
                          'translationKey',
                          'type',
                          'metadata',
                          'extraClassnames',
                          'attachments',
                          'reactions',
                          'seenBy',
                          'skipLinkPreviews',
                        ],
                      },
                    ],
                  },
                  id: {
                    description: 'The ID for this thread.',
                    type: 'string',
                  },
                  groupID: {
                    description: 'The group ID this thread is in.',
                    type: 'string',
                  },
                  total: {
                    description:
                      'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  userMessages: {
                    description:
                      'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  actionMessages: {
                    description:
                      'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                    type: 'number',
                  },
                  deletedMessages: {
                    description:
                      'The number of deleted messages in this thread.',
                    type: 'number',
                  },
                  resolved: {
                    description:
                      'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                    type: 'boolean',
                  },
                  resolvedTimestamp: {
                    description:
                      'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  participants: {
                    description:
                      'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                    type: 'ThreadParticipant[]',
                    items: {
                      type: 'ThreadParticipant',
                      properties: {
                        lastSeenTimestamp: {
                          description:
                            'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        userID: {
                          description:
                            "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'lastSeenTimestamp',
                        'userID',
                        'displayName',
                      ],
                      required: ['lastSeenTimestamp', 'userID', 'displayName'],
                    },
                  },
                  subscribers: {
                    description:
                      'All of the users who are subscribed to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  repliers: {
                    description:
                      'All of the users who have replied to this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  mentioned: {
                    description:
                      'All of the users who were mentioned in a message in this thread.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  actionMessageRepliers: {
                    description:
                      "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  typing: {
                    description:
                      'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  name: {
                    description:
                      'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                    type: 'string',
                  },
                  location: {
                    description:
                      'The [location](/reference/location) of this thread.',
                    type: 'Location',
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'An optional space separated list of classnames to add to the thread.',
                    type: ['null', 'string'],
                  },
                },
                propertyOrder: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
                required: [
                  'unread',
                  'viewerIsThreadParticipant',
                  'firstMessage',
                  'lastMessage',
                  'id',
                  'groupID',
                  'total',
                  'userMessages',
                  'actionMessages',
                  'deletedMessages',
                  'resolved',
                  'resolvedTimestamp',
                  'participants',
                  'subscribers',
                  'repliers',
                  'mentioned',
                  'actionMessageRepliers',
                  'typing',
                  'name',
                  'url',
                  'location',
                  'metadata',
                  'extraClassnames',
                ],
              },
            },
            counts: {
              description:
                'An object providing counts of threads. Refer to [observeThreadCount API](/js-apis-and-hooks/thread-api/observeThreadCounts#Available-Data) for more information about the properties returned.',
              type: 'ThreadActivitySummary',
              properties: {
                total: {
                  description:
                    'The total number of threads, both resolved and unresolved. This does not include threads in which all messages have been deleted.',
                  type: 'number',
                },
                unread: {
                  description:
                    'The total number of threads that contain *at least one* unread message in the thread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                  type: 'number',
                },
                unreadSubscribed: {
                  description:
                    "The number of threads that have messages the current user hasn't seen yet and is subscribed to.  \n\nA user is automatically subscribed to threads relevant to them, for example because they have sent a message or have been @-mentioned in them. `unreadSubscribed` is always less than or equal to `unread`.",
                  type: 'number',
                },
                new: {
                  description:
                    'The total number of threads that the user has never seen before at all, i.e., *every* message in the thread is unread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                  type: 'number',
                },
                resolved: {
                  description:
                    "The number of resolved threads. This refers to threads that users have manually marked as resolved within Cord's UI components.",
                  type: 'number',
                },
                empty: {
                  description:
                    'The number of thread with no visible messages. This refers to threads in which all the messages have been deleted.',
                  type: 'number',
                },
              },
              propertyOrder: [
                'total',
                'unread',
                'unreadSubscribed',
                'new',
                'resolved',
                'empty',
              ],
              required: [
                'total',
                'unread',
                'unreadSubscribed',
                'new',
                'resolved',
                'empty',
              ],
            },
          },
          propertyOrder: [
            'loading',
            'fetchMore',
            'hasMore',
            'threads',
            'counts',
          ],
          required: ['loading', 'fetchMore', 'hasMore', 'threads'],
        },
      },
      useThreadData: {
        name: 'useThreadData',
        summary:
          'This method allows you to observe summary and detailed data about a thread, including live updates.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst { messages, loading, hasMore, fetchMore } = thread.useThreadData('my-awesome-thread-id');\n\nreturn (\n  <div>\n    {messages.map((messageSummary) => (\n      <div key={messageSummary.id}>\n        Message ID {messageSummary.id} was created at {messageSummary.createdTimestamp}!\n      </div>\n    ))}\n    {loading ? (\n      <div>Loading...</div>\n    ) : hasMore ? (\n      <div onClick={() => fetchMore(10)}>Fetch 10 more</div>\n    ) : null}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['threadId', 'options'],
          required: ['threadId'],
          properties: {
            threadId: {
              description: 'The thread ID to fetch data for.',
              type: 'string',
            },
            options: {
              description: 'Options for creating new threads.',
              type: 'ThreadObserverOptions',
              properties: {
                filter: {
                  description:
                    "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
                  type: 'ClientThreadFilter',
                  properties: {
                    location: {
                      description:
                        'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    resolvedStatus: {
                      description:
                        'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                      type: 'string',
                      enum: ['any', 'resolved', 'unresolved'],
                    },
                    metadata: {
                      description:
                        'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                    viewer: {
                      description:
                        'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                      anyOf: [
                        { type: '"subscribed"' },
                        { type: '"mentioned"' },
                        {
                          type: 'ViewerThreadStatus[]',
                          items: {
                            type: 'string',
                            enum: ['subscribed', 'mentioned'],
                          },
                        },
                      ],
                    },
                  },
                  propertyOrder: [
                    'location',
                    'resolvedStatus',
                    'metadata',
                    'groupID',
                    'viewer',
                  ],
                  required: [],
                },
                initialFetchCount: {
                  description:
                    'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
                  type: 'number',
                },
              },
              propertyOrder: ['filter', 'initialFetchCount'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          type: 'ThreadData',
          properties: {
            firstMessage: {
              description:
                'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
              anyOf: [
                { type: 'null' },
                {
                  type: 'ClientMessageData',
                  properties: {
                    seen: {
                      description:
                        'Whether the message has been seen by the current viewer.',
                      type: 'boolean',
                    },
                    id: {
                      description:
                        'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                      type: 'string',
                    },
                    authorID: {
                      description: 'The ID for the user that sent the message.',
                      type: 'string',
                    },
                    groupID: {
                      description:
                        'The ID for the group this message belongs to.',
                      type: 'string',
                    },
                    threadID: {
                      description:
                        'The ID for the thread this message is part of.',
                      type: 'string',
                    },
                    content: {
                      description: 'The content of the message.',
                      type: 'MessageContent',
                      items: {
                        anyOf: [
                          {
                            type: 'MessageAssigneeNode',
                            properties: {
                              type: { type: 'MessageNodeType.ASSIGNEE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              user: {
                                type: 'object',
                                properties: { id: { type: 'string' } },
                                propertyOrder: ['id'],
                                required: ['id'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'user',
                            ],
                            required: ['type', 'children', 'user'],
                          },
                          {
                            type: 'MessageBulletNode',
                            properties: {
                              type: { type: 'MessageNodeType.BULLET' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              indent: { type: 'number' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'indent',
                            ],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageCodeNode',
                            properties: {
                              type: { type: 'MessageNodeType.CODE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageLinkNode',
                            properties: {
                              type: { type: 'MessageNodeType.LINK' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              url: { type: 'string' },
                            },
                            propertyOrder: ['type', 'class', 'children', 'url'],
                            required: ['type', 'children', 'url'],
                          },
                          {
                            type: 'MessageMentionNode',
                            properties: {
                              type: { type: 'MessageNodeType.MENTION' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              user: {
                                type: 'object',
                                properties: { id: { type: 'string' } },
                                propertyOrder: ['id'],
                                required: ['id'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'user',
                            ],
                            required: ['type', 'children', 'user'],
                          },
                          {
                            type: 'MessageNumberBulletNode',
                            properties: {
                              type: { type: 'MessageNodeType.NUMBER_BULLET' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              bulletNumber: { type: 'number' },
                              indent: { type: 'number' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'bulletNumber',
                              'indent',
                            ],
                            required: ['type', 'children', 'bulletNumber'],
                          },
                          {
                            type: 'MessageParagraphNode',
                            properties: {
                              type: { type: 'MessageNodeType.PARAGRAPH' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageQuoteNode',
                            properties: {
                              type: { type: 'MessageNodeType.QUOTE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageTextNode',
                            properties: {
                              type: { type: 'undefined' },
                              class: { type: 'string' },
                              text: { type: 'string' },
                              bold: { type: 'boolean' },
                              italic: { type: 'boolean' },
                              underline: { type: 'boolean' },
                              code: { type: 'boolean' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'text',
                              'bold',
                              'italic',
                              'underline',
                              'code',
                            ],
                            required: ['text'],
                          },
                          {
                            type: 'MessageTodoNode',
                            properties: {
                              type: { type: 'MessageNodeType.TODO' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              todoID: { type: 'string' },
                              done: { type: 'boolean' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'todoID',
                              'done',
                            ],
                            required: ['type', 'children', 'todoID', 'done'],
                          },
                          {
                            type: 'MessageMarkdownNode',
                            properties: {
                              type: { type: 'MessageNodeType.MARKDOWN' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                        ],
                      },
                    },
                    plaintext: {
                      description:
                        'A plaintext version of the structured message content.',
                      type: 'string',
                    },
                    url: {
                      description:
                        "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                      type: ['null', 'string'],
                    },
                    createdTimestamp: {
                      description:
                        'The timestamp when this message was created.  The default value is the current time.',
                      type: 'Date',
                    },
                    deletedTimestamp: {
                      description:
                        'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    updatedTimestamp: {
                      description:
                        'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    iconURL: {
                      description:
                        'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                      type: ['null', 'string'],
                    },
                    translationKey: {
                      description:
                        'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                      type: ['null', 'string'],
                    },
                    type: {
                      description:
                        'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                      type: 'string',
                      enum: ['action_message', 'user_message'],
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    extraClassnames: {
                      description:
                        'A optional space separated list of classnames to add to the message.',
                      type: ['null', 'string'],
                    },
                    attachments: {
                      description: 'The items attached to this message.',
                      type: 'MessageAttachment[]',
                      items: {
                        anyOf: [
                          {
                            type: 'MessageFileAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `file` for file attachments.',
                                type: '"file"',
                              },
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'type',
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                          {
                            type: 'MessageAnnotationAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `annotation` for annotation attachments.',
                                type: '"annotation"',
                              },
                              screenshot: {
                                description:
                                  'The screenshot attached to the annotation, if any.',
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                ],
                              },
                              locationData: {
                                description:
                                  'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                type: ['null', 'string'],
                              },
                              customData: {
                                description:
                                  "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'CustomAnnotationData',
                                    properties: {
                                      location: {
                                        description:
                                          'The custom location you produced for this annotation at annotation capture time.',
                                        type: 'Location',
                                      },
                                      coordsRelativeToTarget: {
                                        description:
                                          'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                        type: 'object',
                                        properties: {
                                          x: { type: 'number' },
                                          y: { type: 'number' },
                                        },
                                        propertyOrder: ['x', 'y'],
                                        required: ['x', 'y'],
                                      },
                                      label: {
                                        description:
                                          'Your custom user-visible label for the annotation, if any.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'location',
                                      'coordsRelativeToTarget',
                                      'label',
                                    ],
                                    required: [
                                      'location',
                                      'coordsRelativeToTarget',
                                      'label',
                                    ],
                                  },
                                ],
                              },
                              textContent: {
                                description:
                                  'The text that was selected when creating the annotation, if any.',
                                type: ['null', 'string'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'screenshot',
                              'locationData',
                              'customData',
                              'textContent',
                            ],
                            required: [
                              'type',
                              'screenshot',
                              'locationData',
                              'customData',
                              'textContent',
                            ],
                          },
                          {
                            type: 'MessageScreenshotAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                type: '"screenshot"',
                              },
                              screenshot: {
                                description:
                                  'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            },
                            propertyOrder: ['type', 'screenshot'],
                            required: ['type', 'screenshot'],
                          },
                          {
                            type: 'MessageLinkPreviewAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `link_preview` for file link previews.',
                                type: '"link_preview"',
                              },
                              id: {
                                description:
                                  'The ID of the link preview attachment.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The url from which the preview was generated.',
                                type: 'string',
                              },
                              imageURL: {
                                description:
                                  'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                type: ['null', 'string'],
                              },
                              title: {
                                description:
                                  "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                type: ['null', 'string'],
                              },
                              description: {
                                description:
                                  'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                type: ['null', 'string'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'id',
                              'url',
                              'imageURL',
                              'title',
                              'description',
                            ],
                            required: [
                              'type',
                              'id',
                              'url',
                              'imageURL',
                              'title',
                              'description',
                            ],
                          },
                        ],
                      },
                    },
                    reactions: {
                      description: 'The reactions to this message.',
                      type: 'Reaction[]',
                      items: {
                        type: 'Reaction',
                        properties: {
                          reaction: {
                            description: 'The emoji reaction.',
                            type: 'string',
                          },
                          userID: {
                            description:
                              'The ID of the user who reacted to the message.',
                            type: 'string',
                          },
                          timestamp: {
                            description:
                              'The timestamp of when the reaction was created.',
                            type: 'Date',
                          },
                        },
                        propertyOrder: ['reaction', 'userID', 'timestamp'],
                        required: ['reaction', 'userID', 'timestamp'],
                      },
                    },
                    seenBy: {
                      description:
                        'A list of IDs of the users that have seen the message.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    skipLinkPreviews: {
                      description:
                        "If set, Cord won't analyze links in the message to generate previews.",
                      type: 'boolean',
                    },
                  },
                  propertyOrder: [
                    'seen',
                    'id',
                    'authorID',
                    'groupID',
                    'threadID',
                    'content',
                    'plaintext',
                    'url',
                    'createdTimestamp',
                    'deletedTimestamp',
                    'updatedTimestamp',
                    'iconURL',
                    'translationKey',
                    'type',
                    'metadata',
                    'extraClassnames',
                    'attachments',
                    'reactions',
                    'seenBy',
                    'skipLinkPreviews',
                  ],
                  required: [
                    'seen',
                    'id',
                    'authorID',
                    'groupID',
                    'threadID',
                    'content',
                    'plaintext',
                    'url',
                    'createdTimestamp',
                    'deletedTimestamp',
                    'updatedTimestamp',
                    'iconURL',
                    'translationKey',
                    'type',
                    'metadata',
                    'extraClassnames',
                    'attachments',
                    'reactions',
                    'seenBy',
                    'skipLinkPreviews',
                  ],
                },
              ],
            },
            messages: {
              description:
                'An array of objects, one for each message in the specified thread.  \n\nThis array is paginated. At first, it will contain summaries of only the latest (newest) few messages. Calling `fetchMore` will cause further message summaries to be appended to the array.',
              type: 'ClientMessageData[]',
              items: {
                type: 'ClientMessageData',
                properties: {
                  seen: {
                    description:
                      'Whether the message has been seen by the current viewer.',
                    type: 'boolean',
                  },
                  id: {
                    description:
                      'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                    type: 'string',
                  },
                  authorID: {
                    description: 'The ID for the user that sent the message.',
                    type: 'string',
                  },
                  groupID: {
                    description:
                      'The ID for the group this message belongs to.',
                    type: 'string',
                  },
                  threadID: {
                    description:
                      'The ID for the thread this message is part of.',
                    type: 'string',
                  },
                  content: {
                    description: 'The content of the message.',
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: {
                    description:
                      'A plaintext version of the structured message content.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                    type: ['null', 'string'],
                  },
                  createdTimestamp: {
                    description:
                      'The timestamp when this message was created.  The default value is the current time.',
                    type: 'Date',
                  },
                  deletedTimestamp: {
                    description:
                      'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  updatedTimestamp: {
                    description:
                      'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  iconURL: {
                    description:
                      'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                    type: ['null', 'string'],
                  },
                  translationKey: {
                    description:
                      'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                    type: ['null', 'string'],
                  },
                  type: {
                    description:
                      'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'A optional space separated list of classnames to add to the message.',
                    type: ['null', 'string'],
                  },
                  attachments: {
                    description: 'The items attached to this message.',
                    type: 'MessageAttachment[]',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageFileAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `file` for file attachments.',
                              type: '"file"',
                            },
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                        {
                          type: 'MessageAnnotationAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `annotation` for annotation attachments.',
                              type: '"annotation"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the annotation, if any.',
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              ],
                            },
                            locationData: {
                              description:
                                'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                              type: ['null', 'string'],
                            },
                            customData: {
                              description:
                                "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'CustomAnnotationData',
                                  properties: {
                                    location: {
                                      description:
                                        'The custom location you produced for this annotation at annotation capture time.',
                                      type: 'Location',
                                    },
                                    coordsRelativeToTarget: {
                                      description:
                                        'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                      type: 'object',
                                      properties: {
                                        x: { type: 'number' },
                                        y: { type: 'number' },
                                      },
                                      propertyOrder: ['x', 'y'],
                                      required: ['x', 'y'],
                                    },
                                    label: {
                                      description:
                                        'Your custom user-visible label for the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                  required: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                },
                              ],
                            },
                            textContent: {
                              description:
                                'The text that was selected when creating the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                          required: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                        },
                        {
                          type: 'MessageScreenshotAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                              type: '"screenshot"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'screenshot'],
                          required: ['type', 'screenshot'],
                        },
                        {
                          type: 'MessageLinkPreviewAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `link_preview` for file link previews.',
                              type: '"link_preview"',
                            },
                            id: {
                              description:
                                'The ID of the link preview attachment.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The url from which the preview was generated.',
                              type: 'string',
                            },
                            imageURL: {
                              description:
                                'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                              type: ['null', 'string'],
                            },
                            title: {
                              description:
                                "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                              type: ['null', 'string'],
                            },
                            description: {
                              description:
                                'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                          required: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                        },
                      ],
                    },
                  },
                  reactions: {
                    description: 'The reactions to this message.',
                    type: 'Reaction[]',
                    items: {
                      type: 'Reaction',
                      properties: {
                        reaction: {
                          description: 'The emoji reaction.',
                          type: 'string',
                        },
                        userID: {
                          description:
                            'The ID of the user who reacted to the message.',
                          type: 'string',
                        },
                        timestamp: {
                          description:
                            'The timestamp of when the reaction was created.',
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['reaction', 'userID', 'timestamp'],
                      required: ['reaction', 'userID', 'timestamp'],
                    },
                  },
                  seenBy: {
                    description:
                      'A list of IDs of the users that have seen the message.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  skipLinkPreviews: {
                    description:
                      "If set, Cord won't analyze links in the message to generate previews.",
                    type: 'boolean',
                  },
                },
                propertyOrder: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
                required: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
              },
            },
            loading: {
              description:
                'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
              type: 'boolean',
            },
            fetchMore: {
              description:
                "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
              type: 'FetchMoreCallback',
            },
            hasMore: {
              description:
                "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
              type: 'boolean',
            },
          },
          propertyOrder: [
            'firstMessage',
            'messages',
            'loading',
            'fetchMore',
            'hasMore',
          ],
          required: [
            'firstMessage',
            'messages',
            'loading',
            'fetchMore',
            'hasMore',
          ],
        },
      },
      useThread: {
        name: 'useThread',
        summary:
          'This hook allows you to observe message and summary data about a thread, including live updates.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst { messages, thread, loading, hasMore, fetchMore } = thread.useThread('my-awesome-thread-id');\n\nreturn (\n  <div>\n    {thread ?\n      <p> {thread.unread} / {thread.total} unread messages </p>\n      : null}\n    {messages.map((messageSummary) => (\n      <div key={messageSummary.id}>\n        Message ID {messageSummary.id} was created at {messageSummary.createdTimestamp}!\n      </div>\n    ))}\n    {loading ? (\n      <div>Loading...</div>\n    ) : hasMore ? (\n      <div onClick={() => fetchMore(10)}>Fetch 10 more</div>\n    ) : null}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['threadID', 'options'],
          required: [],
          properties: {
            threadID: {
              description: 'The thread ID to fetch data for.',
              type: 'string',
            },
            options: {
              description: 'Options for creating new threads.',
              type: 'ReactThreadObserverOptions',
              properties: {
                filter: {
                  description:
                    "An object that can be used to filter the thread returned. In most cases, you won't need to use this -- fetching a single thread but then filtering it out isn't useful in most cases. However, it can be useful to make sure the result of this function matches the filter of another Cord component or hook.",
                  type: 'ClientThreadFilter',
                  properties: {
                    location: {
                      description:
                        'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    resolvedStatus: {
                      description:
                        'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                      type: 'string',
                      enum: ['any', 'resolved', 'unresolved'],
                    },
                    metadata: {
                      description:
                        'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                    viewer: {
                      description:
                        'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                      anyOf: [
                        { type: '"subscribed"' },
                        { type: '"mentioned"' },
                        {
                          type: 'ViewerThreadStatus[]',
                          items: {
                            type: 'string',
                            enum: ['subscribed', 'mentioned'],
                          },
                        },
                      ],
                    },
                  },
                  propertyOrder: [
                    'location',
                    'resolvedStatus',
                    'metadata',
                    'groupID',
                    'viewer',
                  ],
                  required: [],
                },
                initialFetchCount: {
                  description:
                    'The number of messages to initially fetch. Once these are returned you can use the `fetchMore` property to get additional messages.  \n\nIf not specified, the number of initial messages will be determined dynamically based on the state of the thread and which messages the user has read.',
                  type: 'number',
                },
                skip: {
                  description:
                    'When set to true, prevents the execution of any operations within the hook.',
                  type: 'boolean',
                },
              },
              propertyOrder: ['filter', 'initialFetchCount', 'skip'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'Returns an object containing the fields described under "Available Data" above. Initially, `loading` will be `true`, `thread` will be `undefined`, and `messages` an empty array while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the full data. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          type: 'ClientThreadData',
          properties: {
            messages: {
              description:
                'An array of objects, one for each message in the specified thread.  \n\nThis array is paginated. At first, it will contain only the latest (newest) messages. Calling `fetchMore` will cause further messages to be appended to the array.',
              type: 'ClientMessageData[]',
              items: {
                type: 'ClientMessageData',
                properties: {
                  seen: {
                    description:
                      'Whether the message has been seen by the current viewer.',
                    type: 'boolean',
                  },
                  id: {
                    description:
                      'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                    type: 'string',
                  },
                  authorID: {
                    description: 'The ID for the user that sent the message.',
                    type: 'string',
                  },
                  groupID: {
                    description:
                      'The ID for the group this message belongs to.',
                    type: 'string',
                  },
                  threadID: {
                    description:
                      'The ID for the thread this message is part of.',
                    type: 'string',
                  },
                  content: {
                    description: 'The content of the message.',
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: {
                    description:
                      'A plaintext version of the structured message content.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                    type: ['null', 'string'],
                  },
                  createdTimestamp: {
                    description:
                      'The timestamp when this message was created.  The default value is the current time.',
                    type: 'Date',
                  },
                  deletedTimestamp: {
                    description:
                      'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  updatedTimestamp: {
                    description:
                      'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  iconURL: {
                    description:
                      'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                    type: ['null', 'string'],
                  },
                  translationKey: {
                    description:
                      'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                    type: ['null', 'string'],
                  },
                  type: {
                    description:
                      'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'A optional space separated list of classnames to add to the message.',
                    type: ['null', 'string'],
                  },
                  attachments: {
                    description: 'The items attached to this message.',
                    type: 'MessageAttachment[]',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageFileAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `file` for file attachments.',
                              type: '"file"',
                            },
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                        {
                          type: 'MessageAnnotationAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `annotation` for annotation attachments.',
                              type: '"annotation"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the annotation, if any.',
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              ],
                            },
                            locationData: {
                              description:
                                'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                              type: ['null', 'string'],
                            },
                            customData: {
                              description:
                                "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'CustomAnnotationData',
                                  properties: {
                                    location: {
                                      description:
                                        'The custom location you produced for this annotation at annotation capture time.',
                                      type: 'Location',
                                    },
                                    coordsRelativeToTarget: {
                                      description:
                                        'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                      type: 'object',
                                      properties: {
                                        x: { type: 'number' },
                                        y: { type: 'number' },
                                      },
                                      propertyOrder: ['x', 'y'],
                                      required: ['x', 'y'],
                                    },
                                    label: {
                                      description:
                                        'Your custom user-visible label for the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                  required: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                },
                              ],
                            },
                            textContent: {
                              description:
                                'The text that was selected when creating the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                          required: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                        },
                        {
                          type: 'MessageScreenshotAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                              type: '"screenshot"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'screenshot'],
                          required: ['type', 'screenshot'],
                        },
                        {
                          type: 'MessageLinkPreviewAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `link_preview` for file link previews.',
                              type: '"link_preview"',
                            },
                            id: {
                              description:
                                'The ID of the link preview attachment.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The url from which the preview was generated.',
                              type: 'string',
                            },
                            imageURL: {
                              description:
                                'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                              type: ['null', 'string'],
                            },
                            title: {
                              description:
                                "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                              type: ['null', 'string'],
                            },
                            description: {
                              description:
                                'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                          required: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                        },
                      ],
                    },
                  },
                  reactions: {
                    description: 'The reactions to this message.',
                    type: 'Reaction[]',
                    items: {
                      type: 'Reaction',
                      properties: {
                        reaction: {
                          description: 'The emoji reaction.',
                          type: 'string',
                        },
                        userID: {
                          description:
                            'The ID of the user who reacted to the message.',
                          type: 'string',
                        },
                        timestamp: {
                          description:
                            'The timestamp of when the reaction was created.',
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['reaction', 'userID', 'timestamp'],
                      required: ['reaction', 'userID', 'timestamp'],
                    },
                  },
                  seenBy: {
                    description:
                      'A list of IDs of the users that have seen the message.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  skipLinkPreviews: {
                    description:
                      "If set, Cord won't analyze links in the message to generate previews.",
                    type: 'boolean',
                  },
                },
                propertyOrder: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
                required: [
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
              },
            },
            thread: {
              description:
                'Information about the thread.  This will be undefined if the thread is still loading and null if the thread does not exist.',
              anyOf: [
                { type: 'null' },
                {
                  type: 'ThreadSummary',
                  properties: {
                    unread: {
                      description:
                        "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                      type: 'number',
                    },
                    viewerIsThreadParticipant: {
                      description:
                        'Whether the current viewer has either left a message or reacted to this thread.',
                      type: 'boolean',
                    },
                    firstMessage: {
                      description:
                        'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'ClientMessageData',
                          properties: {
                            seen: {
                              description:
                                'Whether the message has been seen by the current viewer.',
                              type: 'boolean',
                            },
                            id: {
                              description:
                                'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                              type: 'string',
                            },
                            authorID: {
                              description:
                                'The ID for the user that sent the message.',
                              type: 'string',
                            },
                            groupID: {
                              description:
                                'The ID for the group this message belongs to.',
                              type: 'string',
                            },
                            threadID: {
                              description:
                                'The ID for the thread this message is part of.',
                              type: 'string',
                            },
                            content: {
                              description: 'The content of the message.',
                              type: 'MessageContent',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageAssigneeNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.ASSIGNEE',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageBulletNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.BULLET' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'indent',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageCodeNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.CODE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageLinkNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.LINK' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      url: { type: 'string' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'url',
                                    ],
                                    required: ['type', 'children', 'url'],
                                  },
                                  {
                                    type: 'MessageMentionNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.MENTION' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageNumberBulletNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.NUMBER_BULLET',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      bulletNumber: { type: 'number' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'bulletNumber',
                                      'indent',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'bulletNumber',
                                    ],
                                  },
                                  {
                                    type: 'MessageParagraphNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.PARAGRAPH',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageQuoteNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.QUOTE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageTextNode',
                                    properties: {
                                      type: { type: 'undefined' },
                                      class: { type: 'string' },
                                      text: { type: 'string' },
                                      bold: { type: 'boolean' },
                                      italic: { type: 'boolean' },
                                      underline: { type: 'boolean' },
                                      code: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'text',
                                      'bold',
                                      'italic',
                                      'underline',
                                      'code',
                                    ],
                                    required: ['text'],
                                  },
                                  {
                                    type: 'MessageTodoNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.TODO' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      todoID: { type: 'string' },
                                      done: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                  },
                                  {
                                    type: 'MessageMarkdownNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.MARKDOWN',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                ],
                              },
                            },
                            plaintext: {
                              description:
                                'A plaintext version of the structured message content.',
                              type: 'string',
                            },
                            url: {
                              description:
                                "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                              type: ['null', 'string'],
                            },
                            createdTimestamp: {
                              description:
                                'The timestamp when this message was created.  The default value is the current time.',
                              type: 'Date',
                            },
                            deletedTimestamp: {
                              description:
                                'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            updatedTimestamp: {
                              description:
                                'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            iconURL: {
                              description:
                                'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                              type: ['null', 'string'],
                            },
                            translationKey: {
                              description:
                                'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                              type: ['null', 'string'],
                            },
                            type: {
                              description:
                                'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                              type: 'string',
                              enum: ['action_message', 'user_message'],
                            },
                            metadata: {
                              description:
                                'Arbitrary key-value pairs that can be used to store additional information.',
                              type: 'EntityMetadata',
                            },
                            extraClassnames: {
                              description:
                                'A optional space separated list of classnames to add to the message.',
                              type: ['null', 'string'],
                            },
                            attachments: {
                              description:
                                'The items attached to this message.',
                              type: 'MessageAttachment[]',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageFileAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `file` for file attachments.',
                                        type: '"file"',
                                      },
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                  {
                                    type: 'MessageAnnotationAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `annotation` for annotation attachments.',
                                        type: '"annotation"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the annotation, if any.',
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'UploadedFile',
                                            properties: {
                                              id: {
                                                description:
                                                  'The ID of the file.',
                                                type: 'string',
                                              },
                                              name: {
                                                description:
                                                  'The name of the file.',
                                                type: 'string',
                                              },
                                              url: {
                                                description:
                                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                type: 'string',
                                              },
                                              mimeType: {
                                                description:
                                                  'The MIME type of the file.',
                                                type: 'string',
                                              },
                                              size: {
                                                description:
                                                  'The size of the file, in bytes.',
                                                type: 'number',
                                              },
                                              uploadStatus: {
                                                description:
                                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                type: 'string',
                                                enum: [
                                                  'uploading',
                                                  'uploaded',
                                                  'failed',
                                                  'cancelled',
                                                ],
                                              },
                                            },
                                            propertyOrder: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                            required: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                          },
                                        ],
                                      },
                                      locationData: {
                                        description:
                                          'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                        type: ['null', 'string'],
                                      },
                                      customData: {
                                        description:
                                          "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'CustomAnnotationData',
                                            properties: {
                                              location: {
                                                description:
                                                  'The custom location you produced for this annotation at annotation capture time.',
                                                type: 'Location',
                                              },
                                              coordsRelativeToTarget: {
                                                description:
                                                  'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                type: 'object',
                                                properties: {
                                                  x: { type: 'number' },
                                                  y: { type: 'number' },
                                                },
                                                propertyOrder: ['x', 'y'],
                                                required: ['x', 'y'],
                                              },
                                              label: {
                                                description:
                                                  'Your custom user-visible label for the annotation, if any.',
                                                type: ['null', 'string'],
                                              },
                                            },
                                            propertyOrder: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                            required: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                          },
                                        ],
                                      },
                                      textContent: {
                                        description:
                                          'The text that was selected when creating the annotation, if any.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                    required: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                  },
                                  {
                                    type: 'MessageScreenshotAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                        type: '"screenshot"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    },
                                    propertyOrder: ['type', 'screenshot'],
                                    required: ['type', 'screenshot'],
                                  },
                                  {
                                    type: 'MessageLinkPreviewAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `link_preview` for file link previews.',
                                        type: '"link_preview"',
                                      },
                                      id: {
                                        description:
                                          'The ID of the link preview attachment.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The url from which the preview was generated.',
                                        type: 'string',
                                      },
                                      imageURL: {
                                        description:
                                          'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                        type: ['null', 'string'],
                                      },
                                      title: {
                                        description:
                                          "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                        type: ['null', 'string'],
                                      },
                                      description: {
                                        description:
                                          'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                  },
                                ],
                              },
                            },
                            reactions: {
                              description: 'The reactions to this message.',
                              type: 'Reaction[]',
                              items: {
                                type: 'Reaction',
                                properties: {
                                  reaction: {
                                    description: 'The emoji reaction.',
                                    type: 'string',
                                  },
                                  userID: {
                                    description:
                                      'The ID of the user who reacted to the message.',
                                    type: 'string',
                                  },
                                  timestamp: {
                                    description:
                                      'The timestamp of when the reaction was created.',
                                    type: 'Date',
                                  },
                                },
                                propertyOrder: [
                                  'reaction',
                                  'userID',
                                  'timestamp',
                                ],
                                required: ['reaction', 'userID', 'timestamp'],
                              },
                            },
                            seenBy: {
                              description:
                                'A list of IDs of the users that have seen the message.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            skipLinkPreviews: {
                              description:
                                "If set, Cord won't analyze links in the message to generate previews.",
                              type: 'boolean',
                            },
                          },
                          propertyOrder: [
                            'seen',
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                          required: [
                            'seen',
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                        },
                      ],
                    },
                    lastMessage: {
                      description:
                        'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                      anyOf: [
                        { type: 'null' },
                        {
                          type: 'ClientMessageData',
                          properties: {
                            seen: {
                              description:
                                'Whether the message has been seen by the current viewer.',
                              type: 'boolean',
                            },
                            id: {
                              description:
                                'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                              type: 'string',
                            },
                            authorID: {
                              description:
                                'The ID for the user that sent the message.',
                              type: 'string',
                            },
                            groupID: {
                              description:
                                'The ID for the group this message belongs to.',
                              type: 'string',
                            },
                            threadID: {
                              description:
                                'The ID for the thread this message is part of.',
                              type: 'string',
                            },
                            content: {
                              description: 'The content of the message.',
                              type: 'MessageContent',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageAssigneeNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.ASSIGNEE',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageBulletNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.BULLET' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'indent',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageCodeNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.CODE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageLinkNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.LINK' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      url: { type: 'string' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'url',
                                    ],
                                    required: ['type', 'children', 'url'],
                                  },
                                  {
                                    type: 'MessageMentionNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.MENTION' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageNumberBulletNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.NUMBER_BULLET',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      bulletNumber: { type: 'number' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'bulletNumber',
                                      'indent',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'bulletNumber',
                                    ],
                                  },
                                  {
                                    type: 'MessageParagraphNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.PARAGRAPH',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageQuoteNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.QUOTE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageTextNode',
                                    properties: {
                                      type: { type: 'undefined' },
                                      class: { type: 'string' },
                                      text: { type: 'string' },
                                      bold: { type: 'boolean' },
                                      italic: { type: 'boolean' },
                                      underline: { type: 'boolean' },
                                      code: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'text',
                                      'bold',
                                      'italic',
                                      'underline',
                                      'code',
                                    ],
                                    required: ['text'],
                                  },
                                  {
                                    type: 'MessageTodoNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.TODO' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      todoID: { type: 'string' },
                                      done: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                  },
                                  {
                                    type: 'MessageMarkdownNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.MARKDOWN',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                ],
                              },
                            },
                            plaintext: {
                              description:
                                'A plaintext version of the structured message content.',
                              type: 'string',
                            },
                            url: {
                              description:
                                "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                              type: ['null', 'string'],
                            },
                            createdTimestamp: {
                              description:
                                'The timestamp when this message was created.  The default value is the current time.',
                              type: 'Date',
                            },
                            deletedTimestamp: {
                              description:
                                'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            updatedTimestamp: {
                              description:
                                'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            iconURL: {
                              description:
                                'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                              type: ['null', 'string'],
                            },
                            translationKey: {
                              description:
                                'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                              type: ['null', 'string'],
                            },
                            type: {
                              description:
                                'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                              type: 'string',
                              enum: ['action_message', 'user_message'],
                            },
                            metadata: {
                              description:
                                'Arbitrary key-value pairs that can be used to store additional information.',
                              type: 'EntityMetadata',
                            },
                            extraClassnames: {
                              description:
                                'A optional space separated list of classnames to add to the message.',
                              type: ['null', 'string'],
                            },
                            attachments: {
                              description:
                                'The items attached to this message.',
                              type: 'MessageAttachment[]',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageFileAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `file` for file attachments.',
                                        type: '"file"',
                                      },
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                  {
                                    type: 'MessageAnnotationAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `annotation` for annotation attachments.',
                                        type: '"annotation"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the annotation, if any.',
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'UploadedFile',
                                            properties: {
                                              id: {
                                                description:
                                                  'The ID of the file.',
                                                type: 'string',
                                              },
                                              name: {
                                                description:
                                                  'The name of the file.',
                                                type: 'string',
                                              },
                                              url: {
                                                description:
                                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                type: 'string',
                                              },
                                              mimeType: {
                                                description:
                                                  'The MIME type of the file.',
                                                type: 'string',
                                              },
                                              size: {
                                                description:
                                                  'The size of the file, in bytes.',
                                                type: 'number',
                                              },
                                              uploadStatus: {
                                                description:
                                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                type: 'string',
                                                enum: [
                                                  'uploading',
                                                  'uploaded',
                                                  'failed',
                                                  'cancelled',
                                                ],
                                              },
                                            },
                                            propertyOrder: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                            required: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                          },
                                        ],
                                      },
                                      locationData: {
                                        description:
                                          'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                        type: ['null', 'string'],
                                      },
                                      customData: {
                                        description:
                                          "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'CustomAnnotationData',
                                            properties: {
                                              location: {
                                                description:
                                                  'The custom location you produced for this annotation at annotation capture time.',
                                                type: 'Location',
                                              },
                                              coordsRelativeToTarget: {
                                                description:
                                                  'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                type: 'object',
                                                properties: {
                                                  x: { type: 'number' },
                                                  y: { type: 'number' },
                                                },
                                                propertyOrder: ['x', 'y'],
                                                required: ['x', 'y'],
                                              },
                                              label: {
                                                description:
                                                  'Your custom user-visible label for the annotation, if any.',
                                                type: ['null', 'string'],
                                              },
                                            },
                                            propertyOrder: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                            required: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                          },
                                        ],
                                      },
                                      textContent: {
                                        description:
                                          'The text that was selected when creating the annotation, if any.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                    required: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                  },
                                  {
                                    type: 'MessageScreenshotAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                        type: '"screenshot"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    },
                                    propertyOrder: ['type', 'screenshot'],
                                    required: ['type', 'screenshot'],
                                  },
                                  {
                                    type: 'MessageLinkPreviewAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `link_preview` for file link previews.',
                                        type: '"link_preview"',
                                      },
                                      id: {
                                        description:
                                          'The ID of the link preview attachment.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The url from which the preview was generated.',
                                        type: 'string',
                                      },
                                      imageURL: {
                                        description:
                                          'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                        type: ['null', 'string'],
                                      },
                                      title: {
                                        description:
                                          "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                        type: ['null', 'string'],
                                      },
                                      description: {
                                        description:
                                          'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                  },
                                ],
                              },
                            },
                            reactions: {
                              description: 'The reactions to this message.',
                              type: 'Reaction[]',
                              items: {
                                type: 'Reaction',
                                properties: {
                                  reaction: {
                                    description: 'The emoji reaction.',
                                    type: 'string',
                                  },
                                  userID: {
                                    description:
                                      'The ID of the user who reacted to the message.',
                                    type: 'string',
                                  },
                                  timestamp: {
                                    description:
                                      'The timestamp of when the reaction was created.',
                                    type: 'Date',
                                  },
                                },
                                propertyOrder: [
                                  'reaction',
                                  'userID',
                                  'timestamp',
                                ],
                                required: ['reaction', 'userID', 'timestamp'],
                              },
                            },
                            seenBy: {
                              description:
                                'A list of IDs of the users that have seen the message.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            skipLinkPreviews: {
                              description:
                                "If set, Cord won't analyze links in the message to generate previews.",
                              type: 'boolean',
                            },
                          },
                          propertyOrder: [
                            'seen',
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                          required: [
                            'seen',
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                        },
                      ],
                    },
                    id: {
                      description: 'The ID for this thread.',
                      type: 'string',
                    },
                    groupID: {
                      description: 'The group ID this thread is in.',
                      type: 'string',
                    },
                    total: {
                      description:
                        'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    userMessages: {
                      description:
                        'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    actionMessages: {
                      description:
                        'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    deletedMessages: {
                      description:
                        'The number of deleted messages in this thread.',
                      type: 'number',
                    },
                    resolved: {
                      description:
                        'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                      type: 'boolean',
                    },
                    resolvedTimestamp: {
                      description:
                        'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    participants: {
                      description:
                        'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                      type: 'ThreadParticipant[]',
                      items: {
                        type: 'ThreadParticipant',
                        properties: {
                          lastSeenTimestamp: {
                            description:
                              'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          userID: {
                            description:
                              "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                            type: ['null', 'string'],
                          },
                          displayName: {
                            description:
                              "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'lastSeenTimestamp',
                          'userID',
                          'displayName',
                        ],
                        required: [
                          'lastSeenTimestamp',
                          'userID',
                          'displayName',
                        ],
                      },
                    },
                    subscribers: {
                      description:
                        'All of the users who are subscribed to this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    repliers: {
                      description:
                        'All of the users who have replied to this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    mentioned: {
                      description:
                        'All of the users who were mentioned in a message in this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    actionMessageRepliers: {
                      description:
                        "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    typing: {
                      description:
                        'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    name: {
                      description:
                        'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                      type: 'string',
                    },
                    url: {
                      description:
                        "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                      type: 'string',
                    },
                    location: {
                      description:
                        'The [location](/reference/location) of this thread.',
                      type: 'Location',
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    extraClassnames: {
                      description:
                        'An optional space separated list of classnames to add to the thread.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'unread',
                    'viewerIsThreadParticipant',
                    'firstMessage',
                    'lastMessage',
                    'id',
                    'groupID',
                    'total',
                    'userMessages',
                    'actionMessages',
                    'deletedMessages',
                    'resolved',
                    'resolvedTimestamp',
                    'participants',
                    'subscribers',
                    'repliers',
                    'mentioned',
                    'actionMessageRepliers',
                    'typing',
                    'name',
                    'url',
                    'location',
                    'metadata',
                    'extraClassnames',
                  ],
                  required: [
                    'unread',
                    'viewerIsThreadParticipant',
                    'firstMessage',
                    'lastMessage',
                    'id',
                    'groupID',
                    'total',
                    'userMessages',
                    'actionMessages',
                    'deletedMessages',
                    'resolved',
                    'resolvedTimestamp',
                    'participants',
                    'subscribers',
                    'repliers',
                    'mentioned',
                    'actionMessageRepliers',
                    'typing',
                    'name',
                    'url',
                    'location',
                    'metadata',
                    'extraClassnames',
                  ],
                },
              ],
            },
            loading: {
              description:
                'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
              type: 'boolean',
            },
            fetchMore: {
              description:
                "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
              type: 'FetchMoreCallback',
            },
            hasMore: {
              description:
                "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
              type: 'boolean',
            },
          },
          propertyOrder: [
            'messages',
            'thread',
            'loading',
            'fetchMore',
            'hasMore',
          ],
          required: ['messages', 'thread', 'loading', 'fetchMore', 'hasMore'],
        },
      },
      useSearchMessages: {
        name: 'useSearchMessages',
        summary: 'This method allows you search for messages by content.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst results = thread.useSearchMessages({textToMatch: 'hello'});\n\nreturn (\n  <div>\n    {results.map((result) => (\n      <div key={result.id}>\n        Found match in message {result.id}: {result.plaintext}\n      </div>\n    ))}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['searchOptions'],
          required: ['searchOptions'],
          properties: {
            searchOptions: {
              description:
                'Various options for how to search the messages.  Each option is optional, but if you supply no options the result will be an empty array.',
              type: 'SearchOptionsType',
              properties: {
                textToMatch: {
                  description:
                    'The string you want to find in message content.',
                  type: 'string',
                },
                authorID: {
                  description:
                    'The user ID of the person who sent the message.',
                  type: 'string',
                },
                groupID: {
                  description:
                    'The ID of the group the message belongs to. If omitted, the search will be across all groups the current user is a member of.',
                  type: 'string',
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs of data associated with the message.',
                  type: 'EntityMetadata',
                },
                locationOptions: {
                  description:
                    'Location to filter the messages by.  \n\nSet locationOptions.location to a specific thread location to search. If locationOptions.partialMatch is `true`, we perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, we fetch information only from the specified location.',
                  type: 'object',
                  properties: {
                    location: { type: 'Location' },
                    partialMatch: { type: 'boolean' },
                  },
                  propertyOrder: ['location', 'partialMatch'],
                  required: ['location', 'partialMatch'],
                },
                timestampRange: {
                  description: 'Optional date objects used to scope search.',
                  type: 'TimestampRange',
                  properties: {
                    from: {
                      description:
                        "Timestamp from where to start the interval. The thread's timestamp must be *newer* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no start date and any data will include everything older than the provided `to` timestamp.",
                      type: 'Date',
                    },
                    to: {
                      description:
                        "Timestamp where to end the interval. The thread's timestamp must be *older* than (or equal to) this in order to match the filter.  \n\nIf not present, the interval will have no end date and any data will include everything newer than the provided `from` timestamp.",
                      type: 'Date',
                    },
                  },
                  propertyOrder: ['from', 'to'],
                  required: [],
                },
                limit: {
                  description:
                    'Number of messages to return. This will default to 50 if no value is provided but will be capped at 1000 if a value is provided.',
                  type: 'number',
                },
                sortBy: {
                  description:
                    "Sort the messages returned based on either their creation timestamp or relevance. Relevance refers to how closely the provided `textToMatch` string matches the content of the messages. Combine this with `sortDirection` to fine-tune the sorting order.  \n\nBy default, sorting is performed by `relevance` if `textToMatch` is provided, but will fallback to `created_timestamp` if it's not.",
                  type: 'string',
                  enum: ['created_timestamp', 'relevance'],
                },
                sortDirection: {
                  description:
                    "Property to control the order in which the messages returned are sorted. Using `sortBy` value of `relevance` and `sortDirection` of `descending` are the best options for getting the most relevant results at the top and is the default sorting criteria.  \n\nThe default value for this is 'descending'.",
                  type: 'string',
                  enum: ['ascending', 'descending'],
                },
              },
              propertyOrder: [
                'textToMatch',
                'authorID',
                'groupID',
                'metadata',
                'locationOptions',
                'timestampRange',
                'limit',
                'sortBy',
                'sortDirection',
              ],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an array containing message objects including thread location.  \n\nPlease note that the results are limited to 50 messages by default, but you can use the `limit` option to override that. To get more specific results, consider using one or more of the other search options provided.',
          anyOf: [
            { type: 'undefined' },
            {
              type: 'SearchResultData[]',
              items: {
                type: 'SearchResultData',
                properties: {
                  location: { type: 'Location' },
                  seen: {
                    description:
                      'Whether the message has been seen by the current viewer.',
                    type: 'boolean',
                  },
                  id: {
                    description:
                      'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                    type: 'string',
                  },
                  authorID: {
                    description: 'The ID for the user that sent the message.',
                    type: 'string',
                  },
                  groupID: {
                    description:
                      'The ID for the group this message belongs to.',
                    type: 'string',
                  },
                  threadID: {
                    description:
                      'The ID for the thread this message is part of.',
                    type: 'string',
                  },
                  content: {
                    description: 'The content of the message.',
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: {
                    description:
                      'A plaintext version of the structured message content.',
                    type: 'string',
                  },
                  url: {
                    description:
                      "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                    type: ['null', 'string'],
                  },
                  createdTimestamp: {
                    description:
                      'The timestamp when this message was created.  The default value is the current time.',
                    type: 'Date',
                  },
                  deletedTimestamp: {
                    description:
                      'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  updatedTimestamp: {
                    description:
                      'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                  },
                  iconURL: {
                    description:
                      'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                    type: ['null', 'string'],
                  },
                  translationKey: {
                    description:
                      'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                    type: ['null', 'string'],
                  },
                  type: {
                    description:
                      'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: {
                    description:
                      'Arbitrary key-value pairs that can be used to store additional information.',
                    type: 'EntityMetadata',
                  },
                  extraClassnames: {
                    description:
                      'A optional space separated list of classnames to add to the message.',
                    type: ['null', 'string'],
                  },
                  attachments: {
                    description: 'The items attached to this message.',
                    type: 'MessageAttachment[]',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageFileAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `file` for file attachments.',
                              type: '"file"',
                            },
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'type',
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                        {
                          type: 'MessageAnnotationAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `annotation` for annotation attachments.',
                              type: '"annotation"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the annotation, if any.',
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              ],
                            },
                            locationData: {
                              description:
                                'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                              type: ['null', 'string'],
                            },
                            customData: {
                              description:
                                "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                              anyOf: [
                                { type: 'null' },
                                {
                                  type: 'CustomAnnotationData',
                                  properties: {
                                    location: {
                                      description:
                                        'The custom location you produced for this annotation at annotation capture time.',
                                      type: 'Location',
                                    },
                                    coordsRelativeToTarget: {
                                      description:
                                        'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                      type: 'object',
                                      properties: {
                                        x: { type: 'number' },
                                        y: { type: 'number' },
                                      },
                                      propertyOrder: ['x', 'y'],
                                      required: ['x', 'y'],
                                    },
                                    label: {
                                      description:
                                        'Your custom user-visible label for the annotation, if any.',
                                      type: ['null', 'string'],
                                    },
                                  },
                                  propertyOrder: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                  required: [
                                    'location',
                                    'coordsRelativeToTarget',
                                    'label',
                                  ],
                                },
                              ],
                            },
                            textContent: {
                              description:
                                'The text that was selected when creating the annotation, if any.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                          required: [
                            'type',
                            'screenshot',
                            'locationData',
                            'customData',
                            'textContent',
                          ],
                        },
                        {
                          type: 'MessageScreenshotAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                              type: '"screenshot"',
                            },
                            screenshot: {
                              description:
                                'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          },
                          propertyOrder: ['type', 'screenshot'],
                          required: ['type', 'screenshot'],
                        },
                        {
                          type: 'MessageLinkPreviewAttachment',
                          properties: {
                            type: {
                              description:
                                'The type of this attachment, which is always `link_preview` for file link previews.',
                              type: '"link_preview"',
                            },
                            id: {
                              description:
                                'The ID of the link preview attachment.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The url from which the preview was generated.',
                              type: 'string',
                            },
                            imageURL: {
                              description:
                                'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                              type: ['null', 'string'],
                            },
                            title: {
                              description:
                                "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                              type: ['null', 'string'],
                            },
                            description: {
                              description:
                                'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                          required: [
                            'type',
                            'id',
                            'url',
                            'imageURL',
                            'title',
                            'description',
                          ],
                        },
                      ],
                    },
                  },
                  reactions: {
                    description: 'The reactions to this message.',
                    type: 'Reaction[]',
                    items: {
                      type: 'Reaction',
                      properties: {
                        reaction: {
                          description: 'The emoji reaction.',
                          type: 'string',
                        },
                        userID: {
                          description:
                            'The ID of the user who reacted to the message.',
                          type: 'string',
                        },
                        timestamp: {
                          description:
                            'The timestamp of when the reaction was created.',
                          type: 'Date',
                        },
                      },
                      propertyOrder: ['reaction', 'userID', 'timestamp'],
                      required: ['reaction', 'userID', 'timestamp'],
                    },
                  },
                  seenBy: {
                    description:
                      'A list of IDs of the users that have seen the message.',
                    type: 'string[]',
                    items: { type: 'string' },
                  },
                  skipLinkPreviews: {
                    description:
                      "If set, Cord won't analyze links in the message to generate previews.",
                    type: 'boolean',
                  },
                },
                propertyOrder: [
                  'location',
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
                required: [
                  'location',
                  'seen',
                  'id',
                  'authorID',
                  'groupID',
                  'threadID',
                  'content',
                  'plaintext',
                  'url',
                  'createdTimestamp',
                  'deletedTimestamp',
                  'updatedTimestamp',
                  'iconURL',
                  'translationKey',
                  'type',
                  'metadata',
                  'extraClassnames',
                  'attachments',
                  'reactions',
                  'seenBy',
                  'skipLinkPreviews',
                ],
              },
            },
          ],
        },
      },
      useMessage: {
        name: 'useMessage',
        summary:
          'This method allows you to fetch data for a single message, including live updates.',
        examples: {
          Overview:
            "import { thread } from '@cord-sdk/react';\nconst message = thread.useMessage('my-awesome-message-id');\n\nreturn message && <div>Message with id: {message.id} found!</div>;",
        },
        parameters: {
          propertyOrder: ['messageID'],
          required: ['messageID'],
          properties: {
            messageID: {
              description: 'The ID of the message.',
              type: 'string',
            },
          },
        },
        returns: {
          description:
            'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an an object containing the message data. If no message matching the provided messageID is found, it will return `null` instead.',
          anyOf: [
            { type: 'undefined' },
            { type: 'null' },
            {
              type: 'ClientMessageData',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
            },
          ],
        },
      },
    },
    user: {
      useUserData: {
        overloaded: true,
        overloads: [
          {
            name: 'useUserData',
            summary:
              'This method allows you to observe data about a user, including live updates.',
            examples: {
              Overview:
                "import { user } from '@cord-sdk/react';\nconst data = user.useUserData(userID);",
              Usage:
                "import { user } from '@cord-sdk/react';\nconst data = user.useUserData('user-123');\nreturn (\n  <div>\n    {!data && \"Loading...\"}\n    {data && (\n      <p>User name: {data.name}</p>\n      <p>User short name: {data.shortName}</p>\n      <p>User profile picture: <img src={data.profilePictureURL} /></p>\n    )}\n  </div>\n);",
            },
            parameters: {
              propertyOrder: ['userID', 'options'],
              required: ['userID'],
              properties: {
                userID: {
                  description: 'The user to fetch data for.',
                  type: 'string',
                },
                options: {
                  type: 'ReactUserDataOptions',
                  properties: {
                    skip: {
                      description:
                        'When set to true, prevents the execution of any operations within the hook.',
                      type: 'boolean',
                    },
                  },
                  propertyOrder: ['skip'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
              anyOf: [
                { type: 'undefined' },
                { type: 'null' },
                {
                  type: 'ClientUserData',
                  properties: {
                    id: {
                      description:
                        "The user's ID.  This is unique within a project.",
                      type: 'string',
                    },
                    name: {
                      description: "The user's name.",
                      type: ['null', 'string'],
                    },
                    shortName: {
                      description:
                        "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                      type: 'string',
                    },
                    secondaryDisplayName: {
                      description:
                        'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                      type: 'string',
                    },
                    profilePictureURL: {
                      description: "A URL to the user's profile picture.",
                      type: ['null', 'string'],
                    },
                    metadata: {
                      description:
                        'Any metadata that has been set for the user.',
                      type: 'EntityMetadata',
                    },
                  },
                  propertyOrder: [
                    'id',
                    'name',
                    'shortName',
                    'displayName',
                    'secondaryDisplayName',
                    'profilePictureURL',
                    'metadata',
                  ],
                  required: [
                    'id',
                    'name',
                    'shortName',
                    'displayName',
                    'secondaryDisplayName',
                    'profilePictureURL',
                    'metadata',
                  ],
                },
              ],
            },
          },
          {
            name: 'useUserData',
            summary:
              'This method allows you to observe data about multiple users, including live updates.',
            examples: {
              Overview:
                "import { user } from '@cord-sdk/react';\nconst data = user.useUserData(userIDs);",
              Usage:
                "import { user } from '@cord-sdk/react';\nconst data = user.useUserData(['user-123', 'user-456']);\nreturn (\n  <div>\n    {!data && \"Loading...\"}\n    {data && (\n      {Object.entries(data).map(([id, userData]) => (\n        <div key={id}>\n          <p>User ID: {id}</p>\n          <p>User name: {userData.name}</p>\n          <p>User profile picture: <img src={userData.profilePictureURL} /></p>\n        </div>\n      ))}\n    )}\n  </div>\n);",
            },
            parameters: {
              propertyOrder: ['userIDs', 'options'],
              required: ['userIDs'],
              properties: {
                userIDs: {
                  description: 'The list of user IDs to fetch data for.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                options: {
                  type: 'ReactUserDataOptions',
                  properties: {
                    skip: {
                      description:
                        'When set to true, prevents the execution of any operations within the hook.',
                      type: 'boolean',
                    },
                  },
                  propertyOrder: ['skip'],
                  required: [],
                },
              },
            },
            returns: {
              description:
                'The hook will initially return an empty object while the data loads from our API. Once some data has loaded, your component will re-render and the hook will return an object with a property for each requested user ID. If the property is missing, the data for that user has not yet been loaded; if there\'s no user with that ID, it will be `null`; and otherwise it will be an object which will contain the fields described under "Available Data" above. The component will automatically re-render if any of the data changes or as more data is loaded, i.e., this data is always "live".',
              type: 'Record<string, ClientUserData | null>',
            },
          },
        ],
      },
      useViewerData: {
        name: 'useViewerData',
        summary:
          'This method allows you to observe data about the logged-in user, including live updates.',
        examples: {
          Overview:
            'import { user } from \'@cord-sdk/react\';\nconst data = user.useViewerData();\nreturn (\n  <div>\n    {!data && "Loading..."}\n    {data && (\n      <p>User name: {data.name}</p>\n      <p>User short name: {data.shortName}</p>\n      <p>User profile picture: <img src={data.profilePictureURL} /></p>\n      <p>Group ID: {data.groupID}</p>\n    )}\n  </div>\n);',
        },
        parameters: { propertyOrder: [], required: [], properties: {} },
        returns: {
          description:
            'The hook will initially return `undefined` while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the fields described under "Available Data" above. The component will automatically re-render if any of the data changes, i.e., this data is always "live".',
          anyOf: [
            { type: 'undefined' },
            {
              type: 'ViewerUserData',
              properties: {
                groupID: {
                  description:
                    'The identifier for the group that the current user is using (i.e., the group specified in the access token). Null if and only if no group was specified in the access token.',
                  type: ['null', 'string'],
                },
                notificationPreferences: {
                  type: 'object',
                  properties: {
                    sendViaSlack: { type: 'boolean' },
                    sendViaEmail: { type: 'boolean' },
                  },
                  propertyOrder: ['sendViaSlack', 'sendViaEmail'],
                  required: ['sendViaSlack', 'sendViaEmail'],
                },
                isSlackConnected: {
                  description: 'If the user has connected to a Slack user',
                  type: 'boolean',
                },
                groupIsSlackConnected: {
                  description: 'If the group is connected to a Slack workspace',
                  type: 'boolean',
                },
                groups: {
                  description:
                    'The group ids the user is currently a member of.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                id: {
                  description:
                    "The user's ID.  This is unique within a project.",
                  type: 'string',
                },
                name: {
                  description: "The user's name.",
                  type: ['null', 'string'],
                },
                shortName: {
                  description:
                    "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                  type: ['null', 'string'],
                },
                displayName: {
                  description:
                    'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                  type: 'string',
                },
                secondaryDisplayName: {
                  description:
                    'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                  type: 'string',
                },
                profilePictureURL: {
                  description: "A URL to the user's profile picture.",
                  type: ['null', 'string'],
                },
                metadata: {
                  description: 'Any metadata that has been set for the user.',
                  type: 'EntityMetadata',
                },
              },
              propertyOrder: [
                'groupID',
                'notificationPreferences',
                'isSlackConnected',
                'groupIsSlackConnected',
                'groups',
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
              required: [
                'groupID',
                'notificationPreferences',
                'isSlackConnected',
                'groupIsSlackConnected',
                'groups',
                'id',
                'name',
                'shortName',
                'displayName',
                'secondaryDisplayName',
                'profilePictureURL',
                'metadata',
              ],
            },
          ],
        },
      },
      useGroupMembers: {
        name: 'useGroupMembers',
        summary:
          'This method allows you to observe the members of a group the current user is a member of - either the current group the viewer is logged into, or, if specified as an option, another group the viewer is a member of.',
        examples: {
          Overview:
            "import { user } from '@cord-sdk/react';\nconst { groupMembers, loading, hasMore, fetchMore } = user.useGroupMembers();\nreturn (\n  <div>\n    {groupMembers.map((groupMembers) => (\n      <div key={groupMembers.id}>\n        Group member ${groupMembers.id} is called ${groupMembers.name}!\n      </div>\n    ))}\n    {loading ? (\n      <div>Loading...</div>\n    ) : hasMore ? (\n      <div onClick={() => fetchMore(10)}>Fetch 10 more</div>\n    ) : null}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['options'],
          required: [],
          properties: {
            options: {
              type: 'ObserveGroupMembersOptions',
              properties: {
                groupID: {
                  description:
                    'The group to search for.  The viewer must be a member of the group in order to receive its data.',
                  type: 'string',
                },
              },
              propertyOrder: ['groupID'],
              required: [],
            },
          },
        },
        returns: {
          description:
            'The hook will initially return an empty array while the data loads from our API. Once it has loaded, your component will re-render and the hook will return an object containing the fields described under "Available Data" above.',
          type: 'GroupMembersData',
          properties: {
            loading: {
              description:
                'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
              type: 'boolean',
            },
            fetchMore: {
              description:
                "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
              type: 'FetchMoreCallback',
            },
            hasMore: {
              description:
                "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
              type: 'boolean',
            },
            groupMembers: {
              type: 'ClientUserData[]',
              items: {
                type: 'ClientUserData',
                properties: {
                  id: {
                    description:
                      "The user's ID.  This is unique within a project.",
                    type: 'string',
                  },
                  name: {
                    description: "The user's name.",
                    type: ['null', 'string'],
                  },
                  shortName: {
                    description:
                      "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                    type: ['null', 'string'],
                  },
                  displayName: {
                    description:
                      'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                    type: 'string',
                  },
                  secondaryDisplayName: {
                    description:
                      'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                    type: 'string',
                  },
                  profilePictureURL: {
                    description: "A URL to the user's profile picture.",
                    type: ['null', 'string'],
                  },
                  metadata: {
                    description: 'Any metadata that has been set for the user.',
                    type: 'EntityMetadata',
                  },
                },
                propertyOrder: [
                  'id',
                  'name',
                  'shortName',
                  'displayName',
                  'secondaryDisplayName',
                  'profilePictureURL',
                  'metadata',
                ],
                required: [
                  'id',
                  'name',
                  'shortName',
                  'displayName',
                  'secondaryDisplayName',
                  'profilePictureURL',
                  'metadata',
                ],
              },
            },
          },
          propertyOrder: ['loading', 'fetchMore', 'hasMore', 'groupMembers'],
          required: ['loading', 'fetchMore', 'hasMore', 'groupMembers'],
        },
      },
      useSearchUsers: {
        name: 'useSearchUsers',
        summary:
          'This method allows searching for users with various options. Using the `searchQuery` will filter users by what their name start with.',
        examples: {
          Overview:
            "// Will return a list of users starting with 'al';\nimport { user } from '@cord-sdk/react';\n\nconst searchResults = useSearchUsers({ searchQuery: 'al', groupID: 'my-group-id'});\n\nreturn (\n  <div>\n     {!searchResults && \"Loading...\"}\n     {searchResults &&\n       searchResults.users.map((user) => (\n         <div key={user.id}>\n           <p>User name: {user.name}</p>\n          </div>\n       ))}\n  </div>\n);",
        },
        parameters: {
          propertyOrder: ['options'],
          required: [],
          properties: {
            options: {
              type: 'ReactSearchUsersOptions',
              properties: {
                searchQuery: {
                  description:
                    "The string to match the start of a user's name.",
                  type: 'string',
                },
                groupID: {
                  description:
                    'The group to search within. The viewer must be a member of the group in order to receive its data.  \n\nIf unset, tries to read one from the client auth token.',
                  type: 'string',
                },
                sortBy: {
                  description:
                    'Sort users in order of when they visited the location.',
                  type: 'SearchUsersSortByLocation',
                  properties: {
                    type: { type: '"location"' },
                    location: { type: 'Location' },
                  },
                  propertyOrder: ['type', 'location'],
                  required: ['type', 'location'],
                },
                sortDirection: {
                  description:
                    'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which searched users are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n`ascending`: sort users who have not visited the location first in the list, followed by those who visited a long time ago, followed by those who visited recently.  \n\n`descending`: sort users who have recently visited the location first in the list, followed by those who visited a long time ago, followed by those who have not visited the location at all.  \n\nIf unset, defaults to `descending`.',
                  type: 'string',
                  enum: ['ascending', 'descending'],
                },
                skip: {
                  description:
                    'When set to true, prevents the execution of any operations within the hook.',
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'searchQuery',
                'groupID',
                'sortBy',
                'sortDirection',
                'skip',
              ],
              required: [],
            },
          },
        },
        returns: {
          description:
            'A promise that resolves to into an object with `users` which is a list of users in the group. This is a one time return.',
          anyOf: [
            { type: 'undefined' },
            {
              type: 'SearchUsersResult',
              properties: {
                users: {
                  type: 'ClientUserData[]',
                  items: {
                    type: 'ClientUserData',
                    properties: {
                      id: {
                        description:
                          "The user's ID.  This is unique within a project.",
                        type: 'string',
                      },
                      name: {
                        description: "The user's name.",
                        type: ['null', 'string'],
                      },
                      shortName: {
                        description:
                          "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                        type: ['null', 'string'],
                      },
                      displayName: {
                        description:
                          'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                        type: 'string',
                      },
                      secondaryDisplayName: {
                        description:
                          'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                        type: 'string',
                      },
                      profilePictureURL: {
                        description: "A URL to the user's profile picture.",
                        type: ['null', 'string'],
                      },
                      metadata: {
                        description:
                          'Any metadata that has been set for the user.',
                        type: 'EntityMetadata',
                      },
                    },
                    propertyOrder: [
                      'id',
                      'name',
                      'shortName',
                      'displayName',
                      'secondaryDisplayName',
                      'profilePictureURL',
                      'metadata',
                    ],
                    required: [
                      'id',
                      'name',
                      'shortName',
                      'displayName',
                      'secondaryDisplayName',
                      'profilePictureURL',
                      'metadata',
                    ],
                  },
                },
              },
              propertyOrder: ['users'],
              required: ['users'],
            },
          ],
        },
      },
      ReactSearchUsersOptions: {
        name: 'ReactSearchUsersOptions',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            searchQuery: {
              type: 'string',
              description: "The string to match the start of a user's name.",
            },
            groupID: {
              type: 'string',
              description:
                'The group to search within. The viewer must be a member of the group in order to receive its data.  \n\nIf unset, tries to read one from the client auth token.',
            },
            sortBy: {
              type: 'SearchUsersSortByLocation',
              properties: {
                type: { type: '"location"' },
                location: { type: 'Location' },
              },
              propertyOrder: ['type', 'location'],
              required: ['type', 'location'],
              description:
                'Sort users in order of when they visited the location.',
            },
            sortDirection: {
              type: 'string',
              enum: ['ascending', 'descending'],
              description:
                'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which searched users are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n`ascending`: sort users who have not visited the location first in the list, followed by those who visited a long time ago, followed by those who visited recently.  \n\n`descending`: sort users who have recently visited the location first in the list, followed by those who visited a long time ago, followed by those who have not visited the location at all.  \n\nIf unset, defaults to `descending`.',
            },
            skip: {
              type: 'boolean',
              description:
                'When set to true, prevents the execution of any operations within the hook.',
            },
          },
          propertyOrder: [
            'searchQuery',
            'groupID',
            'sortBy',
            'sortDirection',
            'skip',
          ],
          required: [],
        },
      },
    },
    experimental: {},
    betaV2: {
      WithByID: {
        name: 'WithByID',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            ByID: {
              anyOf: [
                { type: 'ComponentClass<any, any>' },
                { type: 'FunctionComponent<any>' },
              ],
            },
          },
          propertyOrder: ['ByID'],
          required: ['ByID'],
        },
      },
      WithByIDComponent: {
        name: 'WithByIDComponent',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            ByID: {
              anyOf: [
                { type: 'ComponentClass<any, any>' },
                { type: 'FunctionComponent<any>' },
              ],
            },
            defaultProps: { type: 'Partial<any>' },
            propTypes: { type: 'WeakValidationMap<any>' },
            displayName: { type: 'string' },
            $$typeof: { type: 'symbol' },
          },
          propertyOrder: [
            'ByID',
            'defaultProps',
            'propTypes',
            'displayName',
            '$$typeof',
          ],
          required: ['ByID', '$$typeof'],
        },
      },
      WithByOptions: {
        name: 'WithByOptions',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            ByOptions: {
              anyOf: [
                { type: 'ComponentClass<any, any>' },
                { type: 'FunctionComponent<any>' },
              ],
            },
          },
          propertyOrder: ['ByOptions'],
          required: ['ByOptions'],
        },
      },
      WithByOptionsComponent: {
        name: 'WithByOptionsComponent',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            ByOptions: {
              anyOf: [
                { type: 'ComponentClass<any, any>' },
                { type: 'FunctionComponent<any>' },
              ],
            },
            defaultProps: { type: 'Partial<any>' },
            propTypes: { type: 'WeakValidationMap<any>' },
            displayName: { type: 'string' },
            $$typeof: { type: 'symbol' },
          },
          propertyOrder: [
            'ByOptions',
            'defaultProps',
            'propTypes',
            'displayName',
            '$$typeof',
          ],
          required: ['ByOptions', '$$typeof'],
        },
      },
      StyleProps: {
        name: 'StyleProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: ['style', 'className'],
          required: [],
        },
      },
      SendComposerProps: {
        name: 'SendComposerProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            initialValue: {
              type: 'Partial<ClientMessageData>',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [],
              description: 'The initial value of the composer.',
            },
            threadID: {
              type: 'string',
              description:
                "An [arbitrary string](/reference/identifiers) that uniquely identifies a thread. Messages sent will go to the provided thread ID. If the thread does not exist, then the createThread prop should be passed.  \n\n*Warning!* An important restriction of working with thread identifiers is that they must be unique across your entire application. You can't use the same thread identifier in two separate groups. This is an intentional limitation imposed by Cord.",
            },
            createThread: {
              type: 'Partial<ClientCreateThread>',
              properties: {
                addSubscribers: {
                  description: 'A list of subscribers to add to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                groupID: {
                  description: 'The group ID this thread is in.',
                  type: 'string',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
              },
              propertyOrder: [
                'addSubscribers',
                'name',
                'url',
                'location',
                'id',
                'metadata',
                'groupID',
                'extraClassnames',
              ],
              required: [],
              description:
                'An object containing the data of the thread to be created. If the thread specified in threadID exists, the message will be added to that thread and this object will be ignored.',
            },
            placeholder: {
              type: 'string',
              description:
                'Text to be displayed as a placeholder in the composer.',
            },
            onBeforeSubmit: {
              type: '(arg: { message: Partial<ClientMessageData>; }) => Promise<{ message: Partial<Omit<ClientMessageData, "plaintext">>; } | null>',
              description:
                'Callback invoked before the message is sent. It receives the message data as an argument and should return the modified message data. If the callback returns `null`, the message will not be sent.',
            },
            onAfterSubmit: {
              type: '(arg: { message: Partial<ClientMessageData>; }) => void',
              description: 'Callback invoked after the message is sent.',
            },
            onCancel: {
              type: '() => void',
              description:
                'Callback invoked when the user clicks on the cancel button in the composer.',
            },
            autofocus: { type: 'boolean' },
            onFailSubmit: { type: '(error: unknown) => void' },
            enableDragDropAttachments: {
              type: 'boolean',
              description:
                'Allows attachments to be added by dragging and dropping within the composer area. Defaults to true.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
            expanded: {
              type: 'string',
              enum: ['auto', 'never', 'always'],
              description:
                'When set to `auto`, the composer will auto-expand when focused.',
            },
            showCancelButton: { type: 'boolean' },
          },
          propertyOrder: [
            'initialValue',
            'threadID',
            'createThread',
            'placeholder',
            'onBeforeSubmit',
            'onAfterSubmit',
            'onCancel',
            'autofocus',
            'onFailSubmit',
            'enableDragDropAttachments',
            'style',
            'className',
            'expanded',
            'showCancelButton',
          ],
          required: [],
        },
      },
      EditComposerProps: {
        name: 'EditComposerProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            initialValue: {
              type: 'Partial<ClientMessageData>',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [],
              description: 'The initial value of the composer.',
            },
            messageID: {
              type: 'string',
              description: 'The id of the message to be edited.',
            },
            placeholder: {
              type: 'string',
              description:
                'Text to be displayed as a placeholder in the composer.',
            },
            onBeforeSubmit: {
              type: '(arg: { message: Partial<ClientMessageData>; }) => Promise<{ message: Partial<Omit<ClientMessageData, "plaintext">>; } | null>',
              description:
                'Callback invoked before the message is sent. It receives the message data as an argument and should return the modified message data. If the callback returns `null`, the message will not be sent.',
            },
            onAfterSubmit: {
              type: '(arg: { message: Partial<ClientMessageData>; }) => void',
              description: 'Callback invoked after the message is sent.',
            },
            onCancel: {
              type: '() => void',
              description:
                'Callback invoked when the user clicks on the cancel button in the composer.',
            },
            autofocus: { type: 'boolean' },
            onFailSubmit: { type: '(error: unknown) => void' },
            enableDragDropAttachments: {
              type: 'boolean',
              description:
                'Allows attachments to be added by dragging and dropping within the composer area. Defaults to true.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
            expanded: {
              type: 'string',
              enum: ['auto', 'never', 'always'],
              description:
                'When set to `auto`, the composer will auto-expand when focused.',
            },
            showCancelButton: { type: 'boolean' },
          },
          propertyOrder: [
            'initialValue',
            'messageID',
            'placeholder',
            'onBeforeSubmit',
            'onAfterSubmit',
            'onCancel',
            'autofocus',
            'onFailSubmit',
            'enableDragDropAttachments',
            'style',
            'className',
            'expanded',
            'showCancelButton',
          ],
          required: ['messageID'],
        },
      },
      ComposerMessageData: {
        name: 'ComposerMessageData',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            type: {
              type: 'string',
              enum: ['action_message', 'user_message'],
              description:
                'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
            },
            id: {
              type: 'string',
              description:
                'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
            },
            createdTimestamp: {
              type: 'Date',
              description:
                'The timestamp when this message was created.  The default value is the current time.',
            },
            iconURL: {
              type: ['null', 'string'],
              description:
                'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
            },
            metadata: {
              type: 'EntityMetadata',
              description:
                'Arbitrary key-value pairs that can be used to store additional information.',
            },
            url: {
              type: ['null', 'string'],
              description:
                "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
            },
            authorID: {
              type: 'string',
              description: 'The ID for the user that sent the message.',
            },
            content: {
              type: 'MessageContent',
              items: {
                anyOf: [
                  {
                    type: 'MessageAssigneeNode',
                    properties: {
                      type: { type: 'MessageNodeType.ASSIGNEE' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                      user: {
                        type: 'object',
                        properties: { id: { type: 'string' } },
                        propertyOrder: ['id'],
                        required: ['id'],
                      },
                    },
                    propertyOrder: ['type', 'class', 'children', 'user'],
                    required: ['type', 'children', 'user'],
                  },
                  {
                    type: 'MessageBulletNode',
                    properties: {
                      type: { type: 'MessageNodeType.BULLET' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                      indent: { type: 'number' },
                    },
                    propertyOrder: ['type', 'class', 'children', 'indent'],
                    required: ['type', 'children'],
                  },
                  {
                    type: 'MessageCodeNode',
                    properties: {
                      type: { type: 'MessageNodeType.CODE' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                    },
                    propertyOrder: ['type', 'class', 'children'],
                    required: ['type', 'children'],
                  },
                  {
                    type: 'MessageLinkNode',
                    properties: {
                      type: { type: 'MessageNodeType.LINK' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                      url: { type: 'string' },
                    },
                    propertyOrder: ['type', 'class', 'children', 'url'],
                    required: ['type', 'children', 'url'],
                  },
                  {
                    type: 'MessageMentionNode',
                    properties: {
                      type: { type: 'MessageNodeType.MENTION' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                      user: {
                        type: 'object',
                        properties: { id: { type: 'string' } },
                        propertyOrder: ['id'],
                        required: ['id'],
                      },
                    },
                    propertyOrder: ['type', 'class', 'children', 'user'],
                    required: ['type', 'children', 'user'],
                  },
                  {
                    type: 'MessageNumberBulletNode',
                    properties: {
                      type: { type: 'MessageNodeType.NUMBER_BULLET' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                      bulletNumber: { type: 'number' },
                      indent: { type: 'number' },
                    },
                    propertyOrder: [
                      'type',
                      'class',
                      'children',
                      'bulletNumber',
                      'indent',
                    ],
                    required: ['type', 'children', 'bulletNumber'],
                  },
                  {
                    type: 'MessageParagraphNode',
                    properties: {
                      type: { type: 'MessageNodeType.PARAGRAPH' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                    },
                    propertyOrder: ['type', 'class', 'children'],
                    required: ['type', 'children'],
                  },
                  {
                    type: 'MessageQuoteNode',
                    properties: {
                      type: { type: 'MessageNodeType.QUOTE' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                    },
                    propertyOrder: ['type', 'class', 'children'],
                    required: ['type', 'children'],
                  },
                  {
                    type: 'MessageTextNode',
                    properties: {
                      type: { type: 'undefined' },
                      class: { type: 'string' },
                      text: { type: 'string' },
                      bold: { type: 'boolean' },
                      italic: { type: 'boolean' },
                      underline: { type: 'boolean' },
                      code: { type: 'boolean' },
                    },
                    propertyOrder: [
                      'type',
                      'class',
                      'text',
                      'bold',
                      'italic',
                      'underline',
                      'code',
                    ],
                    required: ['text'],
                  },
                  {
                    type: 'MessageTodoNode',
                    properties: {
                      type: { type: 'MessageNodeType.TODO' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                      todoID: { type: 'string' },
                      done: { type: 'boolean' },
                    },
                    propertyOrder: [
                      'type',
                      'class',
                      'children',
                      'todoID',
                      'done',
                    ],
                    required: ['type', 'children', 'todoID', 'done'],
                  },
                  {
                    type: 'MessageMarkdownNode',
                    properties: {
                      type: { type: 'MessageNodeType.MARKDOWN' },
                      class: { type: 'string' },
                      children: {
                        type: 'MessageContent',
                        items: { type: 'MessageAnyNode' },
                      },
                    },
                    propertyOrder: ['type', 'class', 'children'],
                    required: ['type', 'children'],
                  },
                ],
              },
              description: 'The content of the message.',
            },
            groupID: {
              type: 'string',
              description: 'The ID for the group this message belongs to.',
            },
            threadID: {
              type: 'string',
              description: 'The ID for the thread this message is part of.',
            },
            reactions: {
              type: 'Reaction[]',
              items: {
                type: 'Reaction',
                properties: {
                  reaction: {
                    description: 'The emoji reaction.',
                    type: 'string',
                  },
                  userID: {
                    description:
                      'The ID of the user who reacted to the message.',
                    type: 'string',
                  },
                  timestamp: {
                    description:
                      'The timestamp of when the reaction was created.',
                    type: 'Date',
                  },
                },
                propertyOrder: ['reaction', 'userID', 'timestamp'],
                required: ['reaction', 'userID', 'timestamp'],
              },
              description: 'The reactions to this message.',
            },
            attachments: {
              type: 'MessageAttachment[]',
              items: {
                anyOf: [
                  {
                    type: 'MessageFileAttachment',
                    properties: {
                      type: {
                        description:
                          'The type of this attachment, which is always `file` for file attachments.',
                        type: '"file"',
                      },
                      id: {
                        description: 'The ID of the file.',
                        type: 'string',
                      },
                      name: {
                        description: 'The name of the file.',
                        type: 'string',
                      },
                      url: {
                        description:
                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                        type: 'string',
                      },
                      mimeType: {
                        description: 'The MIME type of the file.',
                        type: 'string',
                      },
                      size: {
                        description: 'The size of the file, in bytes.',
                        type: 'number',
                      },
                      uploadStatus: {
                        description:
                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                        type: 'string',
                        enum: ['uploading', 'uploaded', 'failed', 'cancelled'],
                      },
                    },
                    propertyOrder: [
                      'type',
                      'id',
                      'name',
                      'url',
                      'mimeType',
                      'size',
                      'uploadStatus',
                    ],
                    required: [
                      'type',
                      'id',
                      'name',
                      'url',
                      'mimeType',
                      'size',
                      'uploadStatus',
                    ],
                  },
                  {
                    type: 'MessageAnnotationAttachment',
                    properties: {
                      type: {
                        description:
                          'The type of this attachment, which is always `annotation` for annotation attachments.',
                        type: '"annotation"',
                      },
                      screenshot: {
                        description:
                          'The screenshot attached to the annotation, if any.',
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        ],
                      },
                      locationData: {
                        description:
                          'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                        type: ['null', 'string'],
                      },
                      customData: {
                        description:
                          "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'CustomAnnotationData',
                            properties: {
                              location: {
                                description:
                                  'The custom location you produced for this annotation at annotation capture time.',
                                type: 'Location',
                              },
                              coordsRelativeToTarget: {
                                description:
                                  'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                type: 'object',
                                properties: {
                                  x: { type: 'number' },
                                  y: { type: 'number' },
                                },
                                propertyOrder: ['x', 'y'],
                                required: ['x', 'y'],
                              },
                              label: {
                                description:
                                  'Your custom user-visible label for the annotation, if any.',
                                type: ['null', 'string'],
                              },
                            },
                            propertyOrder: [
                              'location',
                              'coordsRelativeToTarget',
                              'label',
                            ],
                            required: [
                              'location',
                              'coordsRelativeToTarget',
                              'label',
                            ],
                          },
                        ],
                      },
                      textContent: {
                        description:
                          'The text that was selected when creating the annotation, if any.',
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'type',
                      'screenshot',
                      'locationData',
                      'customData',
                      'textContent',
                    ],
                    required: [
                      'type',
                      'screenshot',
                      'locationData',
                      'customData',
                      'textContent',
                    ],
                  },
                  {
                    type: 'MessageScreenshotAttachment',
                    properties: {
                      type: {
                        description:
                          'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                        type: '"screenshot"',
                      },
                      screenshot: {
                        description:
                          'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                        type: 'UploadedFile',
                        properties: {
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                    },
                    propertyOrder: ['type', 'screenshot'],
                    required: ['type', 'screenshot'],
                  },
                  {
                    type: 'MessageLinkPreviewAttachment',
                    properties: {
                      type: {
                        description:
                          'The type of this attachment, which is always `link_preview` for file link previews.',
                        type: '"link_preview"',
                      },
                      id: {
                        description: 'The ID of the link preview attachment.',
                        type: 'string',
                      },
                      url: {
                        description:
                          'The url from which the preview was generated.',
                        type: 'string',
                      },
                      imageURL: {
                        description:
                          'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                        type: ['null', 'string'],
                      },
                      title: {
                        description:
                          "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                        type: ['null', 'string'],
                      },
                      description: {
                        description:
                          'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'type',
                      'id',
                      'url',
                      'imageURL',
                      'title',
                      'description',
                    ],
                    required: [
                      'type',
                      'id',
                      'url',
                      'imageURL',
                      'title',
                      'description',
                    ],
                  },
                ],
              },
              description: 'The items attached to this message.',
            },
            seenBy: {
              type: 'string[]',
              items: { type: 'string' },
              description:
                'A list of IDs of the users that have seen the message.',
            },
            deletedTimestamp: {
              anyOf: [{ type: 'null' }, { type: 'Date' }],
              description:
                'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
            },
            updatedTimestamp: {
              anyOf: [{ type: 'null' }, { type: 'Date' }],
              description:
                'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
            },
            translationKey: {
              type: ['null', 'string'],
              description:
                'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
            },
            extraClassnames: {
              type: ['null', 'string'],
              description:
                'A optional space separated list of classnames to add to the message.',
            },
            skipLinkPreviews: {
              type: 'boolean',
              description:
                "If set, Cord won't analyze links in the message to generate previews.",
            },
            seen: {
              type: 'boolean',
              description:
                'Whether the message has been seen by the current viewer.',
            },
          },
          propertyOrder: [
            'type',
            'id',
            'createdTimestamp',
            'iconURL',
            'metadata',
            'url',
            'authorID',
            'content',
            'groupID',
            'threadID',
            'reactions',
            'attachments',
            'seenBy',
            'deletedTimestamp',
            'updatedTimestamp',
            'translationKey',
            'extraClassnames',
            'skipLinkPreviews',
            'seen',
          ],
          required: [],
        },
      },
      ComposerProps: {
        name: 'ComposerProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            onSubmit: {
              type: '(arg: { message: Partial<Omit<ClientMessageData, "plaintext">>; }) => Promise<void>',
            },
            onChange: { type: '(event: { content: MessageContent; }) => void' },
            onKeyDown: {
              type: '(event: { event: KeyboardEvent<Element>; }) => boolean | void | undefined',
            },
            onCancel: { type: '() => void' },
            onResetState: {
              type: '(newValue?: MessageContent | undefined) => MessageContent | undefined',
            },
            onPaste: {
              type: '(e: { event: ClipboardEvent<Element>; }) => void',
            },
            initialValue: {
              type: 'Partial<ClientMessageData>',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [],
            },
            value: {
              type: 'Partial<Omit<ClientMessageData, "content">>',
              properties: {
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'type',
                'id',
                'createdTimestamp',
                'iconURL',
                'metadata',
                'url',
                'authorID',
                'groupID',
                'threadID',
                'plaintext',
                'reactions',
                'attachments',
                'seenBy',
                'deletedTimestamp',
                'updatedTimestamp',
                'translationKey',
                'extraClassnames',
                'skipLinkPreviews',
                'seen',
              ],
              required: [],
            },
            editor: {
              type: 'CustomEditor',
              properties: {
                children: {
                  type: 'Descendant[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                { type: 'MessageAssigneeNode' },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                { type: 'MessageBulletNode' },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                { type: 'MessageCodeNode' },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                { type: 'MessageLinkNode' },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                { type: 'MessageMentionNode' },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                { type: 'MessageNumberBulletNode' },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                { type: 'MessageParagraphNode' },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                { type: 'MessageQuoteNode' },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                { type: 'MessageTodoNode' },
                                {
                                  type: 'MessageMarkdownNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MARKDOWN' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                              ],
                            },
                          },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: {
                              anyOf: [
                                {
                                  type: 'MessageAssigneeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.ASSIGNEE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageBulletNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.BULLET' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'indent',
                                  ],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageCodeNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.CODE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageLinkNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.LINK' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    url: { type: 'string' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'url',
                                  ],
                                  required: ['type', 'children', 'url'],
                                },
                                {
                                  type: 'MessageMentionNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.MENTION' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    user: {
                                      type: 'object',
                                      properties: { id: { type: 'string' } },
                                      propertyOrder: ['id'],
                                      required: ['id'],
                                    },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'user',
                                  ],
                                  required: ['type', 'children', 'user'],
                                },
                                {
                                  type: 'MessageNumberBulletNode',
                                  properties: {
                                    type: {
                                      type: 'MessageNodeType.NUMBER_BULLET',
                                    },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    bulletNumber: { type: 'number' },
                                    indent: { type: 'number' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'bulletNumber',
                                    'indent',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'bulletNumber',
                                  ],
                                },
                                {
                                  type: 'MessageParagraphNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.PARAGRAPH' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageQuoteNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.QUOTE' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                  },
                                  propertyOrder: ['type', 'class', 'children'],
                                  required: ['type', 'children'],
                                },
                                {
                                  type: 'MessageTextNode',
                                  properties: {
                                    type: { type: 'undefined' },
                                    class: { type: 'string' },
                                    text: { type: 'string' },
                                    bold: { type: 'boolean' },
                                    italic: { type: 'boolean' },
                                    underline: { type: 'boolean' },
                                    code: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'text',
                                    'bold',
                                    'italic',
                                    'underline',
                                    'code',
                                  ],
                                  required: ['text'],
                                },
                                {
                                  type: 'MessageTodoNode',
                                  properties: {
                                    type: { type: 'MessageNodeType.TODO' },
                                    class: { type: 'string' },
                                    children: { type: 'MessageContent' },
                                    todoID: { type: 'string' },
                                    done: { type: 'boolean' },
                                  },
                                  propertyOrder: [
                                    'type',
                                    'class',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                  required: [
                                    'type',
                                    'children',
                                    'todoID',
                                    'done',
                                  ],
                                },
                                { type: 'MessageMarkdownNode' },
                              ],
                            },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                selection: { anyOf: [{ type: 'null' }, { type: 'BaseRange' }] },
                operations: {
                  type: 'BaseOperation[]',
                  items: {
                    anyOf: [
                      { type: 'BaseInsertNodeOperation' },
                      { type: 'BaseMergeNodeOperation' },
                      { type: 'BaseMoveNodeOperation' },
                      { type: 'BaseRemoveNodeOperation' },
                      { type: 'BaseSetNodeOperation' },
                      { type: 'BaseSplitNodeOperation' },
                      {
                        type: '{ type: "set_selection"; properties: null; newProperties: BaseRange; }',
                      },
                      {
                        type: '{ type: "set_selection"; properties: Partial<BaseRange>; newProperties: Partial<BaseRange>; }',
                      },
                      {
                        type: '{ type: "set_selection"; properties: BaseRange; newProperties: null; }',
                      },
                      { type: 'BaseInsertTextOperation' },
                      { type: 'BaseRemoveTextOperation' },
                    ],
                  },
                },
                marks: { anyOf: [{ type: 'null' }, { type: 'EditorMarks' }] },
                apply: { type: '(operation: BaseOperation) => void' },
                getDirtyPaths: { type: '(operation: BaseOperation) => Path[]' },
                getFragment: { type: '() => Descendant[]' },
                isElementReadOnly: {
                  type: '(element: CustomElement) => boolean',
                },
                isSelectable: { type: '(element: CustomElement) => boolean' },
                markableVoid: { type: '(element: CustomElement) => boolean' },
                normalizeNode: {
                  type: '(entry: NodeEntry, options?: { operation?: BaseOperation | undefined; } | undefined) => void',
                },
                onChange: {
                  type: '(options?: { operation?: BaseOperation | undefined; } | undefined) => void',
                },
                shouldNormalize: {
                  type: '({ iteration, dirtyPaths, operation, }: { iteration: number; initialDirtyPathsLength: number; dirtyPaths: Path[]; operation?: BaseOperation | undefined; }) => boolean',
                },
                addMark: { type: '(key: string, value: any) => void' },
                collapse: {
                  type: '(options?: SelectionCollapseOptions | undefined) => void',
                },
                delete: {
                  type: '(options?: TextDeleteOptions | undefined) => void',
                },
                deleteBackward: { type: '(unit: TextUnit) => void' },
                deleteForward: { type: '(unit: TextUnit) => void' },
                deleteFragment: {
                  type: '(options?: EditorFragmentDeletionOptions | undefined) => void',
                },
                deselect: { type: '() => void' },
                insertBreak: { type: '() => void' },
                insertFragment: {
                  type: '(fragment: Node[], options?: TextInsertFragmentOptions | undefined) => void',
                },
                insertNode: {
                  type: '(node: Node, options?: NodeInsertNodesOptions<Node> | undefined) => void',
                },
                insertNodes: {
                  type: '(nodes: Node | Node[], options?: NodeInsertNodesOptions<Node> | undefined) => void',
                },
                insertSoftBreak: { type: '() => void' },
                insertText: {
                  type: '(text: string, options?: TextInsertTextOptions | undefined) => void',
                },
                liftNodes: {
                  type: '(options?: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: MaximizeMode | undefined; voids?: boolean | undefined; } | undefined) => void',
                },
                mergeNodes: {
                  type: '(options?: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: RangeMode | undefined; hanging?: boolean | undefined; voids?: boolean | undefined; } | undefined) => void',
                },
                move: {
                  type: '(options?: SelectionMoveOptions | undefined) => void',
                },
                moveNodes: {
                  type: '(options: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: MaximizeMode | undefined; to: Path; voids?: boolean | undefined; }) => void',
                },
                normalize: {
                  type: '(options?: EditorNormalizeOptions | undefined) => void',
                },
                removeMark: { type: '(key: string) => void' },
                removeNodes: {
                  type: '(options?: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: RangeMode | undefined; hanging?: boolean | undefined; voids?: boolean | undefined; } | undefined) => void',
                },
                select: { type: '(target: Location) => void' },
                setNodes: {
                  type: '<T extends Node>(props: Partial<T>, options?: { at?: Location | undefined; match?: NodeMatch<T> | undefined; mode?: MaximizeMode | undefined; ... 4 more ...; merge?: PropsMerge | undefined; } | undefined) => void',
                },
                setNormalizing: { type: '(isNormalizing: boolean) => void' },
                setPoint: {
                  type: '(props: Partial<BasePoint>, options?: SelectionSetPointOptions | undefined) => void',
                },
                setSelection: { type: '(props: Partial<BaseRange>) => void' },
                splitNodes: {
                  type: '(options?: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: RangeMode | undefined; always?: boolean | undefined; height?: number | undefined; voids?: boolean | undefined; } | undefined) => void',
                },
                unsetNodes: {
                  type: '(props: string | string[], options?: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: MaximizeMode | undefined; hanging?: boolean | undefined; split?: boolean | undefined; voids?: boolean | undefined; } | undefined) => void',
                },
                unwrapNodes: {
                  type: '(options?: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: MaximizeMode | undefined; split?: boolean | undefined; voids?: boolean | undefined; } | undefined) => void',
                },
                withoutNormalizing: { type: '(fn: () => void) => void' },
                wrapNodes: {
                  type: '(element: CustomElement, options?: { at?: Location | undefined; match?: NodeMatch<Node> | undefined; mode?: MaximizeMode | undefined; split?: boolean | undefined; voids?: boolean | undefined; } | undefined) => void',
                },
                above: {
                  type: '<T extends Ancestor>(options?: EditorAboveOptions<T> | undefined) => NodeEntry<T> | undefined',
                },
                after: {
                  type: '(at: Location, options?: EditorAfterOptions | undefined) => BasePoint | undefined',
                },
                before: {
                  type: '(at: Location, options?: EditorBeforeOptions | undefined) => BasePoint | undefined',
                },
                edges: { type: '(at: Location) => [BasePoint, BasePoint]' },
                elementReadOnly: {
                  type: '(options?: EditorElementReadOnlyOptions | undefined) => NodeEntry<CustomElement> | undefined',
                },
                end: { type: '(at: Location) => BasePoint' },
                first: { type: '(at: Location) => NodeEntry' },
                fragment: { type: '(at: Location) => Descendant[]' },
                getMarks: {
                  type: '() => Omit<MessageTextNode, "text"> | null',
                },
                hasBlocks: { type: '(element: CustomElement) => boolean' },
                hasInlines: { type: '(element: CustomElement) => boolean' },
                hasPath: { type: '(path: Path) => boolean' },
                hasTexts: { type: '(element: CustomElement) => boolean' },
                isBlock: { type: '(value: CustomElement) => boolean' },
                isEdge: { type: '(point: BasePoint, at: Location) => boolean' },
                isEmpty: { type: '(element: CustomElement) => boolean' },
                isEnd: { type: '(point: BasePoint, at: Location) => boolean' },
                isInline: { type: '(value: CustomElement) => boolean' },
                isNormalizing: { type: '() => boolean' },
                isStart: {
                  type: '(point: BasePoint, at: Location) => boolean',
                },
                isVoid: { type: '(value: CustomElement) => boolean' },
                last: { type: '(at: Location) => NodeEntry' },
                leaf: {
                  type: '(at: Location, options?: EditorLeafOptions | undefined) => NodeEntry<MessageTextNode>',
                },
                levels: {
                  type: '<T extends Node>(options?: EditorLevelsOptions<T> | undefined) => Generator<NodeEntry<T>, void, undefined>',
                },
                next: {
                  type: '<T extends Descendant>(options?: EditorNextOptions<T> | undefined) => NodeEntry<T> | undefined',
                },
                node: {
                  type: '(at: Location, options?: EditorNodeOptions | undefined) => NodeEntry',
                },
                nodes: {
                  type: '<T extends Node>(options?: EditorNodesOptions<T> | undefined) => Generator<NodeEntry<T>, void, undefined>',
                },
                parent: {
                  type: '(at: Location, options?: EditorParentOptions | undefined) => NodeEntry<Ancestor>',
                },
                path: {
                  type: '(at: Location, options?: EditorPathOptions | undefined) => Path',
                },
                pathRef: {
                  type: '(path: Path, options?: EditorPathRefOptions | undefined) => PathRef',
                },
                pathRefs: { type: '() => Set<PathRef>' },
                point: {
                  type: '(at: Location, options?: EditorPointOptions | undefined) => BasePoint',
                },
                pointRef: {
                  type: '(point: BasePoint, options?: EditorPointRefOptions | undefined) => PointRef',
                },
                pointRefs: { type: '() => Set<PointRef>' },
                positions: {
                  type: '(options?: EditorPositionsOptions | undefined) => Generator<BasePoint, void, undefined>',
                },
                previous: {
                  type: '<T extends Node>(options?: EditorPreviousOptions<T> | undefined) => NodeEntry<T> | undefined',
                },
                range: {
                  type: '(at: Location, to?: Location | undefined) => BaseRange',
                },
                rangeRef: {
                  type: '(range: BaseRange, options?: EditorRangeRefOptions | undefined) => RangeRef',
                },
                rangeRefs: { type: '() => Set<RangeRef>' },
                start: { type: '(at: Location) => BasePoint' },
                string: {
                  type: '(at: Location, options?: EditorStringOptions | undefined) => string',
                },
                unhangRange: {
                  type: '(range: BaseRange, options?: EditorUnhangRangeOptions | undefined) => BaseRange',
                },
                void: {
                  type: '(options?: EditorVoidOptions | undefined) => NodeEntry<CustomElement> | undefined',
                },
                hasEditableTarget: {
                  type: '(editor: ReactEditor, target: EventTarget | null) => target is Node',
                },
                hasRange: {
                  type: '(editor: ReactEditor, range: BaseRange) => boolean',
                },
                hasSelectableTarget: {
                  type: '(editor: ReactEditor, target: EventTarget | null) => boolean',
                },
                hasTarget: {
                  type: '(editor: ReactEditor, target: EventTarget | null) => target is Node',
                },
                insertData: { type: '(data: DataTransfer) => void' },
                insertFragmentData: { type: '(data: DataTransfer) => boolean' },
                insertTextData: { type: '(data: DataTransfer) => boolean' },
                isTargetInsideNonReadonlyVoid: {
                  type: '(editor: ReactEditor, target: EventTarget | null) => boolean',
                },
                setFragmentData: {
                  type: '(data: DataTransfer, originEvent?: "drag" | "copy" | "cut" | undefined) => void',
                },
                history: { type: 'History' },
                undo: { type: '() => void' },
                redo: { type: '() => void' },
                writeHistory: {
                  type: '(stack: "undos" | "redos", batch: any) => void',
                },
              },
              propertyOrder: [
                'children',
                'selection',
                'operations',
                'marks',
                'apply',
                'getDirtyPaths',
                'getFragment',
                'isElementReadOnly',
                'isSelectable',
                'markableVoid',
                'normalizeNode',
                'onChange',
                'shouldNormalize',
                'addMark',
                'collapse',
                'delete',
                'deleteBackward',
                'deleteForward',
                'deleteFragment',
                'deselect',
                'insertBreak',
                'insertFragment',
                'insertNode',
                'insertNodes',
                'insertSoftBreak',
                'insertText',
                'liftNodes',
                'mergeNodes',
                'move',
                'moveNodes',
                'normalize',
                'removeMark',
                'removeNodes',
                'select',
                'setNodes',
                'setNormalizing',
                'setPoint',
                'setSelection',
                'splitNodes',
                'unsetNodes',
                'unwrapNodes',
                'withoutNormalizing',
                'wrapNodes',
                'above',
                'after',
                'before',
                'edges',
                'elementReadOnly',
                'end',
                'first',
                'fragment',
                'getMarks',
                'hasBlocks',
                'hasInlines',
                'hasPath',
                'hasTexts',
                'isBlock',
                'isEdge',
                'isEmpty',
                'isEnd',
                'isInline',
                'isNormalizing',
                'isStart',
                'isVoid',
                'last',
                'leaf',
                'levels',
                'next',
                'node',
                'nodes',
                'parent',
                'path',
                'pathRef',
                'pathRefs',
                'point',
                'pointRef',
                'pointRefs',
                'positions',
                'previous',
                'range',
                'rangeRef',
                'rangeRefs',
                'start',
                'string',
                'unhangRange',
                'void',
                'hasEditableTarget',
                'hasRange',
                'hasSelectableTarget',
                'hasTarget',
                'insertData',
                'insertFragmentData',
                'insertTextData',
                'isTargetInsideNonReadonlyVoid',
                'setFragmentData',
                'history',
                'undo',
                'redo',
                'writeHistory',
              ],
              required: [
                'children',
                'selection',
                'operations',
                'marks',
                'apply',
                'getDirtyPaths',
                'getFragment',
                'isElementReadOnly',
                'isSelectable',
                'markableVoid',
                'normalizeNode',
                'onChange',
                'shouldNormalize',
                'addMark',
                'collapse',
                'delete',
                'deleteBackward',
                'deleteForward',
                'deleteFragment',
                'deselect',
                'insertBreak',
                'insertFragment',
                'insertNode',
                'insertNodes',
                'insertSoftBreak',
                'insertText',
                'liftNodes',
                'mergeNodes',
                'move',
                'moveNodes',
                'normalize',
                'removeMark',
                'removeNodes',
                'select',
                'setNodes',
                'setNormalizing',
                'setPoint',
                'setSelection',
                'splitNodes',
                'unsetNodes',
                'unwrapNodes',
                'withoutNormalizing',
                'wrapNodes',
                'above',
                'after',
                'before',
                'edges',
                'elementReadOnly',
                'end',
                'first',
                'fragment',
                'getMarks',
                'hasBlocks',
                'hasInlines',
                'hasPath',
                'hasTexts',
                'isBlock',
                'isEdge',
                'isEmpty',
                'isEnd',
                'isInline',
                'isNormalizing',
                'isStart',
                'isVoid',
                'last',
                'leaf',
                'levels',
                'next',
                'node',
                'nodes',
                'parent',
                'path',
                'pathRef',
                'pathRefs',
                'point',
                'pointRef',
                'pointRefs',
                'positions',
                'previous',
                'range',
                'rangeRef',
                'rangeRefs',
                'start',
                'string',
                'unhangRange',
                'void',
                'hasEditableTarget',
                'hasRange',
                'hasSelectableTarget',
                'hasTarget',
                'insertData',
                'insertFragmentData',
                'insertTextData',
                'isTargetInsideNonReadonlyVoid',
                'setFragmentData',
                'history',
                'undo',
                'redo',
                'writeHistory',
              ],
            },
            isEmpty: { type: 'boolean' },
            isValid: { type: 'boolean' },
            expanded: {
              type: 'string',
              enum: ['auto', 'never', 'always'],
              description:
                'When set to `auto`, the composer will auto-expand when focused.',
            },
            showCancelButton: { type: 'boolean' },
            placeholder: { type: 'string' },
            toolbarItems: {
              type: 'NamedElements',
              items: {
                type: 'object',
                properties: {
                  name: { type: 'string' },
                  element: { anyOf: [{ type: 'null' }, { type: 'Element' }] },
                },
                propertyOrder: ['name', 'element'],
                required: ['name', 'element'],
              },
            },
            extraChildren: {
              type: 'NamedElements',
              items: {
                type: 'object',
                properties: {
                  name: { type: 'string' },
                  element: { anyOf: [{ type: 'null' }, { type: 'Element' }] },
                },
                propertyOrder: ['name', 'element'],
                required: ['name', 'element'],
              },
            },
            popperElement: { type: 'Element' },
            popperElementVisible: { type: 'boolean' },
            popperOnShouldHide: { type: '() => void' },
            groupID: { type: ['undefined', 'string'] },
            autofocus: { type: 'boolean' },
            onFailSubmit: { type: '(error: unknown) => void' },
            attachmentInputElement: { type: 'Element' },
            attachFilesToComposer: { type: '(files: File[]) => Promise<void>' },
            enableDragDropAttachments: { type: 'boolean' },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: [
            'onSubmit',
            'onChange',
            'onKeyDown',
            'onCancel',
            'onResetState',
            'onPaste',
            'initialValue',
            'value',
            'editor',
            'isEmpty',
            'isValid',
            'expanded',
            'showCancelButton',
            'placeholder',
            'toolbarItems',
            'extraChildren',
            'popperElement',
            'popperElementVisible',
            'popperOnShouldHide',
            'groupID',
            'autofocus',
            'onFailSubmit',
            'attachmentInputElement',
            'attachFilesToComposer',
            'enableDragDropAttachments',
            'style',
            'className',
          ],
          required: [
            'onSubmit',
            'onChange',
            'onKeyDown',
            'onResetState',
            'onPaste',
            'value',
            'editor',
            'isEmpty',
            'isValid',
            'groupID',
            'attachmentInputElement',
            'attachFilesToComposer',
          ],
        },
      },
      CordComposerProps: {
        name: 'CordComposerProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            initialValue: {
              type: 'Partial<ClientMessageData>',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: {
                            type: 'MessageContent',
                            items: { type: 'MessageAnyNode' },
                          },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [],
            },
            placeholder: { type: 'string' },
            onBeforeSubmit: {
              type: '(arg: { message: Partial<ClientMessageData>; }) => Promise<{ message: Partial<Omit<ClientMessageData, "plaintext">>; } | null>',
            },
            onSubmit: {
              type: '(arg: { message: Partial<Omit<ClientMessageData, "plaintext">>; }) => void | Promise<void>',
            },
            onAfterSubmit: {
              type: '(arg: { message: Partial<ClientMessageData>; }) => void',
            },
            onCancel: { type: '() => void' },
            groupID: { type: ['undefined', 'string'] },
            onFailSubmit: { type: '(error: unknown) => void' },
            onChange: { type: '(event: { content: MessageContent; }) => void' },
            expanded: {
              type: 'string',
              enum: ['auto', 'never', 'always'],
              description:
                'When set to `auto`, the composer will auto-expand when focused.',
            },
            showCancelButton: { type: 'boolean' },
            enableDragDropAttachments: { type: 'boolean' },
          },
          propertyOrder: [
            'initialValue',
            'placeholder',
            'onBeforeSubmit',
            'onSubmit',
            'onAfterSubmit',
            'onCancel',
            'groupID',
            'onFailSubmit',
            'onChange',
            'expanded',
            'showCancelButton',
            'enableDragDropAttachments',
          ],
          required: ['onSubmit', 'groupID'],
        },
      },
      CommonMessageProps: {
        name: 'CommonMessageProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: ['style', 'className'],
          required: [],
        },
      },
      MessageProps: {
        name: 'MessageProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            message: {
              type: 'ClientMessageData',
              properties: {
                seen: {
                  description:
                    'Whether the message has been seen by the current viewer.',
                  type: 'boolean',
                },
                id: {
                  description:
                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                  type: 'string',
                },
                authorID: {
                  description: 'The ID for the user that sent the message.',
                  type: 'string',
                },
                groupID: {
                  description: 'The ID for the group this message belongs to.',
                  type: 'string',
                },
                threadID: {
                  description: 'The ID for the thread this message is part of.',
                  type: 'string',
                },
                content: {
                  description: 'The content of the message.',
                  type: 'MessageContent',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageAssigneeNode',
                        properties: {
                          type: { type: 'MessageNodeType.ASSIGNEE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'indent'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageCodeNode',
                        properties: {
                          type: { type: 'MessageNodeType.CODE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageLinkNode',
                        properties: {
                          type: { type: 'MessageNodeType.LINK' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          url: { type: 'string' },
                        },
                        propertyOrder: ['type', 'class', 'children', 'url'],
                        required: ['type', 'children', 'url'],
                      },
                      {
                        type: 'MessageMentionNode',
                        properties: {
                          type: { type: 'MessageNodeType.MENTION' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          user: {
                            type: 'object',
                            properties: { id: { type: 'string' } },
                            propertyOrder: ['id'],
                            required: ['id'],
                          },
                        },
                        propertyOrder: ['type', 'class', 'children', 'user'],
                        required: ['type', 'children', 'user'],
                      },
                      {
                        type: 'MessageNumberBulletNode',
                        properties: {
                          type: { type: 'MessageNodeType.NUMBER_BULLET' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          bulletNumber: { type: 'number' },
                          indent: { type: 'number' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'bulletNumber',
                          'indent',
                        ],
                        required: ['type', 'children', 'bulletNumber'],
                      },
                      {
                        type: 'MessageParagraphNode',
                        properties: {
                          type: { type: 'MessageNodeType.PARAGRAPH' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageQuoteNode',
                        properties: {
                          type: { type: 'MessageNodeType.QUOTE' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                      {
                        type: 'MessageTextNode',
                        properties: {
                          type: { type: 'undefined' },
                          class: { type: 'string' },
                          text: { type: 'string' },
                          bold: { type: 'boolean' },
                          italic: { type: 'boolean' },
                          underline: { type: 'boolean' },
                          code: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'text',
                          'bold',
                          'italic',
                          'underline',
                          'code',
                        ],
                        required: ['text'],
                      },
                      {
                        type: 'MessageTodoNode',
                        properties: {
                          type: { type: 'MessageNodeType.TODO' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                          todoID: { type: 'string' },
                          done: { type: 'boolean' },
                        },
                        propertyOrder: [
                          'type',
                          'class',
                          'children',
                          'todoID',
                          'done',
                        ],
                        required: ['type', 'children', 'todoID', 'done'],
                      },
                      {
                        type: 'MessageMarkdownNode',
                        properties: {
                          type: { type: 'MessageNodeType.MARKDOWN' },
                          class: { type: 'string' },
                          children: { type: 'MessageContent' },
                        },
                        propertyOrder: ['type', 'class', 'children'],
                        required: ['type', 'children'],
                      },
                    ],
                  },
                },
                plaintext: {
                  description:
                    'A plaintext version of the structured message content.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                  type: ['null', 'string'],
                },
                createdTimestamp: {
                  description:
                    'The timestamp when this message was created.  The default value is the current time.',
                  type: 'Date',
                },
                deletedTimestamp: {
                  description:
                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                updatedTimestamp: {
                  description:
                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                },
                iconURL: {
                  description:
                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                  type: ['null', 'string'],
                },
                translationKey: {
                  description:
                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                  type: ['null', 'string'],
                },
                type: {
                  description:
                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                  type: 'string',
                  enum: ['action_message', 'user_message'],
                },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                extraClassnames: {
                  description:
                    'A optional space separated list of classnames to add to the message.',
                  type: ['null', 'string'],
                },
                attachments: {
                  description: 'The items attached to this message.',
                  type: 'MessageAttachment[]',
                  items: {
                    anyOf: [
                      {
                        type: 'MessageFileAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `file` for file attachments.',
                            type: '"file"',
                          },
                          id: {
                            description: 'The ID of the file.',
                            type: 'string',
                          },
                          name: {
                            description: 'The name of the file.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                            type: 'string',
                          },
                          mimeType: {
                            description: 'The MIME type of the file.',
                            type: 'string',
                          },
                          size: {
                            description: 'The size of the file, in bytes.',
                            type: 'number',
                          },
                          uploadStatus: {
                            description:
                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                            type: 'string',
                            enum: [
                              'uploading',
                              'uploaded',
                              'failed',
                              'cancelled',
                            ],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                        required: [
                          'type',
                          'id',
                          'name',
                          'url',
                          'mimeType',
                          'size',
                          'uploadStatus',
                        ],
                      },
                      {
                        type: 'MessageAnnotationAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                            type: '"annotation"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the annotation, if any.',
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            ],
                          },
                          locationData: {
                            description:
                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                            type: ['null', 'string'],
                          },
                          customData: {
                            description:
                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                            anyOf: [
                              { type: 'null' },
                              {
                                type: 'CustomAnnotationData',
                                properties: {
                                  location: {
                                    description:
                                      'The custom location you produced for this annotation at annotation capture time.',
                                    type: 'Location',
                                  },
                                  coordsRelativeToTarget: {
                                    description:
                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                    type: 'object',
                                    properties: {
                                      x: { type: 'number' },
                                      y: { type: 'number' },
                                    },
                                    propertyOrder: ['x', 'y'],
                                    required: ['x', 'y'],
                                  },
                                  label: {
                                    description:
                                      'Your custom user-visible label for the annotation, if any.',
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                                required: [
                                  'location',
                                  'coordsRelativeToTarget',
                                  'label',
                                ],
                              },
                            ],
                          },
                          textContent: {
                            description:
                              'The text that was selected when creating the annotation, if any.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                        required: [
                          'type',
                          'screenshot',
                          'locationData',
                          'customData',
                          'textContent',
                        ],
                      },
                      {
                        type: 'MessageScreenshotAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                            type: '"screenshot"',
                          },
                          screenshot: {
                            description:
                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                            type: 'UploadedFile',
                            properties: {
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                        },
                        propertyOrder: ['type', 'screenshot'],
                        required: ['type', 'screenshot'],
                      },
                      {
                        type: 'MessageLinkPreviewAttachment',
                        properties: {
                          type: {
                            description:
                              'The type of this attachment, which is always `link_preview` for file link previews.',
                            type: '"link_preview"',
                          },
                          id: {
                            description:
                              'The ID of the link preview attachment.',
                            type: 'string',
                          },
                          url: {
                            description:
                              'The url from which the preview was generated.',
                            type: 'string',
                          },
                          imageURL: {
                            description:
                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                            type: ['null', 'string'],
                          },
                          title: {
                            description:
                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                            type: ['null', 'string'],
                          },
                          description: {
                            description:
                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                        required: [
                          'type',
                          'id',
                          'url',
                          'imageURL',
                          'title',
                          'description',
                        ],
                      },
                    ],
                  },
                },
                reactions: {
                  description: 'The reactions to this message.',
                  type: 'Reaction[]',
                  items: {
                    type: 'Reaction',
                    properties: {
                      reaction: {
                        description: 'The emoji reaction.',
                        type: 'string',
                      },
                      userID: {
                        description:
                          'The ID of the user who reacted to the message.',
                        type: 'string',
                      },
                      timestamp: {
                        description:
                          'The timestamp of when the reaction was created.',
                        type: 'Date',
                      },
                    },
                    propertyOrder: ['reaction', 'userID', 'timestamp'],
                    required: ['reaction', 'userID', 'timestamp'],
                  },
                },
                seenBy: {
                  description:
                    'A list of IDs of the users that have seen the message.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                skipLinkPreviews: {
                  description:
                    "If set, Cord won't analyze links in the message to generate previews.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              required: [
                'seen',
                'id',
                'authorID',
                'groupID',
                'threadID',
                'content',
                'plaintext',
                'url',
                'createdTimestamp',
                'deletedTimestamp',
                'updatedTimestamp',
                'iconURL',
                'translationKey',
                'type',
                'metadata',
                'extraClassnames',
                'attachments',
                'reactions',
                'seenBy',
                'skipLinkPreviews',
              ],
              description: 'Contains the data of the message to be displayed.',
            },
            showThreadOptions: {
              type: 'boolean',
              description:
                'If set to true, the thread options will appear within the message options menu. Defaults to false.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: ['message', 'showThreadOptions', 'style', 'className'],
          required: ['message'],
        },
      },
      MessageByIDProps: {
        name: 'MessageByIDProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            messageID: {
              type: 'string',
              description: 'The ID of the message to be displayed.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: ['messageID', 'style', 'className'],
          required: ['messageID'],
        },
      },
      CommonAvatarProps: {
        name: 'CommonAvatarProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            enableTooltip: {
              type: 'boolean',
              description: 'Whether to enable tooltip on the avatar.',
            },
            isAbsent: {
              type: 'boolean',
              description: 'Whether the user is absent.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: ['enableTooltip', 'isAbsent', 'style', 'className'],
          required: [],
        },
      },
      AvatarProps: {
        name: 'AvatarProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            user: {
              anyOf: [
                { type: 'undefined' },
                { type: 'null' },
                {
                  type: 'ClientUserData',
                  properties: {
                    id: {
                      description:
                        "The user's ID.  This is unique within a project.",
                      type: 'string',
                    },
                    name: {
                      description: "The user's name.",
                      type: ['null', 'string'],
                    },
                    shortName: {
                      description:
                        "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                      type: ['null', 'string'],
                    },
                    displayName: {
                      description:
                        'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                      type: 'string',
                    },
                    secondaryDisplayName: {
                      description:
                        'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                      type: 'string',
                    },
                    profilePictureURL: {
                      description: "A URL to the user's profile picture.",
                      type: ['null', 'string'],
                    },
                    metadata: {
                      description:
                        'Any metadata that has been set for the user.',
                      type: 'EntityMetadata',
                    },
                  },
                  propertyOrder: [
                    'id',
                    'name',
                    'shortName',
                    'displayName',
                    'secondaryDisplayName',
                    'profilePictureURL',
                    'metadata',
                  ],
                  required: [
                    'id',
                    'name',
                    'shortName',
                    'displayName',
                    'secondaryDisplayName',
                    'profilePictureURL',
                    'metadata',
                  ],
                },
              ],
              description: 'Data of the user whose avatar is to be displayed.',
            },
            enableTooltip: {
              type: 'boolean',
              description: 'Whether to enable tooltip on the avatar.',
            },
            isAbsent: {
              type: 'boolean',
              description: 'Whether the user is absent.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: [
            'user',
            'enableTooltip',
            'isAbsent',
            'style',
            'className',
          ],
          required: ['user'],
        },
      },
      PresenceObserverReactComponentProps: {
        name: 'PresenceObserverReactComponentProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            location: {
              type: 'Location',
              description:
                "When the user interacts with the DOM elements within the `<PresenceObserver>`, they will be marked as present at this location in Cord's backend. This value defaults to the current URL.",
            },
            groupID: {
              type: 'string',
              description:
                "The [group](/rest-apis/groups) which should be able to see the user's presence.",
            },
            observeDocument: {
              type: 'boolean',
              description:
                'When `true`, presence will be determined by whether or not the current document is visible, rather than based on the "present" and "absent" DOM events. Setting this to `true` means that `presentEvents`, `absentEvents`, and `initialState` value will be ignored.  \n\nThe main situation in which you\'d want to use this property is when other events (like cursor and keyboard events) are not capturing user presence accurately. A common case here is on very short pages where the majority of the visible screen is an empty window. In these situations, you may find that the user doesn\'t generate any mouse events since their cursor isn\'t within the element.  \n\nIn the majority of such cases, you should consider using the `<PagePresence>` component instead, because it provides both a `<PresenceObserver>` and a `<PresenceFacepile>` in a single component.  \n\nYou may still want a `<PresenceObserver>` with `observeDocument` set to `true` if you want to record presence on a page but not surface it. That is to say – you want to observe presence, but you don\'t want to show a facepile. This is sometimes the case when you want to record presence in one place but surface it in another place.  \n\nThe default is set to `false`.',
            },
            durable: {
              type: 'boolean',
              description:
                'When set to `true`, every user will be able to see the presence indicator for any user (within the same group) who has ever been at this location at any point in the past.  \n\nWhen set to `false`, Cord will only show the users who are present at the same location at the same time.  \n\nThe default is set to `false`.',
            },
            presentEvents: {
              type: 'string[]',
              items: { type: 'string' },
              description:
                "An array of event types that Cord should listen for to determine if the user is present at the `location`.  \n\nCord marks presence and absence based on JavaScript events like `mouseenter`. To do this, Cord uses a set of default event listeners that cover the majority of cases. You may find that you need to set additional event listeners to correctly capture a user's presence within your app.  \n\nFor each event type you list, Cord will automatically create an event listener (by calling `addEventListener(<event type>, () => { ... })`). When these events fire, Cord will pick up the event and mark the user as present in the current location.  \n\nExample: `['scroll', 'mousemove']`.  \n\nThe default is set to `['mouseenter', 'focusin']`.",
            },
            absentEvents: {
              type: 'string[]',
              items: { type: 'string' },
              description:
                "As with presentEvents, this value is an array of event types that Cord should listen for to determine if the user has left the `location`.  \n\nFor each event type you list, Cord will automatically create an event listener (by calling `addEventListener(<event type>, () => { ... })`). When these events fire, Cord will pick up the event and mark the user as absent in the current location.  \n\nExample: `['blur']`.  \n\nThe default is set to `['mouseleave', 'focusout']`.",
            },
            onChange: {
              type: '(newValue: boolean) => unknown',
              description:
                'Callback invoked when presence state changes. This callback will receive a `true` or `false` value as an argument indicating whether or not the user is present at the `location`.',
            },
            children: {
              anyOf: [
                { type: 'boolean' },
                { type: 'null' },
                { type: 'string' },
                { type: 'number' },
                {
                  type: 'ReactElement<any, string | JSXElementConstructor<any>>',
                },
                { type: 'Iterable<ReactNode>' },
                { type: 'ReactPortal' },
              ],
            },
          },
          propertyOrder: [
            'location',
            'groupID',
            'observeDocument',
            'durable',
            'presentEvents',
            'absentEvents',
            'onChange',
            'children',
          ],
          required: ['location'],
        },
      },
      ThreadByIDProps: {
        name: 'ThreadByIDProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            threadID: {
              type: 'string',
              description: 'The ID of the thread to be displayed.',
            },
            createThread: {
              type: 'ClientCreateThread',
              properties: {
                addSubscribers: {
                  description: 'A list of subscribers to add to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                groupID: {
                  description: 'The group ID this thread is in.',
                  type: 'string',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
              },
              propertyOrder: [
                'addSubscribers',
                'name',
                'url',
                'location',
                'id',
                'metadata',
                'groupID',
                'extraClassnames',
              ],
              required: ['name', 'url', 'location'],
              description:
                'An object containing the data of the thread to be created. If the thread already exists, this will be ignored.',
            },
            showHeader: {
              type: 'boolean',
              description:
                'If set to `true`, the header of the thread will be displayed. Defaults to `false`.',
            },
            composerExpanded: {
              type: 'string',
              enum: ['auto', 'never', 'always'],
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: [
            'threadID',
            'createThread',
            'showHeader',
            'composerExpanded',
            'style',
            'className',
          ],
          required: ['threadID'],
        },
      },
      ThreadProps: {
        name: 'ThreadProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            threadData: {
              type: 'ClientThreadData',
              properties: {
                messages: {
                  description:
                    'An array of objects, one for each message in the specified thread.  \n\nThis array is paginated. At first, it will contain only the latest (newest) messages. Calling `fetchMore` will cause further messages to be appended to the array.',
                  type: 'ClientMessageData[]',
                  items: {
                    type: 'ClientMessageData',
                    properties: {
                      seen: {
                        description:
                          'Whether the message has been seen by the current viewer.',
                        type: 'boolean',
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'seen',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                },
                thread: {
                  description:
                    'Information about the thread.  This will be undefined if the thread is still loading and null if the thread does not exist.',
                  anyOf: [
                    { type: 'null' },
                    {
                      type: 'ThreadSummary',
                      properties: {
                        unread: {
                          description:
                            "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                          type: 'number',
                        },
                        viewerIsThreadParticipant: {
                          description:
                            'Whether the current viewer has either left a message or reacted to this thread.',
                          type: 'boolean',
                        },
                        firstMessage: {
                          description:
                            'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'ClientMessageData',
                              properties: {
                                seen: {
                                  description:
                                    'Whether the message has been seen by the current viewer.',
                                  type: 'boolean',
                                },
                                id: {
                                  description:
                                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                                  type: 'string',
                                },
                                authorID: {
                                  description:
                                    'The ID for the user that sent the message.',
                                  type: 'string',
                                },
                                groupID: {
                                  description:
                                    'The ID for the group this message belongs to.',
                                  type: 'string',
                                },
                                threadID: {
                                  description:
                                    'The ID for the thread this message is part of.',
                                  type: 'string',
                                },
                                content: {
                                  description: 'The content of the message.',
                                  type: 'MessageContent',
                                  items: {
                                    anyOf: [
                                      {
                                        type: 'MessageAssigneeNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.ASSIGNEE',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          user: {
                                            type: 'object',
                                            properties: {
                                              id: { type: 'string' },
                                            },
                                            propertyOrder: ['id'],
                                            required: ['id'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'user',
                                        ],
                                        required: ['type', 'children', 'user'],
                                      },
                                      {
                                        type: 'MessageBulletNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.BULLET',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          indent: { type: 'number' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'indent',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageCodeNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.CODE',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageLinkNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.LINK',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          url: { type: 'string' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'url',
                                        ],
                                        required: ['type', 'children', 'url'],
                                      },
                                      {
                                        type: 'MessageMentionNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.MENTION',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          user: {
                                            type: 'object',
                                            properties: {
                                              id: { type: 'string' },
                                            },
                                            propertyOrder: ['id'],
                                            required: ['id'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'user',
                                        ],
                                        required: ['type', 'children', 'user'],
                                      },
                                      {
                                        type: 'MessageNumberBulletNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.NUMBER_BULLET',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          bulletNumber: { type: 'number' },
                                          indent: { type: 'number' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'bulletNumber',
                                          'indent',
                                        ],
                                        required: [
                                          'type',
                                          'children',
                                          'bulletNumber',
                                        ],
                                      },
                                      {
                                        type: 'MessageParagraphNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.PARAGRAPH',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageQuoteNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.QUOTE',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageTextNode',
                                        properties: {
                                          type: { type: 'undefined' },
                                          class: { type: 'string' },
                                          text: { type: 'string' },
                                          bold: { type: 'boolean' },
                                          italic: { type: 'boolean' },
                                          underline: { type: 'boolean' },
                                          code: { type: 'boolean' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'text',
                                          'bold',
                                          'italic',
                                          'underline',
                                          'code',
                                        ],
                                        required: ['text'],
                                      },
                                      {
                                        type: 'MessageTodoNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.TODO',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          todoID: { type: 'string' },
                                          done: { type: 'boolean' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'todoID',
                                          'done',
                                        ],
                                        required: [
                                          'type',
                                          'children',
                                          'todoID',
                                          'done',
                                        ],
                                      },
                                      {
                                        type: 'MessageMarkdownNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.MARKDOWN',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                    ],
                                  },
                                },
                                plaintext: {
                                  description:
                                    'A plaintext version of the structured message content.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                                  type: ['null', 'string'],
                                },
                                createdTimestamp: {
                                  description:
                                    'The timestamp when this message was created.  The default value is the current time.',
                                  type: 'Date',
                                },
                                deletedTimestamp: {
                                  description:
                                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                                },
                                updatedTimestamp: {
                                  description:
                                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                                },
                                iconURL: {
                                  description:
                                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                                  type: ['null', 'string'],
                                },
                                translationKey: {
                                  description:
                                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                                  type: ['null', 'string'],
                                },
                                type: {
                                  description:
                                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                                  type: 'string',
                                  enum: ['action_message', 'user_message'],
                                },
                                metadata: {
                                  description:
                                    'Arbitrary key-value pairs that can be used to store additional information.',
                                  type: 'EntityMetadata',
                                },
                                extraClassnames: {
                                  description:
                                    'A optional space separated list of classnames to add to the message.',
                                  type: ['null', 'string'],
                                },
                                attachments: {
                                  description:
                                    'The items attached to this message.',
                                  type: 'MessageAttachment[]',
                                  items: {
                                    anyOf: [
                                      {
                                        type: 'MessageFileAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `file` for file attachments.',
                                            type: '"file"',
                                          },
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'type',
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                      {
                                        type: 'MessageAnnotationAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                                            type: '"annotation"',
                                          },
                                          screenshot: {
                                            description:
                                              'The screenshot attached to the annotation, if any.',
                                            anyOf: [
                                              { type: 'null' },
                                              {
                                                type: 'UploadedFile',
                                                properties: {
                                                  id: {
                                                    description:
                                                      'The ID of the file.',
                                                    type: 'string',
                                                  },
                                                  name: {
                                                    description:
                                                      'The name of the file.',
                                                    type: 'string',
                                                  },
                                                  url: {
                                                    description:
                                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                    type: 'string',
                                                  },
                                                  mimeType: {
                                                    description:
                                                      'The MIME type of the file.',
                                                    type: 'string',
                                                  },
                                                  size: {
                                                    description:
                                                      'The size of the file, in bytes.',
                                                    type: 'number',
                                                  },
                                                  uploadStatus: {
                                                    description:
                                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                    type: 'string',
                                                    enum: [
                                                      'uploading',
                                                      'uploaded',
                                                      'failed',
                                                      'cancelled',
                                                    ],
                                                  },
                                                },
                                                propertyOrder: [
                                                  'id',
                                                  'name',
                                                  'url',
                                                  'mimeType',
                                                  'size',
                                                  'uploadStatus',
                                                ],
                                                required: [
                                                  'id',
                                                  'name',
                                                  'url',
                                                  'mimeType',
                                                  'size',
                                                  'uploadStatus',
                                                ],
                                              },
                                            ],
                                          },
                                          locationData: {
                                            description:
                                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                            type: ['null', 'string'],
                                          },
                                          customData: {
                                            description:
                                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                            anyOf: [
                                              { type: 'null' },
                                              {
                                                type: 'CustomAnnotationData',
                                                properties: {
                                                  location: {
                                                    description:
                                                      'The custom location you produced for this annotation at annotation capture time.',
                                                    type: 'Location',
                                                  },
                                                  coordsRelativeToTarget: {
                                                    description:
                                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                    type: 'object',
                                                    properties: {
                                                      x: { type: 'number' },
                                                      y: { type: 'number' },
                                                    },
                                                    propertyOrder: ['x', 'y'],
                                                    required: ['x', 'y'],
                                                  },
                                                  label: {
                                                    description:
                                                      'Your custom user-visible label for the annotation, if any.',
                                                    type: ['null', 'string'],
                                                  },
                                                },
                                                propertyOrder: [
                                                  'location',
                                                  'coordsRelativeToTarget',
                                                  'label',
                                                ],
                                                required: [
                                                  'location',
                                                  'coordsRelativeToTarget',
                                                  'label',
                                                ],
                                              },
                                            ],
                                          },
                                          textContent: {
                                            description:
                                              'The text that was selected when creating the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'screenshot',
                                          'locationData',
                                          'customData',
                                          'textContent',
                                        ],
                                        required: [
                                          'type',
                                          'screenshot',
                                          'locationData',
                                          'customData',
                                          'textContent',
                                        ],
                                      },
                                      {
                                        type: 'MessageScreenshotAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                            type: '"screenshot"',
                                          },
                                          screenshot: {
                                            description:
                                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                            type: 'UploadedFile',
                                            properties: {
                                              id: {
                                                description:
                                                  'The ID of the file.',
                                                type: 'string',
                                              },
                                              name: {
                                                description:
                                                  'The name of the file.',
                                                type: 'string',
                                              },
                                              url: {
                                                description:
                                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                type: 'string',
                                              },
                                              mimeType: {
                                                description:
                                                  'The MIME type of the file.',
                                                type: 'string',
                                              },
                                              size: {
                                                description:
                                                  'The size of the file, in bytes.',
                                                type: 'number',
                                              },
                                              uploadStatus: {
                                                description:
                                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                type: 'string',
                                                enum: [
                                                  'uploading',
                                                  'uploaded',
                                                  'failed',
                                                  'cancelled',
                                                ],
                                              },
                                            },
                                            propertyOrder: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                            required: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                          },
                                        },
                                        propertyOrder: ['type', 'screenshot'],
                                        required: ['type', 'screenshot'],
                                      },
                                      {
                                        type: 'MessageLinkPreviewAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `link_preview` for file link previews.',
                                            type: '"link_preview"',
                                          },
                                          id: {
                                            description:
                                              'The ID of the link preview attachment.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The url from which the preview was generated.',
                                            type: 'string',
                                          },
                                          imageURL: {
                                            description:
                                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                            type: ['null', 'string'],
                                          },
                                          title: {
                                            description:
                                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                            type: ['null', 'string'],
                                          },
                                          description: {
                                            description:
                                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'id',
                                          'url',
                                          'imageURL',
                                          'title',
                                          'description',
                                        ],
                                        required: [
                                          'type',
                                          'id',
                                          'url',
                                          'imageURL',
                                          'title',
                                          'description',
                                        ],
                                      },
                                    ],
                                  },
                                },
                                reactions: {
                                  description: 'The reactions to this message.',
                                  type: 'Reaction[]',
                                  items: {
                                    type: 'Reaction',
                                    properties: {
                                      reaction: {
                                        description: 'The emoji reaction.',
                                        type: 'string',
                                      },
                                      userID: {
                                        description:
                                          'The ID of the user who reacted to the message.',
                                        type: 'string',
                                      },
                                      timestamp: {
                                        description:
                                          'The timestamp of when the reaction was created.',
                                        type: 'Date',
                                      },
                                    },
                                    propertyOrder: [
                                      'reaction',
                                      'userID',
                                      'timestamp',
                                    ],
                                    required: [
                                      'reaction',
                                      'userID',
                                      'timestamp',
                                    ],
                                  },
                                },
                                seenBy: {
                                  description:
                                    'A list of IDs of the users that have seen the message.',
                                  type: 'string[]',
                                  items: { type: 'string' },
                                },
                                skipLinkPreviews: {
                                  description:
                                    "If set, Cord won't analyze links in the message to generate previews.",
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: [
                                'seen',
                                'id',
                                'authorID',
                                'groupID',
                                'threadID',
                                'content',
                                'plaintext',
                                'url',
                                'createdTimestamp',
                                'deletedTimestamp',
                                'updatedTimestamp',
                                'iconURL',
                                'translationKey',
                                'type',
                                'metadata',
                                'extraClassnames',
                                'attachments',
                                'reactions',
                                'seenBy',
                                'skipLinkPreviews',
                              ],
                              required: [
                                'seen',
                                'id',
                                'authorID',
                                'groupID',
                                'threadID',
                                'content',
                                'plaintext',
                                'url',
                                'createdTimestamp',
                                'deletedTimestamp',
                                'updatedTimestamp',
                                'iconURL',
                                'translationKey',
                                'type',
                                'metadata',
                                'extraClassnames',
                                'attachments',
                                'reactions',
                                'seenBy',
                                'skipLinkPreviews',
                              ],
                            },
                          ],
                        },
                        lastMessage: {
                          description:
                            'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'ClientMessageData',
                              properties: {
                                seen: {
                                  description:
                                    'Whether the message has been seen by the current viewer.',
                                  type: 'boolean',
                                },
                                id: {
                                  description:
                                    'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                                  type: 'string',
                                },
                                authorID: {
                                  description:
                                    'The ID for the user that sent the message.',
                                  type: 'string',
                                },
                                groupID: {
                                  description:
                                    'The ID for the group this message belongs to.',
                                  type: 'string',
                                },
                                threadID: {
                                  description:
                                    'The ID for the thread this message is part of.',
                                  type: 'string',
                                },
                                content: {
                                  description: 'The content of the message.',
                                  type: 'MessageContent',
                                  items: {
                                    anyOf: [
                                      {
                                        type: 'MessageAssigneeNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.ASSIGNEE',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          user: {
                                            type: 'object',
                                            properties: {
                                              id: { type: 'string' },
                                            },
                                            propertyOrder: ['id'],
                                            required: ['id'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'user',
                                        ],
                                        required: ['type', 'children', 'user'],
                                      },
                                      {
                                        type: 'MessageBulletNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.BULLET',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          indent: { type: 'number' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'indent',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageCodeNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.CODE',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageLinkNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.LINK',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          url: { type: 'string' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'url',
                                        ],
                                        required: ['type', 'children', 'url'],
                                      },
                                      {
                                        type: 'MessageMentionNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.MENTION',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          user: {
                                            type: 'object',
                                            properties: {
                                              id: { type: 'string' },
                                            },
                                            propertyOrder: ['id'],
                                            required: ['id'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'user',
                                        ],
                                        required: ['type', 'children', 'user'],
                                      },
                                      {
                                        type: 'MessageNumberBulletNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.NUMBER_BULLET',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          bulletNumber: { type: 'number' },
                                          indent: { type: 'number' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'bulletNumber',
                                          'indent',
                                        ],
                                        required: [
                                          'type',
                                          'children',
                                          'bulletNumber',
                                        ],
                                      },
                                      {
                                        type: 'MessageParagraphNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.PARAGRAPH',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageQuoteNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.QUOTE',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                      {
                                        type: 'MessageTextNode',
                                        properties: {
                                          type: { type: 'undefined' },
                                          class: { type: 'string' },
                                          text: { type: 'string' },
                                          bold: { type: 'boolean' },
                                          italic: { type: 'boolean' },
                                          underline: { type: 'boolean' },
                                          code: { type: 'boolean' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'text',
                                          'bold',
                                          'italic',
                                          'underline',
                                          'code',
                                        ],
                                        required: ['text'],
                                      },
                                      {
                                        type: 'MessageTodoNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.TODO',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                          todoID: { type: 'string' },
                                          done: { type: 'boolean' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                          'todoID',
                                          'done',
                                        ],
                                        required: [
                                          'type',
                                          'children',
                                          'todoID',
                                          'done',
                                        ],
                                      },
                                      {
                                        type: 'MessageMarkdownNode',
                                        properties: {
                                          type: {
                                            type: 'MessageNodeType.MARKDOWN',
                                          },
                                          class: { type: 'string' },
                                          children: { type: 'MessageContent' },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'class',
                                          'children',
                                        ],
                                        required: ['type', 'children'],
                                      },
                                    ],
                                  },
                                },
                                plaintext: {
                                  description:
                                    'A plaintext version of the structured message content.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                                  type: ['null', 'string'],
                                },
                                createdTimestamp: {
                                  description:
                                    'The timestamp when this message was created.  The default value is the current time.',
                                  type: 'Date',
                                },
                                deletedTimestamp: {
                                  description:
                                    'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                                },
                                updatedTimestamp: {
                                  description:
                                    'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                                  anyOf: [{ type: 'null' }, { type: 'Date' }],
                                },
                                iconURL: {
                                  description:
                                    'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                                  type: ['null', 'string'],
                                },
                                translationKey: {
                                  description:
                                    'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                                  type: ['null', 'string'],
                                },
                                type: {
                                  description:
                                    'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                                  type: 'string',
                                  enum: ['action_message', 'user_message'],
                                },
                                metadata: {
                                  description:
                                    'Arbitrary key-value pairs that can be used to store additional information.',
                                  type: 'EntityMetadata',
                                },
                                extraClassnames: {
                                  description:
                                    'A optional space separated list of classnames to add to the message.',
                                  type: ['null', 'string'],
                                },
                                attachments: {
                                  description:
                                    'The items attached to this message.',
                                  type: 'MessageAttachment[]',
                                  items: {
                                    anyOf: [
                                      {
                                        type: 'MessageFileAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `file` for file attachments.',
                                            type: '"file"',
                                          },
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'type',
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                      {
                                        type: 'MessageAnnotationAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `annotation` for annotation attachments.',
                                            type: '"annotation"',
                                          },
                                          screenshot: {
                                            description:
                                              'The screenshot attached to the annotation, if any.',
                                            anyOf: [
                                              { type: 'null' },
                                              {
                                                type: 'UploadedFile',
                                                properties: {
                                                  id: {
                                                    description:
                                                      'The ID of the file.',
                                                    type: 'string',
                                                  },
                                                  name: {
                                                    description:
                                                      'The name of the file.',
                                                    type: 'string',
                                                  },
                                                  url: {
                                                    description:
                                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                    type: 'string',
                                                  },
                                                  mimeType: {
                                                    description:
                                                      'The MIME type of the file.',
                                                    type: 'string',
                                                  },
                                                  size: {
                                                    description:
                                                      'The size of the file, in bytes.',
                                                    type: 'number',
                                                  },
                                                  uploadStatus: {
                                                    description:
                                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                    type: 'string',
                                                    enum: [
                                                      'uploading',
                                                      'uploaded',
                                                      'failed',
                                                      'cancelled',
                                                    ],
                                                  },
                                                },
                                                propertyOrder: [
                                                  'id',
                                                  'name',
                                                  'url',
                                                  'mimeType',
                                                  'size',
                                                  'uploadStatus',
                                                ],
                                                required: [
                                                  'id',
                                                  'name',
                                                  'url',
                                                  'mimeType',
                                                  'size',
                                                  'uploadStatus',
                                                ],
                                              },
                                            ],
                                          },
                                          locationData: {
                                            description:
                                              'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                            type: ['null', 'string'],
                                          },
                                          customData: {
                                            description:
                                              "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                            anyOf: [
                                              { type: 'null' },
                                              {
                                                type: 'CustomAnnotationData',
                                                properties: {
                                                  location: {
                                                    description:
                                                      'The custom location you produced for this annotation at annotation capture time.',
                                                    type: 'Location',
                                                  },
                                                  coordsRelativeToTarget: {
                                                    description:
                                                      'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                    type: 'object',
                                                    properties: {
                                                      x: { type: 'number' },
                                                      y: { type: 'number' },
                                                    },
                                                    propertyOrder: ['x', 'y'],
                                                    required: ['x', 'y'],
                                                  },
                                                  label: {
                                                    description:
                                                      'Your custom user-visible label for the annotation, if any.',
                                                    type: ['null', 'string'],
                                                  },
                                                },
                                                propertyOrder: [
                                                  'location',
                                                  'coordsRelativeToTarget',
                                                  'label',
                                                ],
                                                required: [
                                                  'location',
                                                  'coordsRelativeToTarget',
                                                  'label',
                                                ],
                                              },
                                            ],
                                          },
                                          textContent: {
                                            description:
                                              'The text that was selected when creating the annotation, if any.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'screenshot',
                                          'locationData',
                                          'customData',
                                          'textContent',
                                        ],
                                        required: [
                                          'type',
                                          'screenshot',
                                          'locationData',
                                          'customData',
                                          'textContent',
                                        ],
                                      },
                                      {
                                        type: 'MessageScreenshotAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                            type: '"screenshot"',
                                          },
                                          screenshot: {
                                            description:
                                              'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                            type: 'UploadedFile',
                                            properties: {
                                              id: {
                                                description:
                                                  'The ID of the file.',
                                                type: 'string',
                                              },
                                              name: {
                                                description:
                                                  'The name of the file.',
                                                type: 'string',
                                              },
                                              url: {
                                                description:
                                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                type: 'string',
                                              },
                                              mimeType: {
                                                description:
                                                  'The MIME type of the file.',
                                                type: 'string',
                                              },
                                              size: {
                                                description:
                                                  'The size of the file, in bytes.',
                                                type: 'number',
                                              },
                                              uploadStatus: {
                                                description:
                                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                type: 'string',
                                                enum: [
                                                  'uploading',
                                                  'uploaded',
                                                  'failed',
                                                  'cancelled',
                                                ],
                                              },
                                            },
                                            propertyOrder: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                            required: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                          },
                                        },
                                        propertyOrder: ['type', 'screenshot'],
                                        required: ['type', 'screenshot'],
                                      },
                                      {
                                        type: 'MessageLinkPreviewAttachment',
                                        properties: {
                                          type: {
                                            description:
                                              'The type of this attachment, which is always `link_preview` for file link previews.',
                                            type: '"link_preview"',
                                          },
                                          id: {
                                            description:
                                              'The ID of the link preview attachment.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The url from which the preview was generated.',
                                            type: 'string',
                                          },
                                          imageURL: {
                                            description:
                                              'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                            type: ['null', 'string'],
                                          },
                                          title: {
                                            description:
                                              "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                            type: ['null', 'string'],
                                          },
                                          description: {
                                            description:
                                              'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                            type: ['null', 'string'],
                                          },
                                        },
                                        propertyOrder: [
                                          'type',
                                          'id',
                                          'url',
                                          'imageURL',
                                          'title',
                                          'description',
                                        ],
                                        required: [
                                          'type',
                                          'id',
                                          'url',
                                          'imageURL',
                                          'title',
                                          'description',
                                        ],
                                      },
                                    ],
                                  },
                                },
                                reactions: {
                                  description: 'The reactions to this message.',
                                  type: 'Reaction[]',
                                  items: {
                                    type: 'Reaction',
                                    properties: {
                                      reaction: {
                                        description: 'The emoji reaction.',
                                        type: 'string',
                                      },
                                      userID: {
                                        description:
                                          'The ID of the user who reacted to the message.',
                                        type: 'string',
                                      },
                                      timestamp: {
                                        description:
                                          'The timestamp of when the reaction was created.',
                                        type: 'Date',
                                      },
                                    },
                                    propertyOrder: [
                                      'reaction',
                                      'userID',
                                      'timestamp',
                                    ],
                                    required: [
                                      'reaction',
                                      'userID',
                                      'timestamp',
                                    ],
                                  },
                                },
                                seenBy: {
                                  description:
                                    'A list of IDs of the users that have seen the message.',
                                  type: 'string[]',
                                  items: { type: 'string' },
                                },
                                skipLinkPreviews: {
                                  description:
                                    "If set, Cord won't analyze links in the message to generate previews.",
                                  type: 'boolean',
                                },
                              },
                              propertyOrder: [
                                'seen',
                                'id',
                                'authorID',
                                'groupID',
                                'threadID',
                                'content',
                                'plaintext',
                                'url',
                                'createdTimestamp',
                                'deletedTimestamp',
                                'updatedTimestamp',
                                'iconURL',
                                'translationKey',
                                'type',
                                'metadata',
                                'extraClassnames',
                                'attachments',
                                'reactions',
                                'seenBy',
                                'skipLinkPreviews',
                              ],
                              required: [
                                'seen',
                                'id',
                                'authorID',
                                'groupID',
                                'threadID',
                                'content',
                                'plaintext',
                                'url',
                                'createdTimestamp',
                                'deletedTimestamp',
                                'updatedTimestamp',
                                'iconURL',
                                'translationKey',
                                'type',
                                'metadata',
                                'extraClassnames',
                                'attachments',
                                'reactions',
                                'seenBy',
                                'skipLinkPreviews',
                              ],
                            },
                          ],
                        },
                        id: {
                          description: 'The ID for this thread.',
                          type: 'string',
                        },
                        groupID: {
                          description: 'The group ID this thread is in.',
                          type: 'string',
                        },
                        total: {
                          description:
                            'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                          type: 'number',
                        },
                        userMessages: {
                          description:
                            'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                          type: 'number',
                        },
                        actionMessages: {
                          description:
                            'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                          type: 'number',
                        },
                        deletedMessages: {
                          description:
                            'The number of deleted messages in this thread.',
                          type: 'number',
                        },
                        resolved: {
                          description:
                            'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                          type: 'boolean',
                        },
                        resolvedTimestamp: {
                          description:
                            'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                          anyOf: [{ type: 'null' }, { type: 'Date' }],
                        },
                        participants: {
                          description:
                            'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                          type: 'ThreadParticipant[]',
                          items: {
                            type: 'ThreadParticipant',
                            properties: {
                              lastSeenTimestamp: {
                                description:
                                  'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              userID: {
                                description:
                                  "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                type: ['null', 'string'],
                              },
                              displayName: {
                                description:
                                  "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                type: ['null', 'string'],
                              },
                            },
                            propertyOrder: [
                              'lastSeenTimestamp',
                              'userID',
                              'displayName',
                            ],
                            required: [
                              'lastSeenTimestamp',
                              'userID',
                              'displayName',
                            ],
                          },
                        },
                        subscribers: {
                          description:
                            'All of the users who are subscribed to this thread.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        repliers: {
                          description:
                            'All of the users who have replied to this thread.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        mentioned: {
                          description:
                            'All of the users who were mentioned in a message in this thread.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        actionMessageRepliers: {
                          description:
                            "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        typing: {
                          description:
                            'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        name: {
                          description:
                            'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                          type: 'string',
                        },
                        url: {
                          description:
                            "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                          type: 'string',
                        },
                        location: {
                          description:
                            'The [location](/reference/location) of this thread.',
                          type: 'Location',
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        extraClassnames: {
                          description:
                            'An optional space separated list of classnames to add to the thread.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'unread',
                        'viewerIsThreadParticipant',
                        'firstMessage',
                        'lastMessage',
                        'id',
                        'groupID',
                        'total',
                        'userMessages',
                        'actionMessages',
                        'deletedMessages',
                        'resolved',
                        'resolvedTimestamp',
                        'participants',
                        'subscribers',
                        'repliers',
                        'mentioned',
                        'actionMessageRepliers',
                        'typing',
                        'name',
                        'url',
                        'location',
                        'metadata',
                        'extraClassnames',
                      ],
                      required: [
                        'unread',
                        'viewerIsThreadParticipant',
                        'firstMessage',
                        'lastMessage',
                        'id',
                        'groupID',
                        'total',
                        'userMessages',
                        'actionMessages',
                        'deletedMessages',
                        'resolved',
                        'resolvedTimestamp',
                        'participants',
                        'subscribers',
                        'repliers',
                        'mentioned',
                        'actionMessageRepliers',
                        'typing',
                        'name',
                        'url',
                        'location',
                        'metadata',
                        'extraClassnames',
                      ],
                    },
                  ],
                },
                loading: {
                  description:
                    'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
                  type: 'boolean',
                },
                fetchMore: {
                  description:
                    "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
                  type: 'FetchMoreCallback',
                },
                hasMore: {
                  description:
                    "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
                  type: 'boolean',
                },
              },
              propertyOrder: [
                'messages',
                'thread',
                'loading',
                'fetchMore',
                'hasMore',
              ],
              required: [
                'messages',
                'thread',
                'loading',
                'fetchMore',
                'hasMore',
              ],
              description: 'The data of the thread to be displayed.',
            },
            showHeader: {
              type: 'boolean',
              description:
                'If set to `true`, the header of the thread will be displayed. Defaults to `false`.',
            },
            composerExpanded: {
              type: 'string',
              enum: ['auto', 'never', 'always'],
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: [
            'threadData',
            'showHeader',
            'composerExpanded',
            'style',
            'className',
          ],
          required: ['threadData'],
        },
      },
      CommonThreadsProps: {
        name: 'CommonThreadsProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            composerOptions: {
              type: 'object',
              properties: {
                position: {
                  description:
                    'The position of the Composer: top (YouTube style), or bottom (Slack style)',
                  type: 'string',
                  enum: ['top', 'bottom'],
                },
                groupID: {
                  description: 'The groupID the new thread will be added to.',
                  type: 'string',
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                addSubscribers: {
                  description: 'A list of subscribers to add to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
              },
              propertyOrder: [
                'position',
                'groupID',
                'name',
                'id',
                'metadata',
                'url',
                'extraClassnames',
                'location',
                'addSubscribers',
              ],
              required: ['position', 'groupID'],
              description:
                'Adds a composer to allow users creating new threads.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: ['composerOptions', 'style', 'className'],
          required: [],
        },
      },
      ThreadsByOptionsProps: {
        name: 'ThreadsByOptionsProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            options: {
              type: 'ObserveThreadsOptions',
              properties: {
                sortBy: {
                  description:
                    'This option controls the criteria for how threads are sorted. Combined with `sortDirection`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `first_message_timestamp`: sort threads by the   timestamp of the first message in the thread. In other    words, threads will be sorted based on how recently they    were created.  \n\n* `most_recent_message_timestamp`: sort threads    by the timestamp of the most recent message in the thread.    In other words, threads will be sorted based on how    recently they were responded to.  \n\nIf unset, defaults to `first_message_timestamp`.',
                  type: 'string',
                  enum: [
                    'first_message_timestamp',
                    'most_recent_message_timestamp',
                  ],
                },
                sortDirection: {
                  description:
                    'This option controls the direction that `sortBy` sorts. Combined with `sortBy`, it determines which threads are "first".  \n\nIt\'s a string enum which can have one of the following values:  \n\n* `ascending`: sort older threads in front of newer threads.  \n\n* `descending`: sort newer threads in front of older threads.  \n\nIf unset, defaults to `descending` (since people usually care about the most recent things).',
                  type: 'string',
                  enum: ['ascending', 'descending'],
                },
                filter: {
                  description:
                    'An object that can be used to filter the threads returned.',
                  type: 'ClientThreadFilter',
                  properties: {
                    location: {
                      description:
                        'The [Location](/reference/location) of the threads. This can either be just the location value or an object with a value for both the location and partialMatch properties.  \n\nThe value for partialMatch will default to false if only location is provided.',
                      anyOf: [
                        { type: 'Location' },
                        {
                          type: 'LocationFilterOptions',
                          properties: {
                            value: {
                              description:
                                'The [Location](/reference/location) of the threads.',
                              type: 'Location',
                            },
                            partialMatch: {
                              description:
                                'If `true`, perform [partial matching](/reference/location#Partial-Matching) on the specified location. If `false`, fetch information for only exactly the location specified.',
                              type: 'boolean',
                            },
                          },
                          propertyOrder: ['value', 'partialMatch'],
                          required: ['value', 'partialMatch'],
                        },
                      ],
                    },
                    resolvedStatus: {
                      description:
                        'If set to `resolved`, only resolved threads will be returned. If set to `unresolved`, only unresolved threads will be returned. If set to `any`, both resolved and unresolved threads will be returned.  \n\nIf unset, defaults to `any`.',
                      type: 'string',
                      enum: ['any', 'resolved', 'unresolved'],
                    },
                    metadata: {
                      description:
                        'The value for a `metadata` entry should be an object representing the metadata key/value to filter on.  For example, to show only threads with the metadata key of `"category"` set to `"sales"`, set the filter to `{ metadata: { category: "sales" } }`.',
                      type: 'EntityMetadata',
                    },
                    groupID: {
                      description:
                        'Filter to threads belonging to a specified [group](/rest-apis/groups).',
                      type: 'string',
                    },
                    viewer: {
                      description:
                        'The status of the viewer in this thread.  If multiple statuses are supplied, a thread will match the filter if the viewer has any of those statuses.',
                      anyOf: [
                        { type: '"subscribed"' },
                        { type: '"mentioned"' },
                        {
                          type: 'ViewerThreadStatus[]',
                          items: {
                            type: 'string',
                            enum: ['subscribed', 'mentioned'],
                          },
                        },
                      ],
                    },
                  },
                  propertyOrder: [
                    'location',
                    'resolvedStatus',
                    'metadata',
                    'groupID',
                    'viewer',
                  ],
                  required: [],
                },
                initialFetchCount: {
                  description:
                    'The number of threads to initially fetch. Once these are returned you can use the `fetchMore` property to get additional threads.  \n\nThe default for this is 10, and has a limit of 1000.',
                  type: 'number',
                },
              },
              propertyOrder: [
                'sortBy',
                'sortDirection',
                'filter',
                'initialFetchCount',
              ],
              required: [],
              description:
                'The options that control which and how many threads are fetched.',
            },
            composerOptions: {
              type: 'object',
              properties: {
                position: {
                  description:
                    'The position of the Composer: top (YouTube style), or bottom (Slack style)',
                  type: 'string',
                  enum: ['top', 'bottom'],
                },
                groupID: {
                  description: 'The groupID the new thread will be added to.',
                  type: 'string',
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                addSubscribers: {
                  description: 'A list of subscribers to add to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
              },
              propertyOrder: [
                'position',
                'groupID',
                'name',
                'id',
                'metadata',
                'url',
                'extraClassnames',
                'location',
                'addSubscribers',
              ],
              required: ['position', 'groupID'],
              description:
                'Adds a composer to allow users creating new threads.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: ['options', 'composerOptions', 'style', 'className'],
          required: ['options'],
        },
      },
      ThreadsProps: {
        name: 'ThreadsProps',
        methods: { methodOrder: [], required: [], methods: {} },
        properties: {
          properties: {
            threadsData: {
              type: 'ThreadsData',
              properties: {
                loading: {
                  description:
                    'When this is `true`, Cord is in the process of fetching additional data from its backend. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will become `false`.  \n\nBoth the initial data load and a call to `fetchMore` will start a fetch and cause `loading` to become `true`.',
                  type: 'boolean',
                },
                fetchMore: {
                  description:
                    "Call this function to fetch additional data from Cord's backend. It takes a single argument, the number of additional items to fetch.  \n\nOnce called, `loading` will become `true` while the data is fetched. Once the fetch is complete, the additional items will be appended to the result list, and `loading` will return to `false`.  \n\nThis function returns a promise that is resolved once the fetch is complete.",
                  type: 'FetchMoreCallback',
                },
                hasMore: {
                  description:
                    "If this is `true`, then the list of results is incomplete, and you need to call `fetchMore` to continue paginating through them. Once this becomes `false`, all results are available, and calls to `fetchMore` won't do anything.",
                  type: 'boolean',
                },
                threads: {
                  description:
                    'An array of objects containing the threads that match the request.  \n\nThis array is paginated. At first, it will contain only the first few threads. Calling `fetchMore` will cause further threads to be appended to the array.  \n\nThe order in which you will receive the threads is determined by the sorting options.',
                  type: 'ThreadSummary[]',
                  items: {
                    type: 'ThreadSummary',
                    properties: {
                      unread: {
                        description:
                          "The number of messages that the current user hasn't seen yet. This count excludes deleted messages.",
                        type: 'number',
                      },
                      viewerIsThreadParticipant: {
                        description:
                          'Whether the current viewer has either left a message or reacted to this thread.',
                        type: 'boolean',
                      },
                      firstMessage: {
                        description:
                          'Contains information about the first (i.e., oldest) message in the thread. `null` if the thread is empty.',
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'ClientMessageData',
                            properties: {
                              seen: {
                                description:
                                  'Whether the message has been seen by the current viewer.',
                                type: 'boolean',
                              },
                              id: {
                                description:
                                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                                type: 'string',
                              },
                              authorID: {
                                description:
                                  'The ID for the user that sent the message.',
                                type: 'string',
                              },
                              groupID: {
                                description:
                                  'The ID for the group this message belongs to.',
                                type: 'string',
                              },
                              threadID: {
                                description:
                                  'The ID for the thread this message is part of.',
                                type: 'string',
                              },
                              content: {
                                description: 'The content of the message.',
                                type: 'MessageContent',
                                items: {
                                  anyOf: [
                                    {
                                      type: 'MessageAssigneeNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.ASSIGNEE',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        user: {
                                          type: 'object',
                                          properties: {
                                            id: { type: 'string' },
                                          },
                                          propertyOrder: ['id'],
                                          required: ['id'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'user',
                                      ],
                                      required: ['type', 'children', 'user'],
                                    },
                                    {
                                      type: 'MessageBulletNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.BULLET',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        indent: { type: 'number' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'indent',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageCodeNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.CODE' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageLinkNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.LINK' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        url: { type: 'string' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'url',
                                      ],
                                      required: ['type', 'children', 'url'],
                                    },
                                    {
                                      type: 'MessageMentionNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.MENTION',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        user: {
                                          type: 'object',
                                          properties: {
                                            id: { type: 'string' },
                                          },
                                          propertyOrder: ['id'],
                                          required: ['id'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'user',
                                      ],
                                      required: ['type', 'children', 'user'],
                                    },
                                    {
                                      type: 'MessageNumberBulletNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.NUMBER_BULLET',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        bulletNumber: { type: 'number' },
                                        indent: { type: 'number' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'bulletNumber',
                                        'indent',
                                      ],
                                      required: [
                                        'type',
                                        'children',
                                        'bulletNumber',
                                      ],
                                    },
                                    {
                                      type: 'MessageParagraphNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.PARAGRAPH',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageQuoteNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.QUOTE' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageTextNode',
                                      properties: {
                                        type: { type: 'undefined' },
                                        class: { type: 'string' },
                                        text: { type: 'string' },
                                        bold: { type: 'boolean' },
                                        italic: { type: 'boolean' },
                                        underline: { type: 'boolean' },
                                        code: { type: 'boolean' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'text',
                                        'bold',
                                        'italic',
                                        'underline',
                                        'code',
                                      ],
                                      required: ['text'],
                                    },
                                    {
                                      type: 'MessageTodoNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.TODO' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        todoID: { type: 'string' },
                                        done: { type: 'boolean' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'todoID',
                                        'done',
                                      ],
                                      required: [
                                        'type',
                                        'children',
                                        'todoID',
                                        'done',
                                      ],
                                    },
                                    {
                                      type: 'MessageMarkdownNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.MARKDOWN',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                  ],
                                },
                              },
                              plaintext: {
                                description:
                                  'A plaintext version of the structured message content.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                                type: ['null', 'string'],
                              },
                              createdTimestamp: {
                                description:
                                  'The timestamp when this message was created.  The default value is the current time.',
                                type: 'Date',
                              },
                              deletedTimestamp: {
                                description:
                                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              updatedTimestamp: {
                                description:
                                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              iconURL: {
                                description:
                                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                                type: ['null', 'string'],
                              },
                              translationKey: {
                                description:
                                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                                type: ['null', 'string'],
                              },
                              type: {
                                description:
                                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                                type: 'string',
                                enum: ['action_message', 'user_message'],
                              },
                              metadata: {
                                description:
                                  'Arbitrary key-value pairs that can be used to store additional information.',
                                type: 'EntityMetadata',
                              },
                              extraClassnames: {
                                description:
                                  'A optional space separated list of classnames to add to the message.',
                                type: ['null', 'string'],
                              },
                              attachments: {
                                description:
                                  'The items attached to this message.',
                                type: 'MessageAttachment[]',
                                items: {
                                  anyOf: [
                                    {
                                      type: 'MessageFileAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `file` for file attachments.',
                                          type: '"file"',
                                        },
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'type',
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                    {
                                      type: 'MessageAnnotationAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                                          type: '"annotation"',
                                        },
                                        screenshot: {
                                          description:
                                            'The screenshot attached to the annotation, if any.',
                                          anyOf: [
                                            { type: 'null' },
                                            {
                                              type: 'UploadedFile',
                                              properties: {
                                                id: {
                                                  description:
                                                    'The ID of the file.',
                                                  type: 'string',
                                                },
                                                name: {
                                                  description:
                                                    'The name of the file.',
                                                  type: 'string',
                                                },
                                                url: {
                                                  description:
                                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                  type: 'string',
                                                },
                                                mimeType: {
                                                  description:
                                                    'The MIME type of the file.',
                                                  type: 'string',
                                                },
                                                size: {
                                                  description:
                                                    'The size of the file, in bytes.',
                                                  type: 'number',
                                                },
                                                uploadStatus: {
                                                  description:
                                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                  type: 'string',
                                                  enum: [
                                                    'uploading',
                                                    'uploaded',
                                                    'failed',
                                                    'cancelled',
                                                  ],
                                                },
                                              },
                                              propertyOrder: [
                                                'id',
                                                'name',
                                                'url',
                                                'mimeType',
                                                'size',
                                                'uploadStatus',
                                              ],
                                              required: [
                                                'id',
                                                'name',
                                                'url',
                                                'mimeType',
                                                'size',
                                                'uploadStatus',
                                              ],
                                            },
                                          ],
                                        },
                                        locationData: {
                                          description:
                                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                          type: ['null', 'string'],
                                        },
                                        customData: {
                                          description:
                                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                          anyOf: [
                                            { type: 'null' },
                                            {
                                              type: 'CustomAnnotationData',
                                              properties: {
                                                location: {
                                                  description:
                                                    'The custom location you produced for this annotation at annotation capture time.',
                                                  type: 'Location',
                                                },
                                                coordsRelativeToTarget: {
                                                  description:
                                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                  type: 'object',
                                                  properties: {
                                                    x: { type: 'number' },
                                                    y: { type: 'number' },
                                                  },
                                                  propertyOrder: ['x', 'y'],
                                                  required: ['x', 'y'],
                                                },
                                                label: {
                                                  description:
                                                    'Your custom user-visible label for the annotation, if any.',
                                                  type: ['null', 'string'],
                                                },
                                              },
                                              propertyOrder: [
                                                'location',
                                                'coordsRelativeToTarget',
                                                'label',
                                              ],
                                              required: [
                                                'location',
                                                'coordsRelativeToTarget',
                                                'label',
                                              ],
                                            },
                                          ],
                                        },
                                        textContent: {
                                          description:
                                            'The text that was selected when creating the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'screenshot',
                                        'locationData',
                                        'customData',
                                        'textContent',
                                      ],
                                      required: [
                                        'type',
                                        'screenshot',
                                        'locationData',
                                        'customData',
                                        'textContent',
                                      ],
                                    },
                                    {
                                      type: 'MessageScreenshotAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                          type: '"screenshot"',
                                        },
                                        screenshot: {
                                          description:
                                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      },
                                      propertyOrder: ['type', 'screenshot'],
                                      required: ['type', 'screenshot'],
                                    },
                                    {
                                      type: 'MessageLinkPreviewAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `link_preview` for file link previews.',
                                          type: '"link_preview"',
                                        },
                                        id: {
                                          description:
                                            'The ID of the link preview attachment.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The url from which the preview was generated.',
                                          type: 'string',
                                        },
                                        imageURL: {
                                          description:
                                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                          type: ['null', 'string'],
                                        },
                                        title: {
                                          description:
                                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                          type: ['null', 'string'],
                                        },
                                        description: {
                                          description:
                                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'id',
                                        'url',
                                        'imageURL',
                                        'title',
                                        'description',
                                      ],
                                      required: [
                                        'type',
                                        'id',
                                        'url',
                                        'imageURL',
                                        'title',
                                        'description',
                                      ],
                                    },
                                  ],
                                },
                              },
                              reactions: {
                                description: 'The reactions to this message.',
                                type: 'Reaction[]',
                                items: {
                                  type: 'Reaction',
                                  properties: {
                                    reaction: {
                                      description: 'The emoji reaction.',
                                      type: 'string',
                                    },
                                    userID: {
                                      description:
                                        'The ID of the user who reacted to the message.',
                                      type: 'string',
                                    },
                                    timestamp: {
                                      description:
                                        'The timestamp of when the reaction was created.',
                                      type: 'Date',
                                    },
                                  },
                                  propertyOrder: [
                                    'reaction',
                                    'userID',
                                    'timestamp',
                                  ],
                                  required: ['reaction', 'userID', 'timestamp'],
                                },
                              },
                              seenBy: {
                                description:
                                  'A list of IDs of the users that have seen the message.',
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              skipLinkPreviews: {
                                description:
                                  "If set, Cord won't analyze links in the message to generate previews.",
                                type: 'boolean',
                              },
                            },
                            propertyOrder: [
                              'seen',
                              'id',
                              'authorID',
                              'groupID',
                              'threadID',
                              'content',
                              'plaintext',
                              'url',
                              'createdTimestamp',
                              'deletedTimestamp',
                              'updatedTimestamp',
                              'iconURL',
                              'translationKey',
                              'type',
                              'metadata',
                              'extraClassnames',
                              'attachments',
                              'reactions',
                              'seenBy',
                              'skipLinkPreviews',
                            ],
                            required: [
                              'seen',
                              'id',
                              'authorID',
                              'groupID',
                              'threadID',
                              'content',
                              'plaintext',
                              'url',
                              'createdTimestamp',
                              'deletedTimestamp',
                              'updatedTimestamp',
                              'iconURL',
                              'translationKey',
                              'type',
                              'metadata',
                              'extraClassnames',
                              'attachments',
                              'reactions',
                              'seenBy',
                              'skipLinkPreviews',
                            ],
                          },
                        ],
                      },
                      lastMessage: {
                        description:
                          'Contains information about the last (i.e., newest) message in the thread. `null` if the thread is empty.',
                        anyOf: [
                          { type: 'null' },
                          {
                            type: 'ClientMessageData',
                            properties: {
                              seen: {
                                description:
                                  'Whether the message has been seen by the current viewer.',
                                type: 'boolean',
                              },
                              id: {
                                description:
                                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                                type: 'string',
                              },
                              authorID: {
                                description:
                                  'The ID for the user that sent the message.',
                                type: 'string',
                              },
                              groupID: {
                                description:
                                  'The ID for the group this message belongs to.',
                                type: 'string',
                              },
                              threadID: {
                                description:
                                  'The ID for the thread this message is part of.',
                                type: 'string',
                              },
                              content: {
                                description: 'The content of the message.',
                                type: 'MessageContent',
                                items: {
                                  anyOf: [
                                    {
                                      type: 'MessageAssigneeNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.ASSIGNEE',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        user: {
                                          type: 'object',
                                          properties: {
                                            id: { type: 'string' },
                                          },
                                          propertyOrder: ['id'],
                                          required: ['id'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'user',
                                      ],
                                      required: ['type', 'children', 'user'],
                                    },
                                    {
                                      type: 'MessageBulletNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.BULLET',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        indent: { type: 'number' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'indent',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageCodeNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.CODE' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageLinkNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.LINK' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        url: { type: 'string' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'url',
                                      ],
                                      required: ['type', 'children', 'url'],
                                    },
                                    {
                                      type: 'MessageMentionNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.MENTION',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        user: {
                                          type: 'object',
                                          properties: {
                                            id: { type: 'string' },
                                          },
                                          propertyOrder: ['id'],
                                          required: ['id'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'user',
                                      ],
                                      required: ['type', 'children', 'user'],
                                    },
                                    {
                                      type: 'MessageNumberBulletNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.NUMBER_BULLET',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        bulletNumber: { type: 'number' },
                                        indent: { type: 'number' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'bulletNumber',
                                        'indent',
                                      ],
                                      required: [
                                        'type',
                                        'children',
                                        'bulletNumber',
                                      ],
                                    },
                                    {
                                      type: 'MessageParagraphNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.PARAGRAPH',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageQuoteNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.QUOTE' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                    {
                                      type: 'MessageTextNode',
                                      properties: {
                                        type: { type: 'undefined' },
                                        class: { type: 'string' },
                                        text: { type: 'string' },
                                        bold: { type: 'boolean' },
                                        italic: { type: 'boolean' },
                                        underline: { type: 'boolean' },
                                        code: { type: 'boolean' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'text',
                                        'bold',
                                        'italic',
                                        'underline',
                                        'code',
                                      ],
                                      required: ['text'],
                                    },
                                    {
                                      type: 'MessageTodoNode',
                                      properties: {
                                        type: { type: 'MessageNodeType.TODO' },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                        todoID: { type: 'string' },
                                        done: { type: 'boolean' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                        'todoID',
                                        'done',
                                      ],
                                      required: [
                                        'type',
                                        'children',
                                        'todoID',
                                        'done',
                                      ],
                                    },
                                    {
                                      type: 'MessageMarkdownNode',
                                      properties: {
                                        type: {
                                          type: 'MessageNodeType.MARKDOWN',
                                        },
                                        class: { type: 'string' },
                                        children: { type: 'MessageContent' },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'class',
                                        'children',
                                      ],
                                      required: ['type', 'children'],
                                    },
                                  ],
                                },
                              },
                              plaintext: {
                                description:
                                  'A plaintext version of the structured message content.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                                type: ['null', 'string'],
                              },
                              createdTimestamp: {
                                description:
                                  'The timestamp when this message was created.  The default value is the current time.',
                                type: 'Date',
                              },
                              deletedTimestamp: {
                                description:
                                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              updatedTimestamp: {
                                description:
                                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                                anyOf: [{ type: 'null' }, { type: 'Date' }],
                              },
                              iconURL: {
                                description:
                                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                                type: ['null', 'string'],
                              },
                              translationKey: {
                                description:
                                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                                type: ['null', 'string'],
                              },
                              type: {
                                description:
                                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                                type: 'string',
                                enum: ['action_message', 'user_message'],
                              },
                              metadata: {
                                description:
                                  'Arbitrary key-value pairs that can be used to store additional information.',
                                type: 'EntityMetadata',
                              },
                              extraClassnames: {
                                description:
                                  'A optional space separated list of classnames to add to the message.',
                                type: ['null', 'string'],
                              },
                              attachments: {
                                description:
                                  'The items attached to this message.',
                                type: 'MessageAttachment[]',
                                items: {
                                  anyOf: [
                                    {
                                      type: 'MessageFileAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `file` for file attachments.',
                                          type: '"file"',
                                        },
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'type',
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                    {
                                      type: 'MessageAnnotationAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                                          type: '"annotation"',
                                        },
                                        screenshot: {
                                          description:
                                            'The screenshot attached to the annotation, if any.',
                                          anyOf: [
                                            { type: 'null' },
                                            {
                                              type: 'UploadedFile',
                                              properties: {
                                                id: {
                                                  description:
                                                    'The ID of the file.',
                                                  type: 'string',
                                                },
                                                name: {
                                                  description:
                                                    'The name of the file.',
                                                  type: 'string',
                                                },
                                                url: {
                                                  description:
                                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                  type: 'string',
                                                },
                                                mimeType: {
                                                  description:
                                                    'The MIME type of the file.',
                                                  type: 'string',
                                                },
                                                size: {
                                                  description:
                                                    'The size of the file, in bytes.',
                                                  type: 'number',
                                                },
                                                uploadStatus: {
                                                  description:
                                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                  type: 'string',
                                                  enum: [
                                                    'uploading',
                                                    'uploaded',
                                                    'failed',
                                                    'cancelled',
                                                  ],
                                                },
                                              },
                                              propertyOrder: [
                                                'id',
                                                'name',
                                                'url',
                                                'mimeType',
                                                'size',
                                                'uploadStatus',
                                              ],
                                              required: [
                                                'id',
                                                'name',
                                                'url',
                                                'mimeType',
                                                'size',
                                                'uploadStatus',
                                              ],
                                            },
                                          ],
                                        },
                                        locationData: {
                                          description:
                                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                          type: ['null', 'string'],
                                        },
                                        customData: {
                                          description:
                                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                          anyOf: [
                                            { type: 'null' },
                                            {
                                              type: 'CustomAnnotationData',
                                              properties: {
                                                location: {
                                                  description:
                                                    'The custom location you produced for this annotation at annotation capture time.',
                                                  type: 'Location',
                                                },
                                                coordsRelativeToTarget: {
                                                  description:
                                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                  type: 'object',
                                                  properties: {
                                                    x: { type: 'number' },
                                                    y: { type: 'number' },
                                                  },
                                                  propertyOrder: ['x', 'y'],
                                                  required: ['x', 'y'],
                                                },
                                                label: {
                                                  description:
                                                    'Your custom user-visible label for the annotation, if any.',
                                                  type: ['null', 'string'],
                                                },
                                              },
                                              propertyOrder: [
                                                'location',
                                                'coordsRelativeToTarget',
                                                'label',
                                              ],
                                              required: [
                                                'location',
                                                'coordsRelativeToTarget',
                                                'label',
                                              ],
                                            },
                                          ],
                                        },
                                        textContent: {
                                          description:
                                            'The text that was selected when creating the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'screenshot',
                                        'locationData',
                                        'customData',
                                        'textContent',
                                      ],
                                      required: [
                                        'type',
                                        'screenshot',
                                        'locationData',
                                        'customData',
                                        'textContent',
                                      ],
                                    },
                                    {
                                      type: 'MessageScreenshotAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                          type: '"screenshot"',
                                        },
                                        screenshot: {
                                          description:
                                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                          type: 'UploadedFile',
                                          properties: {
                                            id: {
                                              description:
                                                'The ID of the file.',
                                              type: 'string',
                                            },
                                            name: {
                                              description:
                                                'The name of the file.',
                                              type: 'string',
                                            },
                                            url: {
                                              description:
                                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                              type: 'string',
                                            },
                                            mimeType: {
                                              description:
                                                'The MIME type of the file.',
                                              type: 'string',
                                            },
                                            size: {
                                              description:
                                                'The size of the file, in bytes.',
                                              type: 'number',
                                            },
                                            uploadStatus: {
                                              description:
                                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                              type: 'string',
                                              enum: [
                                                'uploading',
                                                'uploaded',
                                                'failed',
                                                'cancelled',
                                              ],
                                            },
                                          },
                                          propertyOrder: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                          required: [
                                            'id',
                                            'name',
                                            'url',
                                            'mimeType',
                                            'size',
                                            'uploadStatus',
                                          ],
                                        },
                                      },
                                      propertyOrder: ['type', 'screenshot'],
                                      required: ['type', 'screenshot'],
                                    },
                                    {
                                      type: 'MessageLinkPreviewAttachment',
                                      properties: {
                                        type: {
                                          description:
                                            'The type of this attachment, which is always `link_preview` for file link previews.',
                                          type: '"link_preview"',
                                        },
                                        id: {
                                          description:
                                            'The ID of the link preview attachment.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The url from which the preview was generated.',
                                          type: 'string',
                                        },
                                        imageURL: {
                                          description:
                                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                          type: ['null', 'string'],
                                        },
                                        title: {
                                          description:
                                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                          type: ['null', 'string'],
                                        },
                                        description: {
                                          description:
                                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'type',
                                        'id',
                                        'url',
                                        'imageURL',
                                        'title',
                                        'description',
                                      ],
                                      required: [
                                        'type',
                                        'id',
                                        'url',
                                        'imageURL',
                                        'title',
                                        'description',
                                      ],
                                    },
                                  ],
                                },
                              },
                              reactions: {
                                description: 'The reactions to this message.',
                                type: 'Reaction[]',
                                items: {
                                  type: 'Reaction',
                                  properties: {
                                    reaction: {
                                      description: 'The emoji reaction.',
                                      type: 'string',
                                    },
                                    userID: {
                                      description:
                                        'The ID of the user who reacted to the message.',
                                      type: 'string',
                                    },
                                    timestamp: {
                                      description:
                                        'The timestamp of when the reaction was created.',
                                      type: 'Date',
                                    },
                                  },
                                  propertyOrder: [
                                    'reaction',
                                    'userID',
                                    'timestamp',
                                  ],
                                  required: ['reaction', 'userID', 'timestamp'],
                                },
                              },
                              seenBy: {
                                description:
                                  'A list of IDs of the users that have seen the message.',
                                type: 'string[]',
                                items: { type: 'string' },
                              },
                              skipLinkPreviews: {
                                description:
                                  "If set, Cord won't analyze links in the message to generate previews.",
                                type: 'boolean',
                              },
                            },
                            propertyOrder: [
                              'seen',
                              'id',
                              'authorID',
                              'groupID',
                              'threadID',
                              'content',
                              'plaintext',
                              'url',
                              'createdTimestamp',
                              'deletedTimestamp',
                              'updatedTimestamp',
                              'iconURL',
                              'translationKey',
                              'type',
                              'metadata',
                              'extraClassnames',
                              'attachments',
                              'reactions',
                              'seenBy',
                              'skipLinkPreviews',
                            ],
                            required: [
                              'seen',
                              'id',
                              'authorID',
                              'groupID',
                              'threadID',
                              'content',
                              'plaintext',
                              'url',
                              'createdTimestamp',
                              'deletedTimestamp',
                              'updatedTimestamp',
                              'iconURL',
                              'translationKey',
                              'type',
                              'metadata',
                              'extraClassnames',
                              'attachments',
                              'reactions',
                              'seenBy',
                              'skipLinkPreviews',
                            ],
                          },
                        ],
                      },
                      id: {
                        description: 'The ID for this thread.',
                        type: 'string',
                      },
                      groupID: {
                        description: 'The group ID this thread is in.',
                        type: 'string',
                      },
                      total: {
                        description:
                          'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      userMessages: {
                        description:
                          'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      actionMessages: {
                        description:
                          'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      deletedMessages: {
                        description:
                          'The number of deleted messages in this thread.',
                        type: 'number',
                      },
                      resolved: {
                        description:
                          'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                        type: 'boolean',
                      },
                      resolvedTimestamp: {
                        description:
                          'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      participants: {
                        description:
                          'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                        type: 'ThreadParticipant[]',
                        items: {
                          type: 'ThreadParticipant',
                          properties: {
                            lastSeenTimestamp: {
                              description:
                                'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            userID: {
                              description:
                                "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                            displayName: {
                              description:
                                "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                          required: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                        },
                      },
                      subscribers: {
                        description:
                          'All of the users who are subscribed to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      repliers: {
                        description:
                          'All of the users who have replied to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      mentioned: {
                        description:
                          'All of the users who were mentioned in a message in this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      actionMessageRepliers: {
                        description:
                          "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      typing: {
                        description:
                          'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      name: {
                        description:
                          'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                        type: 'string',
                      },
                      location: {
                        description:
                          'The [location](/reference/location) of this thread.',
                        type: 'Location',
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'An optional space separated list of classnames to add to the thread.',
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'unread',
                      'viewerIsThreadParticipant',
                      'firstMessage',
                      'lastMessage',
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                    required: [
                      'unread',
                      'viewerIsThreadParticipant',
                      'firstMessage',
                      'lastMessage',
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                  },
                },
                counts: {
                  description:
                    'An object providing counts of threads. Refer to [observeThreadCount API](/js-apis-and-hooks/thread-api/observeThreadCounts#Available-Data) for more information about the properties returned.',
                  type: 'ThreadActivitySummary',
                  properties: {
                    total: {
                      description:
                        'The total number of threads, both resolved and unresolved. This does not include threads in which all messages have been deleted.',
                      type: 'number',
                    },
                    unread: {
                      description:
                        'The total number of threads that contain *at least one* unread message in the thread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                      type: 'number',
                    },
                    unreadSubscribed: {
                      description:
                        "The number of threads that have messages the current user hasn't seen yet and is subscribed to.  \n\nA user is automatically subscribed to threads relevant to them, for example because they have sent a message or have been @-mentioned in them. `unreadSubscribed` is always less than or equal to `unread`.",
                      type: 'number',
                    },
                    new: {
                      description:
                        'The total number of threads that the user has never seen before at all, i.e., *every* message in the thread is unread.  \n\nThis will count all threads with unread messages, whether the current user is subscribed to the thread or not.',
                      type: 'number',
                    },
                    resolved: {
                      description:
                        "The number of resolved threads. This refers to threads that users have manually marked as resolved within Cord's UI components.",
                      type: 'number',
                    },
                    empty: {
                      description:
                        'The number of thread with no visible messages. This refers to threads in which all the messages have been deleted.',
                      type: 'number',
                    },
                  },
                  propertyOrder: [
                    'total',
                    'unread',
                    'unreadSubscribed',
                    'new',
                    'resolved',
                    'empty',
                  ],
                  required: [
                    'total',
                    'unread',
                    'unreadSubscribed',
                    'new',
                    'resolved',
                    'empty',
                  ],
                },
              },
              propertyOrder: [
                'loading',
                'fetchMore',
                'hasMore',
                'threads',
                'counts',
              ],
              required: ['loading', 'fetchMore', 'hasMore', 'threads'],
            },
            showThreadsHeader: {
              type: 'boolean',
              description:
                'If set to `true`, the header for each inline thread will be displayed. This header contains a title and a button that both link to the thread url. The thread name is used as the title with the url as the fallback. The default is set to `false`.',
            },
            composerOptions: {
              type: 'object',
              properties: {
                position: {
                  description:
                    'The position of the Composer: top (YouTube style), or bottom (Slack style)',
                  type: 'string',
                  enum: ['top', 'bottom'],
                },
                groupID: {
                  description: 'The groupID the new thread will be added to.',
                  type: 'string',
                },
                name: {
                  description:
                    'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                  type: 'string',
                },
                id: { description: 'The ID for this thread.', type: 'string' },
                metadata: {
                  description:
                    'Arbitrary key-value pairs that can be used to store additional information.',
                  type: 'EntityMetadata',
                },
                url: {
                  description:
                    "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                  type: 'string',
                },
                extraClassnames: {
                  description:
                    'An optional space separated list of classnames to add to the thread.',
                  type: ['null', 'string'],
                },
                location: {
                  description:
                    'The [location](/reference/location) of this thread.',
                  type: 'Location',
                },
                addSubscribers: {
                  description: 'A list of subscribers to add to this thread.',
                  type: 'string[]',
                  items: { type: 'string' },
                },
              },
              propertyOrder: [
                'position',
                'groupID',
                'name',
                'id',
                'metadata',
                'url',
                'extraClassnames',
                'location',
                'addSubscribers',
              ],
              required: ['position', 'groupID'],
              description:
                'Adds a composer to allow users creating new threads.',
            },
            style: {
              type: 'CSSProperties',
              description:
                'Passes the style of the component. It will be applied to the root element.',
            },
            className: {
              type: 'string',
              description:
                'Any classes to be added to the component. It will be applied to the root element.',
            },
          },
          propertyOrder: [
            'threadsData',
            'showThreadsHeader',
            'composerOptions',
            'style',
            'className',
          ],
          required: ['threadsData'],
        },
      },
    },
    beta: {},
  },
  'chatbot-base': {
    eventIsFromBot: {
      name: 'eventIsFromBot',
      summary:
        'Determines if an event was generated by a bot sending a message (as opposed to a human doing so). This is particularly useful for `shouldRespondToEvent` to make sure that a bot does not respond to itself.  \n\nThis function works by checking for a special metadata field set on bots registered via this SDK. If you use the Cord APIs to change the metadata on your bot, then this function will no longer detect events coming from it as being from a bot.',
      examples: {},
      parameters: {
        propertyOrder: ['event'],
        required: ['event'],
        properties: {
          event: {
            description:
              'A [`thread-message-added` webhook event](/reference/events-webhook/events/thread-message-added).',
            type: 'MessageCreatedWebhookEvent',
            properties: {
              type: {
                description:
                  'The type of event.  The contents of the event property will vary depending on the event type.  See https://docs.cord.com/reference/events-webhook#Events-2 for more detail about the body of each event type.',
                type: '"thread-message-added"',
              },
              timestamp: {
                description: 'The time at which this event was sent.',
                type: 'string',
              },
              projectID: {
                description: 'The ID for the project this event belongs to.',
                type: 'string',
              },
              event: {
                description:
                  'The body of the event, which will vary depending on event type. See https://docs.cord.com/reference/events-webhook#Events-2 for more detail about the body of each event type.',
                type: 'ThreadMessageAddedWebhookPayload',
                properties: {
                  threadID: { type: 'string' },
                  messageID: { type: 'string' },
                  groupID: { type: 'string' },
                  projectID: { type: 'string' },
                  author: {
                    type: 'ClientUserData',
                    properties: {
                      id: {
                        description:
                          "The user's ID.  This is unique within a project.",
                        type: 'string',
                      },
                      name: {
                        description: "The user's name.",
                        type: ['null', 'string'],
                      },
                      shortName: {
                        description:
                          "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                        type: ['null', 'string'],
                      },
                      displayName: {
                        description:
                          'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                        type: 'string',
                      },
                      secondaryDisplayName: {
                        description:
                          'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                        type: 'string',
                      },
                      profilePictureURL: {
                        description: "A URL to the user's profile picture.",
                        type: ['null', 'string'],
                      },
                      metadata: {
                        description:
                          'Any metadata that has been set for the user.',
                        type: 'EntityMetadata',
                      },
                    },
                    propertyOrder: [
                      'id',
                      'name',
                      'shortName',
                      'displayName',
                      'secondaryDisplayName',
                      'profilePictureURL',
                      'metadata',
                    ],
                    required: [
                      'id',
                      'name',
                      'shortName',
                      'displayName',
                      'secondaryDisplayName',
                      'profilePictureURL',
                      'metadata',
                    ],
                  },
                  content: {
                    type: 'MessageContent',
                    items: {
                      anyOf: [
                        {
                          type: 'MessageAssigneeNode',
                          properties: {
                            type: { type: 'MessageNodeType.ASSIGNEE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'indent',
                          ],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageCodeNode',
                          properties: {
                            type: { type: 'MessageNodeType.CODE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageLinkNode',
                          properties: {
                            type: { type: 'MessageNodeType.LINK' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            url: { type: 'string' },
                          },
                          propertyOrder: ['type', 'class', 'children', 'url'],
                          required: ['type', 'children', 'url'],
                        },
                        {
                          type: 'MessageMentionNode',
                          properties: {
                            type: { type: 'MessageNodeType.MENTION' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            user: {
                              type: 'object',
                              properties: { id: { type: 'string' } },
                              propertyOrder: ['id'],
                              required: ['id'],
                            },
                          },
                          propertyOrder: ['type', 'class', 'children', 'user'],
                          required: ['type', 'children', 'user'],
                        },
                        {
                          type: 'MessageNumberBulletNode',
                          properties: {
                            type: { type: 'MessageNodeType.NUMBER_BULLET' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            bulletNumber: { type: 'number' },
                            indent: { type: 'number' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'bulletNumber',
                            'indent',
                          ],
                          required: ['type', 'children', 'bulletNumber'],
                        },
                        {
                          type: 'MessageParagraphNode',
                          properties: {
                            type: { type: 'MessageNodeType.PARAGRAPH' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageQuoteNode',
                          properties: {
                            type: { type: 'MessageNodeType.QUOTE' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                        {
                          type: 'MessageTextNode',
                          properties: {
                            type: { type: 'undefined' },
                            class: { type: 'string' },
                            text: { type: 'string' },
                            bold: { type: 'boolean' },
                            italic: { type: 'boolean' },
                            underline: { type: 'boolean' },
                            code: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'text',
                            'bold',
                            'italic',
                            'underline',
                            'code',
                          ],
                          required: ['text'],
                        },
                        {
                          type: 'MessageTodoNode',
                          properties: {
                            type: { type: 'MessageNodeType.TODO' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                            todoID: { type: 'string' },
                            done: { type: 'boolean' },
                          },
                          propertyOrder: [
                            'type',
                            'class',
                            'children',
                            'todoID',
                            'done',
                          ],
                          required: ['type', 'children', 'todoID', 'done'],
                        },
                        {
                          type: 'MessageMarkdownNode',
                          properties: {
                            type: { type: 'MessageNodeType.MARKDOWN' },
                            class: { type: 'string' },
                            children: { type: 'MessageContent' },
                          },
                          propertyOrder: ['type', 'class', 'children'],
                          required: ['type', 'children'],
                        },
                      ],
                    },
                  },
                  plaintext: { type: 'string' },
                  url: { type: 'string' },
                  messageType: {
                    type: 'string',
                    enum: ['action_message', 'user_message'],
                  },
                  metadata: { type: 'EntityMetadata' },
                  message: {
                    type: 'WebhookMessage',
                    properties: {
                      author: {
                        type: 'ClientUserData',
                        properties: {
                          id: {
                            description:
                              "The user's ID.  This is unique within a project.",
                            type: 'string',
                          },
                          name: {
                            description: "The user's name.",
                            type: ['null', 'string'],
                          },
                          shortName: {
                            description:
                              "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                            type: ['null', 'string'],
                          },
                          displayName: {
                            description:
                              'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                            type: 'string',
                          },
                          secondaryDisplayName: {
                            description:
                              'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                            type: 'string',
                          },
                          profilePictureURL: {
                            description: "A URL to the user's profile picture.",
                            type: ['null', 'string'],
                          },
                          metadata: {
                            description:
                              'Any metadata that has been set for the user.',
                            type: 'EntityMetadata',
                          },
                        },
                        propertyOrder: [
                          'id',
                          'name',
                          'shortName',
                          'displayName',
                          'secondaryDisplayName',
                          'profilePictureURL',
                          'metadata',
                        ],
                        required: [
                          'id',
                          'name',
                          'shortName',
                          'displayName',
                          'secondaryDisplayName',
                          'profilePictureURL',
                          'metadata',
                        ],
                      },
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'author',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'author',
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                  thread: {
                    type: 'CoreThreadData',
                    properties: {
                      id: {
                        description: 'The ID for this thread.',
                        type: 'string',
                      },
                      groupID: {
                        description: 'The group ID this thread is in.',
                        type: 'string',
                      },
                      total: {
                        description:
                          'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      userMessages: {
                        description:
                          'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      actionMessages: {
                        description:
                          'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                        type: 'number',
                      },
                      deletedMessages: {
                        description:
                          'The number of deleted messages in this thread.',
                        type: 'number',
                      },
                      resolved: {
                        description:
                          'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                        type: 'boolean',
                      },
                      resolvedTimestamp: {
                        description:
                          'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      participants: {
                        description:
                          'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                        type: 'ThreadParticipant[]',
                        items: {
                          type: 'ThreadParticipant',
                          properties: {
                            lastSeenTimestamp: {
                              description:
                                'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            userID: {
                              description:
                                "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                            displayName: {
                              description:
                                "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                          required: [
                            'lastSeenTimestamp',
                            'userID',
                            'displayName',
                          ],
                        },
                      },
                      subscribers: {
                        description:
                          'All of the users who are subscribed to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      repliers: {
                        description:
                          'All of the users who have replied to this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      mentioned: {
                        description:
                          'All of the users who were mentioned in a message in this thread.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      actionMessageRepliers: {
                        description:
                          "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      typing: {
                        description:
                          'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      name: {
                        description:
                          'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                        type: 'string',
                      },
                      location: {
                        description:
                          'The [location](/reference/location) of this thread.',
                        type: 'Location',
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'An optional space separated list of classnames to add to the thread.',
                        type: ['null', 'string'],
                      },
                    },
                    propertyOrder: [
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                    required: [
                      'id',
                      'groupID',
                      'total',
                      'userMessages',
                      'actionMessages',
                      'deletedMessages',
                      'resolved',
                      'resolvedTimestamp',
                      'participants',
                      'subscribers',
                      'repliers',
                      'mentioned',
                      'actionMessageRepliers',
                      'typing',
                      'name',
                      'url',
                      'location',
                      'metadata',
                      'extraClassnames',
                    ],
                  },
                  usersToNotify: {
                    type: 'UsersToNotify[]',
                    items: {
                      type: 'UsersToNotify',
                      properties: {
                        replyActions: {
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'NotificationReplyAction[]',
                              items: {
                                type: 'string',
                                enum: [
                                  'mention',
                                  'create-thread',
                                  'assign-task',
                                  'unassign-task',
                                  'attach-file',
                                ],
                              },
                            },
                          ],
                        },
                        id: {
                          description:
                            "The user's ID.  This is unique within a project.",
                          type: 'string',
                        },
                        name: {
                          description: "The user's name.",
                          type: ['null', 'string'],
                        },
                        shortName: {
                          description:
                            "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                          type: ['null', 'string'],
                        },
                        displayName: {
                          description:
                            'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                          type: 'string',
                        },
                        secondaryDisplayName: {
                          description:
                            'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                          type: 'string',
                        },
                        profilePictureURL: {
                          description: "A URL to the user's profile picture.",
                          type: ['null', 'string'],
                        },
                        metadata: {
                          description:
                            'Any metadata that has been set for the user.',
                          type: 'EntityMetadata',
                        },
                      },
                      propertyOrder: [
                        'replyActions',
                        'id',
                        'name',
                        'shortName',
                        'displayName',
                        'secondaryDisplayName',
                        'profilePictureURL',
                        'metadata',
                      ],
                      required: [
                        'replyActions',
                        'id',
                        'name',
                        'shortName',
                        'displayName',
                        'secondaryDisplayName',
                        'profilePictureURL',
                        'metadata',
                      ],
                    },
                  },
                },
                propertyOrder: [
                  'threadID',
                  'messageID',
                  'groupID',
                  'projectID',
                  'author',
                  'content',
                  'plaintext',
                  'url',
                  'messageType',
                  'metadata',
                  'message',
                  'thread',
                  'usersToNotify',
                ],
                required: [
                  'threadID',
                  'messageID',
                  'groupID',
                  'projectID',
                  'author',
                  'content',
                  'plaintext',
                  'url',
                  'messageType',
                  'metadata',
                  'message',
                  'thread',
                  'usersToNotify',
                ],
              },
            },
            propertyOrder: ['type', 'timestamp', 'projectID', 'event'],
            required: ['type', 'timestamp', 'projectID', 'event'],
          },
        },
      },
      returns: {
        description:
          '`true` if that event is about the creation of a message by a bot, `false` otherwise.',
        type: 'boolean',
      },
    },
    messageIsFromBot: {
      name: 'messageIsFromBot',
      summary:
        'Determines if a message was sent by a bot (as opposed to a human). This can be useful when sending Cord messages to an LLM completion API, which needs to know which messages came from the LLM and which came from a human.  \n\nThis function works by checking for a special metadata field set on messages sent via this SDK. If you directly use the Cord APIs to have your bot send a message, or use the Cord APIs to change the metadata of any messages sent via this SDK, then this function will not detect them as being from a bot.',
      examples: {},
      parameters: {
        propertyOrder: ['message'],
        required: ['message'],
        properties: {
          message: {
            description:
              'This message structure is the same as returned by the [message REST API](/rest-apis/messages).',
            type: 'CoreMessageData',
            properties: {
              id: {
                description:
                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                type: 'string',
              },
              authorID: {
                description: 'The ID for the user that sent the message.',
                type: 'string',
              },
              groupID: {
                description: 'The ID for the group this message belongs to.',
                type: 'string',
              },
              threadID: {
                description: 'The ID for the thread this message is part of.',
                type: 'string',
              },
              content: {
                description: 'The content of the message.',
                type: 'MessageContent',
                items: {
                  anyOf: [
                    {
                      type: 'MessageAssigneeNode',
                      properties: {
                        type: { type: 'MessageNodeType.ASSIGNEE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'indent'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageCodeNode',
                      properties: {
                        type: { type: 'MessageNodeType.CODE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageLinkNode',
                      properties: {
                        type: { type: 'MessageNodeType.LINK' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        url: { type: 'string' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'url'],
                      required: ['type', 'children', 'url'],
                    },
                    {
                      type: 'MessageMentionNode',
                      properties: {
                        type: { type: 'MessageNodeType.MENTION' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageNumberBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.NUMBER_BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        bulletNumber: { type: 'number' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'bulletNumber',
                        'indent',
                      ],
                      required: ['type', 'children', 'bulletNumber'],
                    },
                    {
                      type: 'MessageParagraphNode',
                      properties: {
                        type: { type: 'MessageNodeType.PARAGRAPH' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageQuoteNode',
                      properties: {
                        type: { type: 'MessageNodeType.QUOTE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageTextNode',
                      properties: {
                        type: { type: 'undefined' },
                        class: { type: 'string' },
                        text: { type: 'string' },
                        bold: { type: 'boolean' },
                        italic: { type: 'boolean' },
                        underline: { type: 'boolean' },
                        code: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'text',
                        'bold',
                        'italic',
                        'underline',
                        'code',
                      ],
                      required: ['text'],
                    },
                    {
                      type: 'MessageTodoNode',
                      properties: {
                        type: { type: 'MessageNodeType.TODO' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        todoID: { type: 'string' },
                        done: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'todoID',
                        'done',
                      ],
                      required: ['type', 'children', 'todoID', 'done'],
                    },
                    {
                      type: 'MessageMarkdownNode',
                      properties: {
                        type: { type: 'MessageNodeType.MARKDOWN' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                  ],
                },
              },
              plaintext: {
                description:
                  'A plaintext version of the structured message content.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                type: ['null', 'string'],
              },
              createdTimestamp: {
                description:
                  'The timestamp when this message was created.  The default value is the current time.',
                type: 'Date',
              },
              deletedTimestamp: {
                description:
                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              updatedTimestamp: {
                description:
                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              iconURL: {
                description:
                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                type: ['null', 'string'],
              },
              translationKey: {
                description:
                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                type: ['null', 'string'],
              },
              type: {
                description:
                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                type: 'string',
                enum: ['action_message', 'user_message'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'A optional space separated list of classnames to add to the message.',
                type: ['null', 'string'],
              },
              attachments: {
                description: 'The items attached to this message.',
                type: 'MessageAttachment[]',
                items: {
                  anyOf: [
                    {
                      type: 'MessageFileAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `file` for file attachments.',
                          type: '"file"',
                        },
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                    {
                      type: 'MessageAnnotationAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                          type: '"annotation"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the annotation, if any.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          ],
                        },
                        locationData: {
                          description:
                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                          type: ['null', 'string'],
                        },
                        customData: {
                          description:
                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'CustomAnnotationData',
                              properties: {
                                location: {
                                  description:
                                    'The custom location you produced for this annotation at annotation capture time.',
                                  type: 'Location',
                                },
                                coordsRelativeToTarget: {
                                  description:
                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                  type: 'object',
                                  properties: {
                                    x: { type: 'number' },
                                    y: { type: 'number' },
                                  },
                                  propertyOrder: ['x', 'y'],
                                  required: ['x', 'y'],
                                },
                                label: {
                                  description:
                                    'Your custom user-visible label for the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                              required: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                            },
                          ],
                        },
                        textContent: {
                          description:
                            'The text that was selected when creating the annotation, if any.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                      required: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                    },
                    {
                      type: 'MessageScreenshotAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                          type: '"screenshot"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'screenshot'],
                      required: ['type', 'screenshot'],
                    },
                    {
                      type: 'MessageLinkPreviewAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `link_preview` for file link previews.',
                          type: '"link_preview"',
                        },
                        id: {
                          description: 'The ID of the link preview attachment.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The url from which the preview was generated.',
                          type: 'string',
                        },
                        imageURL: {
                          description:
                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                          type: ['null', 'string'],
                        },
                        title: {
                          description:
                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                          type: ['null', 'string'],
                        },
                        description: {
                          description:
                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                      required: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                    },
                  ],
                },
              },
              reactions: {
                description: 'The reactions to this message.',
                type: 'Reaction[]',
                items: {
                  type: 'Reaction',
                  properties: {
                    reaction: {
                      description: 'The emoji reaction.',
                      type: 'string',
                    },
                    userID: {
                      description:
                        'The ID of the user who reacted to the message.',
                      type: 'string',
                    },
                    timestamp: {
                      description:
                        'The timestamp of when the reaction was created.',
                      type: 'Date',
                    },
                  },
                  propertyOrder: ['reaction', 'userID', 'timestamp'],
                  required: ['reaction', 'userID', 'timestamp'],
                },
              },
              seenBy: {
                description:
                  'A list of IDs of the users that have seen the message.',
                type: 'string[]',
                items: { type: 'string' },
              },
              skipLinkPreviews: {
                description:
                  "If set, Cord won't analyze links in the message to generate previews.",
                type: 'boolean',
              },
            },
            propertyOrder: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
            required: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
          },
        },
      },
      returns: {
        description:
          '`true` if that message was sent by a bot, `false` otherwise.',
        type: 'boolean',
      },
    },
    chatbots: {
      name: 'chatbots',
      summary:
        'Creates a new bot registry -- the main entrypoint into the Chatbot SDK. This function will typically be called exactly once, during server startup.',
      examples: {},
      parameters: {
        propertyOrder: ['project_id', 'project_secret'],
        required: ['project_id', 'project_secret'],
        properties: {
          project_id: {
            description:
              'Project ID, from the [Cord console](https://console.cord.com/)',
            type: 'string',
          },
          project_secret: {
            description:
              'Project secret, from the [Cord console](https://console.cord.com/)',
            type: 'string',
          },
        },
      },
      returns: {
        description: 'A new bot registry',
        type: 'ChatbotRegistry',
        properties: {
          register: {
            description:
              "Registers a new bot. You'll typically call this only once per bot, at server startup.",
            type: '(botID: string, bot: Chatbot) => Promise<void>',
          },
          webhookReceived: {
            description:
              'Function which you should call in the HTTP POST handler which receives [Cord webhooks](/reference/events-webhook). See the [getting started guide](/chatbot-ai-sdk/getting-started) for more information on how to set this up.',
            type: '(req: Request) => Promise<boolean>',
          },
          forceRespond: {
            description:
              'You can call this function to force the bot to respond on a thread, even if there is no incoming message on the thread. This will completely bypass `shouldRespondToEvent` and move directly to `getResponse`. This is useful if you want a bot to start a conversation unprompted, for example.',
            type: '(botID: string, threadID: string) => Promise<void>',
          },
        },
        propertyOrder: ['register', 'webhookReceived', 'forceRespond'],
        required: ['register', 'webhookReceived', 'forceRespond'],
      },
    },
    ChatbotRegistry: {
      name: 'ChatbotRegistry',
      methods: {
        methodOrder: ['register', 'webhookReceived', 'forceRespond'],
        required: ['register', 'webhookReceived', 'forceRespond'],
        methods: {
          register: {
            name: 'register',
            summary:
              "Registers a new bot. You'll typically call this only once per bot, at server startup.",
            examples: {},
            parameters: {
              propertyOrder: ['botID', 'bot'],
              required: ['botID', 'bot'],
              properties: {
                botID: {
                  description:
                    "A unique identifier for the bot. This uniquely identifies your bot, so you should use the same one at each server startup.  It will also be used as the [identifier](/reference/identifiers) for the bot's Cord user.",
                  type: 'string',
                },
                bot: {
                  description: 'The new `Chatbot` object to register.',
                  type: 'Chatbot',
                  properties: {
                    cordUser: {
                      description:
                        "A description of the representation of this bot in the Cord UI, i.e., the bot's name, profile picture, etc. The structure of this data is identical to that accepted by the [create/update user REST API](/rest-apis/users#Create-or-update-a-user).",
                      type: 'ServerUpdateUser',
                      properties: {
                        name: {
                          description: 'Full user name',
                          type: ['null', 'string'],
                        },
                        email: {
                          description: 'Email address',
                          type: ['null', 'string'],
                        },
                        shortName: {
                          description:
                            'Short user name. In most cases, this will be preferred over name when set.',
                          type: ['null', 'string'],
                        },
                        status: { type: 'string', enum: ['active', 'deleted'] },
                        profilePictureURL: {
                          description:
                            "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
                          type: ['null', 'string'],
                        },
                        metadata: {
                          description:
                            'Arbitrary key-value pairs that can be used to store additional information.',
                          type: 'EntityMetadata',
                        },
                        addGroups: {
                          description:
                            "A list of group IDs this user should be made a member of.  It is an error to specify a group that doesn't exist or one that is also being removed in the same call.  It is not an error to add a user to a group they're already a member of.",
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                        removeGroups: {
                          description:
                            "A list of group IDs this user should stop being a member of.  It is an error to specify a group that doesn't exist or one that is also being added in the same call.  It is not an error to remove a user from a group they are not a member of.",
                          type: 'string[]',
                          items: { type: 'string' },
                        },
                      },
                      propertyOrder: [
                        'name',
                        'email',
                        'shortName',
                        'status',
                        'profilePictureURL',
                        'metadata',
                        'addGroups',
                        'removeGroups',
                      ],
                      required: [],
                    },
                    shouldRespondToEvent: {
                      description:
                        "Called whenever any message is added to any thread anywhere in the Cord application (including messages from the bot itself). Determines whether or not this bot wants to respond to that message. This lets you filter down to only respond on certain threads, only respond to certain people, etc. You'll almost certainly want to start this function with `if (eventIsFromBot(event)) return false` so that the bot does not get stuck in a loop responding to itself.",
                      type: '(event: MessageCreatedWebhookEvent) => boolean | Promise<boolean>',
                    },
                    getResponse: {
                      description:
                        'Called in order to have the chatbot AI logic generate a new message to add to the end of a thread.',
                      type: '(messages: CoreMessageData[], thread: CoreThreadData) => string | Promise<string | null | undefined> | AsyncIterable<string | null | undefined> | null | undefined',
                    },
                    onResponseSent: {
                      description:
                        'Optional callback, called after `getResponse` has finished sending a new message to Cord, with the contents of that message. This can occasionally be useful when you need to do something with the completed Cord message, such as setting `metadata` on the message. You might also use this callback in a complex game in order to call `forceRespond` to cause a *different* AI to continue the conversation!',
                      type: '(response: CoreMessageData, messages: CoreMessageData[], thread: CoreThreadData) => void | Promise<void>',
                    },
                  },
                  propertyOrder: [
                    'cordUser',
                    'shouldRespondToEvent',
                    'getResponse',
                    'onResponseSent',
                  ],
                  required: ['cordUser', 'shouldRespondToEvent', 'getResponse'],
                },
              },
            },
            returns: {
              description:
                'A promise which you should await to ensure the bot has been set up correctly. Rejects if there is an issue talking to the Cord REST API when setting up the bot, resolves with no value otherwise.',
              type: 'Promise<void>',
            },
          },
          webhookReceived: {
            name: 'webhookReceived',
            summary:
              'Function which you should call in the HTTP POST handler which receives [Cord webhooks](/reference/events-webhook). See the [getting started guide](/chatbot-ai-sdk/getting-started) for more information on how to set this up.',
            examples: {},
            parameters: {
              propertyOrder: ['req'],
              required: ['req'],
              properties: {
                req: {
                  description:
                    'The original `Request` object received by the webhook HTTP POST handler.',
                  type: 'Request',
                },
              },
            },
            returns: {
              description:
                "A promise, which will resolve to a boolean. If that boolean is `true`, that means that this function has fully handled the webhook and you should respond to the HTTP request with success. If that boolean is `false`, then this function didn't handle the webhook; you can either handle the webhook yourself (e.g., if you have other uses for Cord webhooks beyond chatbots) or otherwise return an HTTP failure code.",
              type: 'Promise<boolean>',
            },
          },
          forceRespond: {
            name: 'forceRespond',
            summary:
              'You can call this function to force the bot to respond on a thread, even if there is no incoming message on the thread. This will completely bypass `shouldRespondToEvent` and move directly to `getResponse`. This is useful if you want a bot to start a conversation unprompted, for example.',
            examples: {},
            parameters: {
              propertyOrder: ['botID', 'threadID'],
              required: ['botID', 'threadID'],
              properties: {
                botID: {
                  description:
                    'ID of the bot (as passed to `register`) you want to respond.',
                  type: 'string',
                },
                threadID: {
                  description:
                    'ID of the thread you want the bot to respond on.',
                  type: 'string',
                },
              },
            },
            returns: { type: 'Promise<void>' },
          },
        },
      },
      properties: { properties: {}, propertyOrder: [], required: [] },
    },
    Chatbot: {
      name: 'Chatbot',
      methods: {
        methodOrder: ['shouldRespondToEvent', 'getResponse', 'onResponseSent'],
        required: ['shouldRespondToEvent', 'getResponse'],
        methods: {
          shouldRespondToEvent: {
            name: 'shouldRespondToEvent',
            summary:
              "Called whenever any message is added to any thread anywhere in the Cord application (including messages from the bot itself). Determines whether or not this bot wants to respond to that message. This lets you filter down to only respond on certain threads, only respond to certain people, etc. You'll almost certainly want to start this function with `if (eventIsFromBot(event)) return false` so that the bot does not get stuck in a loop responding to itself.",
            examples: {},
            parameters: {
              propertyOrder: ['event'],
              required: ['event'],
              properties: {
                event: {
                  description:
                    'A [`thread-message-added` webhook event](/reference/events-webhook/events/thread-message-added).',
                  type: 'MessageCreatedWebhookEvent',
                  properties: {
                    type: {
                      description:
                        'The type of event.  The contents of the event property will vary depending on the event type.  See https://docs.cord.com/reference/events-webhook#Events-2 for more detail about the body of each event type.',
                      type: '"thread-message-added"',
                    },
                    timestamp: {
                      description: 'The time at which this event was sent.',
                      type: 'string',
                    },
                    projectID: {
                      description:
                        'The ID for the project this event belongs to.',
                      type: 'string',
                    },
                    event: {
                      description:
                        'The body of the event, which will vary depending on event type. See https://docs.cord.com/reference/events-webhook#Events-2 for more detail about the body of each event type.',
                      type: 'ThreadMessageAddedWebhookPayload',
                      properties: {
                        threadID: { type: 'string' },
                        messageID: { type: 'string' },
                        groupID: { type: 'string' },
                        projectID: { type: 'string' },
                        author: {
                          type: 'ClientUserData',
                          properties: {
                            id: {
                              description:
                                "The user's ID.  This is unique within a project.",
                              type: 'string',
                            },
                            name: {
                              description: "The user's name.",
                              type: ['null', 'string'],
                            },
                            shortName: {
                              description:
                                "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                              type: ['null', 'string'],
                            },
                            displayName: {
                              description:
                                'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                              type: 'string',
                            },
                            secondaryDisplayName: {
                              description:
                                'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                              type: 'string',
                            },
                            profilePictureURL: {
                              description:
                                "A URL to the user's profile picture.",
                              type: ['null', 'string'],
                            },
                            metadata: {
                              description:
                                'Any metadata that has been set for the user.',
                              type: 'EntityMetadata',
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'shortName',
                            'displayName',
                            'secondaryDisplayName',
                            'profilePictureURL',
                            'metadata',
                          ],
                          required: [
                            'id',
                            'name',
                            'shortName',
                            'displayName',
                            'secondaryDisplayName',
                            'profilePictureURL',
                            'metadata',
                          ],
                        },
                        content: {
                          type: 'MessageContent',
                          items: {
                            anyOf: [
                              {
                                type: 'MessageAssigneeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.ASSIGNEE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageBulletNode',
                                properties: {
                                  type: { type: 'MessageNodeType.BULLET' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'indent',
                                ],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageCodeNode',
                                properties: {
                                  type: { type: 'MessageNodeType.CODE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageLinkNode',
                                properties: {
                                  type: { type: 'MessageNodeType.LINK' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  url: { type: 'string' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'url',
                                ],
                                required: ['type', 'children', 'url'],
                              },
                              {
                                type: 'MessageMentionNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MENTION' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  user: {
                                    type: 'object',
                                    properties: { id: { type: 'string' } },
                                    propertyOrder: ['id'],
                                    required: ['id'],
                                  },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'user',
                                ],
                                required: ['type', 'children', 'user'],
                              },
                              {
                                type: 'MessageNumberBulletNode',
                                properties: {
                                  type: {
                                    type: 'MessageNodeType.NUMBER_BULLET',
                                  },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  bulletNumber: { type: 'number' },
                                  indent: { type: 'number' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'bulletNumber',
                                  'indent',
                                ],
                                required: ['type', 'children', 'bulletNumber'],
                              },
                              {
                                type: 'MessageParagraphNode',
                                properties: {
                                  type: { type: 'MessageNodeType.PARAGRAPH' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageQuoteNode',
                                properties: {
                                  type: { type: 'MessageNodeType.QUOTE' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                              {
                                type: 'MessageTextNode',
                                properties: {
                                  type: { type: 'undefined' },
                                  class: { type: 'string' },
                                  text: { type: 'string' },
                                  bold: { type: 'boolean' },
                                  italic: { type: 'boolean' },
                                  underline: { type: 'boolean' },
                                  code: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'text',
                                  'bold',
                                  'italic',
                                  'underline',
                                  'code',
                                ],
                                required: ['text'],
                              },
                              {
                                type: 'MessageTodoNode',
                                properties: {
                                  type: { type: 'MessageNodeType.TODO' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                  todoID: { type: 'string' },
                                  done: { type: 'boolean' },
                                },
                                propertyOrder: [
                                  'type',
                                  'class',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                                required: [
                                  'type',
                                  'children',
                                  'todoID',
                                  'done',
                                ],
                              },
                              {
                                type: 'MessageMarkdownNode',
                                properties: {
                                  type: { type: 'MessageNodeType.MARKDOWN' },
                                  class: { type: 'string' },
                                  children: { type: 'MessageContent' },
                                },
                                propertyOrder: ['type', 'class', 'children'],
                                required: ['type', 'children'],
                              },
                            ],
                          },
                        },
                        plaintext: { type: 'string' },
                        url: { type: 'string' },
                        messageType: {
                          type: 'string',
                          enum: ['action_message', 'user_message'],
                        },
                        metadata: { type: 'EntityMetadata' },
                        message: {
                          type: 'WebhookMessage',
                          properties: {
                            author: {
                              type: 'ClientUserData',
                              properties: {
                                id: {
                                  description:
                                    "The user's ID.  This is unique within a project.",
                                  type: 'string',
                                },
                                name: {
                                  description: "The user's name.",
                                  type: ['null', 'string'],
                                },
                                shortName: {
                                  description:
                                    "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                                  type: ['null', 'string'],
                                },
                                displayName: {
                                  description:
                                    'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                                  type: 'string',
                                },
                                secondaryDisplayName: {
                                  description:
                                    'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                                  type: 'string',
                                },
                                profilePictureURL: {
                                  description:
                                    "A URL to the user's profile picture.",
                                  type: ['null', 'string'],
                                },
                                metadata: {
                                  description:
                                    'Any metadata that has been set for the user.',
                                  type: 'EntityMetadata',
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'shortName',
                                'displayName',
                                'secondaryDisplayName',
                                'profilePictureURL',
                                'metadata',
                              ],
                              required: [
                                'id',
                                'name',
                                'shortName',
                                'displayName',
                                'secondaryDisplayName',
                                'profilePictureURL',
                                'metadata',
                              ],
                            },
                            id: {
                              description:
                                'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                              type: 'string',
                            },
                            authorID: {
                              description:
                                'The ID for the user that sent the message.',
                              type: 'string',
                            },
                            groupID: {
                              description:
                                'The ID for the group this message belongs to.',
                              type: 'string',
                            },
                            threadID: {
                              description:
                                'The ID for the thread this message is part of.',
                              type: 'string',
                            },
                            content: {
                              description: 'The content of the message.',
                              type: 'MessageContent',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageAssigneeNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.ASSIGNEE',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageBulletNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.BULLET' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'indent',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageCodeNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.CODE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageLinkNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.LINK' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      url: { type: 'string' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'url',
                                    ],
                                    required: ['type', 'children', 'url'],
                                  },
                                  {
                                    type: 'MessageMentionNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.MENTION' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      user: {
                                        type: 'object',
                                        properties: { id: { type: 'string' } },
                                        propertyOrder: ['id'],
                                        required: ['id'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'user',
                                    ],
                                    required: ['type', 'children', 'user'],
                                  },
                                  {
                                    type: 'MessageNumberBulletNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.NUMBER_BULLET',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      bulletNumber: { type: 'number' },
                                      indent: { type: 'number' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'bulletNumber',
                                      'indent',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'bulletNumber',
                                    ],
                                  },
                                  {
                                    type: 'MessageParagraphNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.PARAGRAPH',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageQuoteNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.QUOTE' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                  {
                                    type: 'MessageTextNode',
                                    properties: {
                                      type: { type: 'undefined' },
                                      class: { type: 'string' },
                                      text: { type: 'string' },
                                      bold: { type: 'boolean' },
                                      italic: { type: 'boolean' },
                                      underline: { type: 'boolean' },
                                      code: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'text',
                                      'bold',
                                      'italic',
                                      'underline',
                                      'code',
                                    ],
                                    required: ['text'],
                                  },
                                  {
                                    type: 'MessageTodoNode',
                                    properties: {
                                      type: { type: 'MessageNodeType.TODO' },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                      todoID: { type: 'string' },
                                      done: { type: 'boolean' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                    required: [
                                      'type',
                                      'children',
                                      'todoID',
                                      'done',
                                    ],
                                  },
                                  {
                                    type: 'MessageMarkdownNode',
                                    properties: {
                                      type: {
                                        type: 'MessageNodeType.MARKDOWN',
                                      },
                                      class: { type: 'string' },
                                      children: { type: 'MessageContent' },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'class',
                                      'children',
                                    ],
                                    required: ['type', 'children'],
                                  },
                                ],
                              },
                            },
                            plaintext: {
                              description:
                                'A plaintext version of the structured message content.',
                              type: 'string',
                            },
                            url: {
                              description:
                                "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                              type: ['null', 'string'],
                            },
                            createdTimestamp: {
                              description:
                                'The timestamp when this message was created.  The default value is the current time.',
                              type: 'Date',
                            },
                            deletedTimestamp: {
                              description:
                                'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            updatedTimestamp: {
                              description:
                                'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            iconURL: {
                              description:
                                'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                              type: ['null', 'string'],
                            },
                            translationKey: {
                              description:
                                'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                              type: ['null', 'string'],
                            },
                            type: {
                              description:
                                'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                              type: 'string',
                              enum: ['action_message', 'user_message'],
                            },
                            metadata: {
                              description:
                                'Arbitrary key-value pairs that can be used to store additional information.',
                              type: 'EntityMetadata',
                            },
                            extraClassnames: {
                              description:
                                'A optional space separated list of classnames to add to the message.',
                              type: ['null', 'string'],
                            },
                            attachments: {
                              description:
                                'The items attached to this message.',
                              type: 'MessageAttachment[]',
                              items: {
                                anyOf: [
                                  {
                                    type: 'MessageFileAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `file` for file attachments.',
                                        type: '"file"',
                                      },
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                  {
                                    type: 'MessageAnnotationAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `annotation` for annotation attachments.',
                                        type: '"annotation"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the annotation, if any.',
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'UploadedFile',
                                            properties: {
                                              id: {
                                                description:
                                                  'The ID of the file.',
                                                type: 'string',
                                              },
                                              name: {
                                                description:
                                                  'The name of the file.',
                                                type: 'string',
                                              },
                                              url: {
                                                description:
                                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                                type: 'string',
                                              },
                                              mimeType: {
                                                description:
                                                  'The MIME type of the file.',
                                                type: 'string',
                                              },
                                              size: {
                                                description:
                                                  'The size of the file, in bytes.',
                                                type: 'number',
                                              },
                                              uploadStatus: {
                                                description:
                                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                                type: 'string',
                                                enum: [
                                                  'uploading',
                                                  'uploaded',
                                                  'failed',
                                                  'cancelled',
                                                ],
                                              },
                                            },
                                            propertyOrder: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                            required: [
                                              'id',
                                              'name',
                                              'url',
                                              'mimeType',
                                              'size',
                                              'uploadStatus',
                                            ],
                                          },
                                        ],
                                      },
                                      locationData: {
                                        description:
                                          'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                        type: ['null', 'string'],
                                      },
                                      customData: {
                                        description:
                                          "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                        anyOf: [
                                          { type: 'null' },
                                          {
                                            type: 'CustomAnnotationData',
                                            properties: {
                                              location: {
                                                description:
                                                  'The custom location you produced for this annotation at annotation capture time.',
                                                type: 'Location',
                                              },
                                              coordsRelativeToTarget: {
                                                description:
                                                  'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                                type: 'object',
                                                properties: {
                                                  x: { type: 'number' },
                                                  y: { type: 'number' },
                                                },
                                                propertyOrder: ['x', 'y'],
                                                required: ['x', 'y'],
                                              },
                                              label: {
                                                description:
                                                  'Your custom user-visible label for the annotation, if any.',
                                                type: ['null', 'string'],
                                              },
                                            },
                                            propertyOrder: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                            required: [
                                              'location',
                                              'coordsRelativeToTarget',
                                              'label',
                                            ],
                                          },
                                        ],
                                      },
                                      textContent: {
                                        description:
                                          'The text that was selected when creating the annotation, if any.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                    required: [
                                      'type',
                                      'screenshot',
                                      'locationData',
                                      'customData',
                                      'textContent',
                                    ],
                                  },
                                  {
                                    type: 'MessageScreenshotAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                        type: '"screenshot"',
                                      },
                                      screenshot: {
                                        description:
                                          'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                        type: 'UploadedFile',
                                        properties: {
                                          id: {
                                            description: 'The ID of the file.',
                                            type: 'string',
                                          },
                                          name: {
                                            description:
                                              'The name of the file.',
                                            type: 'string',
                                          },
                                          url: {
                                            description:
                                              'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                            type: 'string',
                                          },
                                          mimeType: {
                                            description:
                                              'The MIME type of the file.',
                                            type: 'string',
                                          },
                                          size: {
                                            description:
                                              'The size of the file, in bytes.',
                                            type: 'number',
                                          },
                                          uploadStatus: {
                                            description:
                                              'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                            type: 'string',
                                            enum: [
                                              'uploading',
                                              'uploaded',
                                              'failed',
                                              'cancelled',
                                            ],
                                          },
                                        },
                                        propertyOrder: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                        required: [
                                          'id',
                                          'name',
                                          'url',
                                          'mimeType',
                                          'size',
                                          'uploadStatus',
                                        ],
                                      },
                                    },
                                    propertyOrder: ['type', 'screenshot'],
                                    required: ['type', 'screenshot'],
                                  },
                                  {
                                    type: 'MessageLinkPreviewAttachment',
                                    properties: {
                                      type: {
                                        description:
                                          'The type of this attachment, which is always `link_preview` for file link previews.',
                                        type: '"link_preview"',
                                      },
                                      id: {
                                        description:
                                          'The ID of the link preview attachment.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The url from which the preview was generated.',
                                        type: 'string',
                                      },
                                      imageURL: {
                                        description:
                                          'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                        type: ['null', 'string'],
                                      },
                                      title: {
                                        description:
                                          "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                        type: ['null', 'string'],
                                      },
                                      description: {
                                        description:
                                          'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                    required: [
                                      'type',
                                      'id',
                                      'url',
                                      'imageURL',
                                      'title',
                                      'description',
                                    ],
                                  },
                                ],
                              },
                            },
                            reactions: {
                              description: 'The reactions to this message.',
                              type: 'Reaction[]',
                              items: {
                                type: 'Reaction',
                                properties: {
                                  reaction: {
                                    description: 'The emoji reaction.',
                                    type: 'string',
                                  },
                                  userID: {
                                    description:
                                      'The ID of the user who reacted to the message.',
                                    type: 'string',
                                  },
                                  timestamp: {
                                    description:
                                      'The timestamp of when the reaction was created.',
                                    type: 'Date',
                                  },
                                },
                                propertyOrder: [
                                  'reaction',
                                  'userID',
                                  'timestamp',
                                ],
                                required: ['reaction', 'userID', 'timestamp'],
                              },
                            },
                            seenBy: {
                              description:
                                'A list of IDs of the users that have seen the message.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            skipLinkPreviews: {
                              description:
                                "If set, Cord won't analyze links in the message to generate previews.",
                              type: 'boolean',
                            },
                          },
                          propertyOrder: [
                            'author',
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                          required: [
                            'author',
                            'id',
                            'authorID',
                            'groupID',
                            'threadID',
                            'content',
                            'plaintext',
                            'url',
                            'createdTimestamp',
                            'deletedTimestamp',
                            'updatedTimestamp',
                            'iconURL',
                            'translationKey',
                            'type',
                            'metadata',
                            'extraClassnames',
                            'attachments',
                            'reactions',
                            'seenBy',
                            'skipLinkPreviews',
                          ],
                        },
                        thread: {
                          type: 'CoreThreadData',
                          properties: {
                            id: {
                              description: 'The ID for this thread.',
                              type: 'string',
                            },
                            groupID: {
                              description: 'The group ID this thread is in.',
                              type: 'string',
                            },
                            total: {
                              description:
                                'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                              type: 'number',
                            },
                            userMessages: {
                              description:
                                'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                              type: 'number',
                            },
                            actionMessages: {
                              description:
                                'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                              type: 'number',
                            },
                            deletedMessages: {
                              description:
                                'The number of deleted messages in this thread.',
                              type: 'number',
                            },
                            resolved: {
                              description:
                                'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                              type: 'boolean',
                            },
                            resolvedTimestamp: {
                              description:
                                'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                              anyOf: [{ type: 'null' }, { type: 'Date' }],
                            },
                            participants: {
                              description:
                                'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                              type: 'ThreadParticipant[]',
                              items: {
                                type: 'ThreadParticipant',
                                properties: {
                                  lastSeenTimestamp: {
                                    description:
                                      'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                                    anyOf: [{ type: 'null' }, { type: 'Date' }],
                                  },
                                  userID: {
                                    description:
                                      "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                    type: ['null', 'string'],
                                  },
                                  displayName: {
                                    description:
                                      "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                                    type: ['null', 'string'],
                                  },
                                },
                                propertyOrder: [
                                  'lastSeenTimestamp',
                                  'userID',
                                  'displayName',
                                ],
                                required: [
                                  'lastSeenTimestamp',
                                  'userID',
                                  'displayName',
                                ],
                              },
                            },
                            subscribers: {
                              description:
                                'All of the users who are subscribed to this thread.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            repliers: {
                              description:
                                'All of the users who have replied to this thread.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            mentioned: {
                              description:
                                'All of the users who were mentioned in a message in this thread.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            actionMessageRepliers: {
                              description:
                                "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            typing: {
                              description:
                                'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                              type: 'string[]',
                              items: { type: 'string' },
                            },
                            name: {
                              description:
                                'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                              type: 'string',
                            },
                            url: {
                              description:
                                "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                              type: 'string',
                            },
                            location: {
                              description:
                                'The [location](/reference/location) of this thread.',
                              type: 'Location',
                            },
                            metadata: {
                              description:
                                'Arbitrary key-value pairs that can be used to store additional information.',
                              type: 'EntityMetadata',
                            },
                            extraClassnames: {
                              description:
                                'An optional space separated list of classnames to add to the thread.',
                              type: ['null', 'string'],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'groupID',
                            'total',
                            'userMessages',
                            'actionMessages',
                            'deletedMessages',
                            'resolved',
                            'resolvedTimestamp',
                            'participants',
                            'subscribers',
                            'repliers',
                            'mentioned',
                            'actionMessageRepliers',
                            'typing',
                            'name',
                            'url',
                            'location',
                            'metadata',
                            'extraClassnames',
                          ],
                          required: [
                            'id',
                            'groupID',
                            'total',
                            'userMessages',
                            'actionMessages',
                            'deletedMessages',
                            'resolved',
                            'resolvedTimestamp',
                            'participants',
                            'subscribers',
                            'repliers',
                            'mentioned',
                            'actionMessageRepliers',
                            'typing',
                            'name',
                            'url',
                            'location',
                            'metadata',
                            'extraClassnames',
                          ],
                        },
                        usersToNotify: {
                          type: 'UsersToNotify[]',
                          items: {
                            type: 'UsersToNotify',
                            properties: {
                              replyActions: {
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'NotificationReplyAction[]',
                                    items: {
                                      type: 'string',
                                      enum: [
                                        'mention',
                                        'create-thread',
                                        'assign-task',
                                        'unassign-task',
                                        'attach-file',
                                      ],
                                    },
                                  },
                                ],
                              },
                              id: {
                                description:
                                  "The user's ID.  This is unique within a project.",
                                type: 'string',
                              },
                              name: {
                                description: "The user's name.",
                                type: ['null', 'string'],
                              },
                              shortName: {
                                description:
                                  "The user's short name.  In most cases, Cord components will prefer using this name over `name` when set.",
                                type: ['null', 'string'],
                              },
                              displayName: {
                                description:
                                  'The primary display name of the user.  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s shortName or name, preferring shortName if both are set, or the string "unknown" if neither is set.',
                                type: 'string',
                              },
                              secondaryDisplayName: {
                                description:
                                  'The secondary display name of the user, in cases where you might want to display a secondary name (such as in a subtitle).  This is a readonly field that\'s provided as a convenience.  Its value is the user\'s name or shortName, preferring name if both are set, or the string "Unknown" if neither is set.',
                                type: 'string',
                              },
                              profilePictureURL: {
                                description:
                                  "A URL to the user's profile picture.",
                                type: ['null', 'string'],
                              },
                              metadata: {
                                description:
                                  'Any metadata that has been set for the user.',
                                type: 'EntityMetadata',
                              },
                            },
                            propertyOrder: [
                              'replyActions',
                              'id',
                              'name',
                              'shortName',
                              'displayName',
                              'secondaryDisplayName',
                              'profilePictureURL',
                              'metadata',
                            ],
                            required: [
                              'replyActions',
                              'id',
                              'name',
                              'shortName',
                              'displayName',
                              'secondaryDisplayName',
                              'profilePictureURL',
                              'metadata',
                            ],
                          },
                        },
                      },
                      propertyOrder: [
                        'threadID',
                        'messageID',
                        'groupID',
                        'projectID',
                        'author',
                        'content',
                        'plaintext',
                        'url',
                        'messageType',
                        'metadata',
                        'message',
                        'thread',
                        'usersToNotify',
                      ],
                      required: [
                        'threadID',
                        'messageID',
                        'groupID',
                        'projectID',
                        'author',
                        'content',
                        'plaintext',
                        'url',
                        'messageType',
                        'metadata',
                        'message',
                        'thread',
                        'usersToNotify',
                      ],
                    },
                  },
                  propertyOrder: ['type', 'timestamp', 'projectID', 'event'],
                  required: ['type', 'timestamp', 'projectID', 'event'],
                },
              },
            },
            returns: {
              description:
                'Whether or not this bot wants to respond to this event. If `true`, `getResponse` will later be called to actually compute the response. If `false`, then `getResponse` will be entirely skipped.',
              anyOf: [{ type: 'boolean' }, { type: 'Promise<boolean>' }],
            },
          },
          getResponse: {
            name: 'getResponse',
            summary:
              'Called in order to have the chatbot AI logic generate a new message to add to the end of a thread.',
            examples: {},
            parameters: {
              propertyOrder: ['messages', 'thread'],
              required: ['messages', 'thread'],
              properties: {
                messages: {
                  description:
                    'List of messages in the thread, sorted oldest message first. The message structure is the same as returned by the [message REST API](/rest-apis/messages).',
                  type: 'CoreMessageData[]',
                  items: {
                    type: 'CoreMessageData',
                    properties: {
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                },
                thread: {
                  description:
                    'Data about the thread. The thread structure is the same as returned by the [thread REST API](/rest-apis/threads).',
                  type: 'CoreThreadData',
                  properties: {
                    id: {
                      description: 'The ID for this thread.',
                      type: 'string',
                    },
                    groupID: {
                      description: 'The group ID this thread is in.',
                      type: 'string',
                    },
                    total: {
                      description:
                        'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    userMessages: {
                      description:
                        'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    actionMessages: {
                      description:
                        'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    deletedMessages: {
                      description:
                        'The number of deleted messages in this thread.',
                      type: 'number',
                    },
                    resolved: {
                      description:
                        'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                      type: 'boolean',
                    },
                    resolvedTimestamp: {
                      description:
                        'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    participants: {
                      description:
                        'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                      type: 'ThreadParticipant[]',
                      items: {
                        type: 'ThreadParticipant',
                        properties: {
                          lastSeenTimestamp: {
                            description:
                              'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          userID: {
                            description:
                              "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                            type: ['null', 'string'],
                          },
                          displayName: {
                            description:
                              "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'lastSeenTimestamp',
                          'userID',
                          'displayName',
                        ],
                        required: [
                          'lastSeenTimestamp',
                          'userID',
                          'displayName',
                        ],
                      },
                    },
                    subscribers: {
                      description:
                        'All of the users who are subscribed to this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    repliers: {
                      description:
                        'All of the users who have replied to this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    mentioned: {
                      description:
                        'All of the users who were mentioned in a message in this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    actionMessageRepliers: {
                      description:
                        "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    typing: {
                      description:
                        'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    name: {
                      description:
                        'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                      type: 'string',
                    },
                    url: {
                      description:
                        "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                      type: 'string',
                    },
                    location: {
                      description:
                        'The [location](/reference/location) of this thread.',
                      type: 'Location',
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    extraClassnames: {
                      description:
                        'An optional space separated list of classnames to add to the thread.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'id',
                    'groupID',
                    'total',
                    'userMessages',
                    'actionMessages',
                    'deletedMessages',
                    'resolved',
                    'resolvedTimestamp',
                    'participants',
                    'subscribers',
                    'repliers',
                    'mentioned',
                    'actionMessageRepliers',
                    'typing',
                    'name',
                    'url',
                    'location',
                    'metadata',
                    'extraClassnames',
                  ],
                  required: [
                    'id',
                    'groupID',
                    'total',
                    'userMessages',
                    'actionMessages',
                    'deletedMessages',
                    'resolved',
                    'resolvedTimestamp',
                    'participants',
                    'subscribers',
                    'repliers',
                    'mentioned',
                    'actionMessageRepliers',
                    'typing',
                    'name',
                    'url',
                    'location',
                    'metadata',
                    'extraClassnames',
                  ],
                },
              },
            },
            returns: {
              description:
                "Contents of a new message to add to the end of the thread. This can be returned directly as a `string`, or as a `Promise` which resolves to a string. You can also return an `AsyncIterator` which yields the message incrementally; the message will be streamed to Cord and appear on users' screens bit-by-bit as the iterator yields it (with the final message being the concatenation of all of the strings yielded). Can also return `null` or `undefined` to signal that no new message should be added (but it is better for performance to return `false` from `shouldRespondToEvent` instead).",
              anyOf: [
                { type: 'undefined' },
                { type: 'null' },
                { type: 'string' },
                { type: 'Promise<string | null | undefined>' },
                { type: 'AsyncIterable<string | null | undefined>' },
              ],
            },
          },
          onResponseSent: {
            name: 'onResponseSent',
            summary:
              'Optional callback, called after `getResponse` has finished sending a new message to Cord, with the contents of that message. This can occasionally be useful when you need to do something with the completed Cord message, such as setting `metadata` on the message. You might also use this callback in a complex game in order to call `forceRespond` to cause a *different* AI to continue the conversation!',
            examples: {},
            parameters: {
              propertyOrder: ['response', 'messages', 'thread'],
              required: ['response', 'messages', 'thread'],
              properties: {
                response: {
                  description:
                    'The new message added by `getResponse`. The message structure is the same as returned by the [message REST API](/rest-apis/messages).',
                  type: 'CoreMessageData',
                  properties: {
                    id: {
                      description:
                        'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                      type: 'string',
                    },
                    authorID: {
                      description: 'The ID for the user that sent the message.',
                      type: 'string',
                    },
                    groupID: {
                      description:
                        'The ID for the group this message belongs to.',
                      type: 'string',
                    },
                    threadID: {
                      description:
                        'The ID for the thread this message is part of.',
                      type: 'string',
                    },
                    content: {
                      description: 'The content of the message.',
                      type: 'MessageContent',
                      items: {
                        anyOf: [
                          {
                            type: 'MessageAssigneeNode',
                            properties: {
                              type: { type: 'MessageNodeType.ASSIGNEE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              user: {
                                type: 'object',
                                properties: { id: { type: 'string' } },
                                propertyOrder: ['id'],
                                required: ['id'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'user',
                            ],
                            required: ['type', 'children', 'user'],
                          },
                          {
                            type: 'MessageBulletNode',
                            properties: {
                              type: { type: 'MessageNodeType.BULLET' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              indent: { type: 'number' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'indent',
                            ],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageCodeNode',
                            properties: {
                              type: { type: 'MessageNodeType.CODE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageLinkNode',
                            properties: {
                              type: { type: 'MessageNodeType.LINK' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              url: { type: 'string' },
                            },
                            propertyOrder: ['type', 'class', 'children', 'url'],
                            required: ['type', 'children', 'url'],
                          },
                          {
                            type: 'MessageMentionNode',
                            properties: {
                              type: { type: 'MessageNodeType.MENTION' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              user: {
                                type: 'object',
                                properties: { id: { type: 'string' } },
                                propertyOrder: ['id'],
                                required: ['id'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'user',
                            ],
                            required: ['type', 'children', 'user'],
                          },
                          {
                            type: 'MessageNumberBulletNode',
                            properties: {
                              type: { type: 'MessageNodeType.NUMBER_BULLET' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              bulletNumber: { type: 'number' },
                              indent: { type: 'number' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'bulletNumber',
                              'indent',
                            ],
                            required: ['type', 'children', 'bulletNumber'],
                          },
                          {
                            type: 'MessageParagraphNode',
                            properties: {
                              type: { type: 'MessageNodeType.PARAGRAPH' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageQuoteNode',
                            properties: {
                              type: { type: 'MessageNodeType.QUOTE' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                          {
                            type: 'MessageTextNode',
                            properties: {
                              type: { type: 'undefined' },
                              class: { type: 'string' },
                              text: { type: 'string' },
                              bold: { type: 'boolean' },
                              italic: { type: 'boolean' },
                              underline: { type: 'boolean' },
                              code: { type: 'boolean' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'text',
                              'bold',
                              'italic',
                              'underline',
                              'code',
                            ],
                            required: ['text'],
                          },
                          {
                            type: 'MessageTodoNode',
                            properties: {
                              type: { type: 'MessageNodeType.TODO' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                              todoID: { type: 'string' },
                              done: { type: 'boolean' },
                            },
                            propertyOrder: [
                              'type',
                              'class',
                              'children',
                              'todoID',
                              'done',
                            ],
                            required: ['type', 'children', 'todoID', 'done'],
                          },
                          {
                            type: 'MessageMarkdownNode',
                            properties: {
                              type: { type: 'MessageNodeType.MARKDOWN' },
                              class: { type: 'string' },
                              children: { type: 'MessageContent' },
                            },
                            propertyOrder: ['type', 'class', 'children'],
                            required: ['type', 'children'],
                          },
                        ],
                      },
                    },
                    plaintext: {
                      description:
                        'A plaintext version of the structured message content.',
                      type: 'string',
                    },
                    url: {
                      description:
                        "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                      type: ['null', 'string'],
                    },
                    createdTimestamp: {
                      description:
                        'The timestamp when this message was created.  The default value is the current time.',
                      type: 'Date',
                    },
                    deletedTimestamp: {
                      description:
                        'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    updatedTimestamp: {
                      description:
                        'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    iconURL: {
                      description:
                        'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                      type: ['null', 'string'],
                    },
                    translationKey: {
                      description:
                        'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                      type: ['null', 'string'],
                    },
                    type: {
                      description:
                        'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                      type: 'string',
                      enum: ['action_message', 'user_message'],
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    extraClassnames: {
                      description:
                        'A optional space separated list of classnames to add to the message.',
                      type: ['null', 'string'],
                    },
                    attachments: {
                      description: 'The items attached to this message.',
                      type: 'MessageAttachment[]',
                      items: {
                        anyOf: [
                          {
                            type: 'MessageFileAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `file` for file attachments.',
                                type: '"file"',
                              },
                              id: {
                                description: 'The ID of the file.',
                                type: 'string',
                              },
                              name: {
                                description: 'The name of the file.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                type: 'string',
                              },
                              mimeType: {
                                description: 'The MIME type of the file.',
                                type: 'string',
                              },
                              size: {
                                description: 'The size of the file, in bytes.',
                                type: 'number',
                              },
                              uploadStatus: {
                                description:
                                  'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                type: 'string',
                                enum: [
                                  'uploading',
                                  'uploaded',
                                  'failed',
                                  'cancelled',
                                ],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                            required: [
                              'type',
                              'id',
                              'name',
                              'url',
                              'mimeType',
                              'size',
                              'uploadStatus',
                            ],
                          },
                          {
                            type: 'MessageAnnotationAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `annotation` for annotation attachments.',
                                type: '"annotation"',
                              },
                              screenshot: {
                                description:
                                  'The screenshot attached to the annotation, if any.',
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'UploadedFile',
                                    properties: {
                                      id: {
                                        description: 'The ID of the file.',
                                        type: 'string',
                                      },
                                      name: {
                                        description: 'The name of the file.',
                                        type: 'string',
                                      },
                                      url: {
                                        description:
                                          'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                        type: 'string',
                                      },
                                      mimeType: {
                                        description:
                                          'The MIME type of the file.',
                                        type: 'string',
                                      },
                                      size: {
                                        description:
                                          'The size of the file, in bytes.',
                                        type: 'number',
                                      },
                                      uploadStatus: {
                                        description:
                                          'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                        type: 'string',
                                        enum: [
                                          'uploading',
                                          'uploaded',
                                          'failed',
                                          'cancelled',
                                        ],
                                      },
                                    },
                                    propertyOrder: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                    required: [
                                      'id',
                                      'name',
                                      'url',
                                      'mimeType',
                                      'size',
                                      'uploadStatus',
                                    ],
                                  },
                                ],
                              },
                              locationData: {
                                description:
                                  'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                type: ['null', 'string'],
                              },
                              customData: {
                                description:
                                  "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                anyOf: [
                                  { type: 'null' },
                                  {
                                    type: 'CustomAnnotationData',
                                    properties: {
                                      location: {
                                        description:
                                          'The custom location you produced for this annotation at annotation capture time.',
                                        type: 'Location',
                                      },
                                      coordsRelativeToTarget: {
                                        description:
                                          'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                        type: 'object',
                                        properties: {
                                          x: { type: 'number' },
                                          y: { type: 'number' },
                                        },
                                        propertyOrder: ['x', 'y'],
                                        required: ['x', 'y'],
                                      },
                                      label: {
                                        description:
                                          'Your custom user-visible label for the annotation, if any.',
                                        type: ['null', 'string'],
                                      },
                                    },
                                    propertyOrder: [
                                      'location',
                                      'coordsRelativeToTarget',
                                      'label',
                                    ],
                                    required: [
                                      'location',
                                      'coordsRelativeToTarget',
                                      'label',
                                    ],
                                  },
                                ],
                              },
                              textContent: {
                                description:
                                  'The text that was selected when creating the annotation, if any.',
                                type: ['null', 'string'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'screenshot',
                              'locationData',
                              'customData',
                              'textContent',
                            ],
                            required: [
                              'type',
                              'screenshot',
                              'locationData',
                              'customData',
                              'textContent',
                            ],
                          },
                          {
                            type: 'MessageScreenshotAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                type: '"screenshot"',
                              },
                              screenshot: {
                                description:
                                  'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                type: 'UploadedFile',
                                properties: {
                                  id: {
                                    description: 'The ID of the file.',
                                    type: 'string',
                                  },
                                  name: {
                                    description: 'The name of the file.',
                                    type: 'string',
                                  },
                                  url: {
                                    description:
                                      'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                    type: 'string',
                                  },
                                  mimeType: {
                                    description: 'The MIME type of the file.',
                                    type: 'string',
                                  },
                                  size: {
                                    description:
                                      'The size of the file, in bytes.',
                                    type: 'number',
                                  },
                                  uploadStatus: {
                                    description:
                                      'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                    type: 'string',
                                    enum: [
                                      'uploading',
                                      'uploaded',
                                      'failed',
                                      'cancelled',
                                    ],
                                  },
                                },
                                propertyOrder: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                                required: [
                                  'id',
                                  'name',
                                  'url',
                                  'mimeType',
                                  'size',
                                  'uploadStatus',
                                ],
                              },
                            },
                            propertyOrder: ['type', 'screenshot'],
                            required: ['type', 'screenshot'],
                          },
                          {
                            type: 'MessageLinkPreviewAttachment',
                            properties: {
                              type: {
                                description:
                                  'The type of this attachment, which is always `link_preview` for file link previews.',
                                type: '"link_preview"',
                              },
                              id: {
                                description:
                                  'The ID of the link preview attachment.',
                                type: 'string',
                              },
                              url: {
                                description:
                                  'The url from which the preview was generated.',
                                type: 'string',
                              },
                              imageURL: {
                                description:
                                  'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                type: ['null', 'string'],
                              },
                              title: {
                                description:
                                  "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                type: ['null', 'string'],
                              },
                              description: {
                                description:
                                  'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                type: ['null', 'string'],
                              },
                            },
                            propertyOrder: [
                              'type',
                              'id',
                              'url',
                              'imageURL',
                              'title',
                              'description',
                            ],
                            required: [
                              'type',
                              'id',
                              'url',
                              'imageURL',
                              'title',
                              'description',
                            ],
                          },
                        ],
                      },
                    },
                    reactions: {
                      description: 'The reactions to this message.',
                      type: 'Reaction[]',
                      items: {
                        type: 'Reaction',
                        properties: {
                          reaction: {
                            description: 'The emoji reaction.',
                            type: 'string',
                          },
                          userID: {
                            description:
                              'The ID of the user who reacted to the message.',
                            type: 'string',
                          },
                          timestamp: {
                            description:
                              'The timestamp of when the reaction was created.',
                            type: 'Date',
                          },
                        },
                        propertyOrder: ['reaction', 'userID', 'timestamp'],
                        required: ['reaction', 'userID', 'timestamp'],
                      },
                    },
                    seenBy: {
                      description:
                        'A list of IDs of the users that have seen the message.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    skipLinkPreviews: {
                      description:
                        "If set, Cord won't analyze links in the message to generate previews.",
                      type: 'boolean',
                    },
                  },
                  propertyOrder: [
                    'id',
                    'authorID',
                    'groupID',
                    'threadID',
                    'content',
                    'plaintext',
                    'url',
                    'createdTimestamp',
                    'deletedTimestamp',
                    'updatedTimestamp',
                    'iconURL',
                    'translationKey',
                    'type',
                    'metadata',
                    'extraClassnames',
                    'attachments',
                    'reactions',
                    'seenBy',
                    'skipLinkPreviews',
                  ],
                  required: [
                    'id',
                    'authorID',
                    'groupID',
                    'threadID',
                    'content',
                    'plaintext',
                    'url',
                    'createdTimestamp',
                    'deletedTimestamp',
                    'updatedTimestamp',
                    'iconURL',
                    'translationKey',
                    'type',
                    'metadata',
                    'extraClassnames',
                    'attachments',
                    'reactions',
                    'seenBy',
                    'skipLinkPreviews',
                  ],
                },
                messages: {
                  description:
                    'List of messages in the thread, sorted oldest message first. This is *exactly* the same list of messages which was sent to `getResponse`, so it will *not* include the `response` message. The message structure is the same as returned by the [message REST API](/rest-apis/messages).',
                  type: 'CoreMessageData[]',
                  items: {
                    type: 'CoreMessageData',
                    properties: {
                      id: {
                        description:
                          'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                        type: 'string',
                      },
                      authorID: {
                        description:
                          'The ID for the user that sent the message.',
                        type: 'string',
                      },
                      groupID: {
                        description:
                          'The ID for the group this message belongs to.',
                        type: 'string',
                      },
                      threadID: {
                        description:
                          'The ID for the thread this message is part of.',
                        type: 'string',
                      },
                      content: {
                        description: 'The content of the message.',
                        type: 'MessageContent',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageAssigneeNode',
                              properties: {
                                type: { type: 'MessageNodeType.ASSIGNEE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'indent',
                              ],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageCodeNode',
                              properties: {
                                type: { type: 'MessageNodeType.CODE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageLinkNode',
                              properties: {
                                type: { type: 'MessageNodeType.LINK' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                url: { type: 'string' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'url',
                              ],
                              required: ['type', 'children', 'url'],
                            },
                            {
                              type: 'MessageMentionNode',
                              properties: {
                                type: { type: 'MessageNodeType.MENTION' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                user: {
                                  type: 'object',
                                  properties: { id: { type: 'string' } },
                                  propertyOrder: ['id'],
                                  required: ['id'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'user',
                              ],
                              required: ['type', 'children', 'user'],
                            },
                            {
                              type: 'MessageNumberBulletNode',
                              properties: {
                                type: { type: 'MessageNodeType.NUMBER_BULLET' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                bulletNumber: { type: 'number' },
                                indent: { type: 'number' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'bulletNumber',
                                'indent',
                              ],
                              required: ['type', 'children', 'bulletNumber'],
                            },
                            {
                              type: 'MessageParagraphNode',
                              properties: {
                                type: { type: 'MessageNodeType.PARAGRAPH' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageQuoteNode',
                              properties: {
                                type: { type: 'MessageNodeType.QUOTE' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                            {
                              type: 'MessageTextNode',
                              properties: {
                                type: { type: 'undefined' },
                                class: { type: 'string' },
                                text: { type: 'string' },
                                bold: { type: 'boolean' },
                                italic: { type: 'boolean' },
                                underline: { type: 'boolean' },
                                code: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'text',
                                'bold',
                                'italic',
                                'underline',
                                'code',
                              ],
                              required: ['text'],
                            },
                            {
                              type: 'MessageTodoNode',
                              properties: {
                                type: { type: 'MessageNodeType.TODO' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                                todoID: { type: 'string' },
                                done: { type: 'boolean' },
                              },
                              propertyOrder: [
                                'type',
                                'class',
                                'children',
                                'todoID',
                                'done',
                              ],
                              required: ['type', 'children', 'todoID', 'done'],
                            },
                            {
                              type: 'MessageMarkdownNode',
                              properties: {
                                type: { type: 'MessageNodeType.MARKDOWN' },
                                class: { type: 'string' },
                                children: { type: 'MessageContent' },
                              },
                              propertyOrder: ['type', 'class', 'children'],
                              required: ['type', 'children'],
                            },
                          ],
                        },
                      },
                      plaintext: {
                        description:
                          'A plaintext version of the structured message content.',
                        type: 'string',
                      },
                      url: {
                        description:
                          "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                        type: ['null', 'string'],
                      },
                      createdTimestamp: {
                        description:
                          'The timestamp when this message was created.  The default value is the current time.',
                        type: 'Date',
                      },
                      deletedTimestamp: {
                        description:
                          'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      updatedTimestamp: {
                        description:
                          'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                        anyOf: [{ type: 'null' }, { type: 'Date' }],
                      },
                      iconURL: {
                        description:
                          'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                        type: ['null', 'string'],
                      },
                      translationKey: {
                        description:
                          'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                        type: ['null', 'string'],
                      },
                      type: {
                        description:
                          'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                        type: 'string',
                        enum: ['action_message', 'user_message'],
                      },
                      metadata: {
                        description:
                          'Arbitrary key-value pairs that can be used to store additional information.',
                        type: 'EntityMetadata',
                      },
                      extraClassnames: {
                        description:
                          'A optional space separated list of classnames to add to the message.',
                        type: ['null', 'string'],
                      },
                      attachments: {
                        description: 'The items attached to this message.',
                        type: 'MessageAttachment[]',
                        items: {
                          anyOf: [
                            {
                              type: 'MessageFileAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `file` for file attachments.',
                                  type: '"file"',
                                },
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'type',
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                            {
                              type: 'MessageAnnotationAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `annotation` for annotation attachments.',
                                  type: '"annotation"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the annotation, if any.',
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'UploadedFile',
                                      properties: {
                                        id: {
                                          description: 'The ID of the file.',
                                          type: 'string',
                                        },
                                        name: {
                                          description: 'The name of the file.',
                                          type: 'string',
                                        },
                                        url: {
                                          description:
                                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                          type: 'string',
                                        },
                                        mimeType: {
                                          description:
                                            'The MIME type of the file.',
                                          type: 'string',
                                        },
                                        size: {
                                          description:
                                            'The size of the file, in bytes.',
                                          type: 'number',
                                        },
                                        uploadStatus: {
                                          description:
                                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                          type: 'string',
                                          enum: [
                                            'uploading',
                                            'uploaded',
                                            'failed',
                                            'cancelled',
                                          ],
                                        },
                                      },
                                      propertyOrder: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                      required: [
                                        'id',
                                        'name',
                                        'url',
                                        'mimeType',
                                        'size',
                                        'uploadStatus',
                                      ],
                                    },
                                  ],
                                },
                                locationData: {
                                  description:
                                    'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                                  type: ['null', 'string'],
                                },
                                customData: {
                                  description:
                                    "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                                  anyOf: [
                                    { type: 'null' },
                                    {
                                      type: 'CustomAnnotationData',
                                      properties: {
                                        location: {
                                          description:
                                            'The custom location you produced for this annotation at annotation capture time.',
                                          type: 'Location',
                                        },
                                        coordsRelativeToTarget: {
                                          description:
                                            'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                          type: 'object',
                                          properties: {
                                            x: { type: 'number' },
                                            y: { type: 'number' },
                                          },
                                          propertyOrder: ['x', 'y'],
                                          required: ['x', 'y'],
                                        },
                                        label: {
                                          description:
                                            'Your custom user-visible label for the annotation, if any.',
                                          type: ['null', 'string'],
                                        },
                                      },
                                      propertyOrder: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                      required: [
                                        'location',
                                        'coordsRelativeToTarget',
                                        'label',
                                      ],
                                    },
                                  ],
                                },
                                textContent: {
                                  description:
                                    'The text that was selected when creating the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                              required: [
                                'type',
                                'screenshot',
                                'locationData',
                                'customData',
                                'textContent',
                              ],
                            },
                            {
                              type: 'MessageScreenshotAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                                  type: '"screenshot"',
                                },
                                screenshot: {
                                  description:
                                    'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                                  type: 'UploadedFile',
                                  properties: {
                                    id: {
                                      description: 'The ID of the file.',
                                      type: 'string',
                                    },
                                    name: {
                                      description: 'The name of the file.',
                                      type: 'string',
                                    },
                                    url: {
                                      description:
                                        'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                      type: 'string',
                                    },
                                    mimeType: {
                                      description: 'The MIME type of the file.',
                                      type: 'string',
                                    },
                                    size: {
                                      description:
                                        'The size of the file, in bytes.',
                                      type: 'number',
                                    },
                                    uploadStatus: {
                                      description:
                                        'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                      type: 'string',
                                      enum: [
                                        'uploading',
                                        'uploaded',
                                        'failed',
                                        'cancelled',
                                      ],
                                    },
                                  },
                                  propertyOrder: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                  required: [
                                    'id',
                                    'name',
                                    'url',
                                    'mimeType',
                                    'size',
                                    'uploadStatus',
                                  ],
                                },
                              },
                              propertyOrder: ['type', 'screenshot'],
                              required: ['type', 'screenshot'],
                            },
                            {
                              type: 'MessageLinkPreviewAttachment',
                              properties: {
                                type: {
                                  description:
                                    'The type of this attachment, which is always `link_preview` for file link previews.',
                                  type: '"link_preview"',
                                },
                                id: {
                                  description:
                                    'The ID of the link preview attachment.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The url from which the preview was generated.',
                                  type: 'string',
                                },
                                imageURL: {
                                  description:
                                    'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                                  type: ['null', 'string'],
                                },
                                title: {
                                  description:
                                    "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                                  type: ['null', 'string'],
                                },
                                description: {
                                  description:
                                    'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                              required: [
                                'type',
                                'id',
                                'url',
                                'imageURL',
                                'title',
                                'description',
                              ],
                            },
                          ],
                        },
                      },
                      reactions: {
                        description: 'The reactions to this message.',
                        type: 'Reaction[]',
                        items: {
                          type: 'Reaction',
                          properties: {
                            reaction: {
                              description: 'The emoji reaction.',
                              type: 'string',
                            },
                            userID: {
                              description:
                                'The ID of the user who reacted to the message.',
                              type: 'string',
                            },
                            timestamp: {
                              description:
                                'The timestamp of when the reaction was created.',
                              type: 'Date',
                            },
                          },
                          propertyOrder: ['reaction', 'userID', 'timestamp'],
                          required: ['reaction', 'userID', 'timestamp'],
                        },
                      },
                      seenBy: {
                        description:
                          'A list of IDs of the users that have seen the message.',
                        type: 'string[]',
                        items: { type: 'string' },
                      },
                      skipLinkPreviews: {
                        description:
                          "If set, Cord won't analyze links in the message to generate previews.",
                        type: 'boolean',
                      },
                    },
                    propertyOrder: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                    required: [
                      'id',
                      'authorID',
                      'groupID',
                      'threadID',
                      'content',
                      'plaintext',
                      'url',
                      'createdTimestamp',
                      'deletedTimestamp',
                      'updatedTimestamp',
                      'iconURL',
                      'translationKey',
                      'type',
                      'metadata',
                      'extraClassnames',
                      'attachments',
                      'reactions',
                      'seenBy',
                      'skipLinkPreviews',
                    ],
                  },
                },
                thread: {
                  description:
                    'Data about the thread. The thread structure is the same as returned by the [thread REST API](/rest-apis/threads).',
                  type: 'CoreThreadData',
                  properties: {
                    id: {
                      description: 'The ID for this thread.',
                      type: 'string',
                    },
                    groupID: {
                      description: 'The group ID this thread is in.',
                      type: 'string',
                    },
                    total: {
                      description:
                        'The total number of messages in this thread. Equal to user messages + action messages. Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    userMessages: {
                      description:
                        'The number of messages in this thread that were sent by users (i.e., not action messages). Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    actionMessages: {
                      description:
                        'The number of action messages sent in this thread. An example is the message that appears when a thread is resolved. Deleted messages are excluded from this count.',
                      type: 'number',
                    },
                    deletedMessages: {
                      description:
                        'The number of deleted messages in this thread.',
                      type: 'number',
                    },
                    resolved: {
                      description:
                        'Whether this thread is resolved. This is equivalent to checking if `resolvedTimestamp` is null.',
                      type: 'boolean',
                    },
                    resolvedTimestamp: {
                      description:
                        'The timestamp when this thread was resolved. Set to `null` if this thread is not resolved.',
                      anyOf: [{ type: 'null' }, { type: 'Date' }],
                    },
                    participants: {
                      description:
                        'All of the users who are engaging in this thread. This includes both subscribed and unsubscribed users.',
                      type: 'ThreadParticipant[]',
                      items: {
                        type: 'ThreadParticipant',
                        properties: {
                          lastSeenTimestamp: {
                            description:
                              'The timestamp of the most recent message or reaction that this user has seen in this thread. Is `null` if this participant has never viewed this thread.',
                            anyOf: [{ type: 'null' }, { type: 'Date' }],
                          },
                          userID: {
                            description:
                              "The user ID of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                            type: ['null', 'string'],
                          },
                          displayName: {
                            description:
                              "The display name of the participant. Can be null if the current viewer no longer shares a [group](/rest-apis/groups) with this participant (and therefore can no longer access that participant's information).",
                            type: ['null', 'string'],
                          },
                        },
                        propertyOrder: [
                          'lastSeenTimestamp',
                          'userID',
                          'displayName',
                        ],
                        required: [
                          'lastSeenTimestamp',
                          'userID',
                          'displayName',
                        ],
                      },
                    },
                    subscribers: {
                      description:
                        'All of the users who are subscribed to this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    repliers: {
                      description:
                        'All of the users who have replied to this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    mentioned: {
                      description:
                        'All of the users who were mentioned in a message in this thread.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    actionMessageRepliers: {
                      description:
                        "Authors of any message of type `action_message` in this thread's replies, including automatically generated messages from resolving or unresolving the thread.",
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    typing: {
                      description:
                        'The users that are currently typing in this thread.  Typing status is transient in nature, so the value is the set of users typing at a particular instant, but may change rapidly.  In the context of a specific user (such as the JS API), it will exclude that user from the list.',
                      type: 'string[]',
                      items: { type: 'string' },
                    },
                    name: {
                      description:
                        'The name of the thread.  This is shown to users when the thread is referenced, such as in notifications.  This should generally be something like the page title.',
                      type: 'string',
                    },
                    url: {
                      description:
                        "A URL where the thread can be seen.  This determines where a user is sent when they click on a reference to this thread, such as in a notification, or if they click on a reference to a message in the thread and the message doesn't have its own URL.",
                      type: 'string',
                    },
                    location: {
                      description:
                        'The [location](/reference/location) of this thread.',
                      type: 'Location',
                    },
                    metadata: {
                      description:
                        'Arbitrary key-value pairs that can be used to store additional information.',
                      type: 'EntityMetadata',
                    },
                    extraClassnames: {
                      description:
                        'An optional space separated list of classnames to add to the thread.',
                      type: ['null', 'string'],
                    },
                  },
                  propertyOrder: [
                    'id',
                    'groupID',
                    'total',
                    'userMessages',
                    'actionMessages',
                    'deletedMessages',
                    'resolved',
                    'resolvedTimestamp',
                    'participants',
                    'subscribers',
                    'repliers',
                    'mentioned',
                    'actionMessageRepliers',
                    'typing',
                    'name',
                    'url',
                    'location',
                    'metadata',
                    'extraClassnames',
                  ],
                  required: [
                    'id',
                    'groupID',
                    'total',
                    'userMessages',
                    'actionMessages',
                    'deletedMessages',
                    'resolved',
                    'resolvedTimestamp',
                    'participants',
                    'subscribers',
                    'repliers',
                    'mentioned',
                    'actionMessageRepliers',
                    'typing',
                    'name',
                    'url',
                    'location',
                    'metadata',
                    'extraClassnames',
                  ],
                },
              },
            },
            returns: {
              description: 'The return value is ignored.',
              anyOf: [{ type: 'void' }, { type: 'Promise<void>' }],
            },
          },
        },
      },
      properties: {
        properties: {
          cordUser: {
            type: 'ServerUpdateUser',
            properties: {
              name: { description: 'Full user name', type: ['null', 'string'] },
              email: { description: 'Email address', type: ['null', 'string'] },
              shortName: {
                description:
                  'Short user name. In most cases, this will be preferred over name when set.',
                type: ['null', 'string'],
              },
              status: { type: 'string', enum: ['active', 'deleted'] },
              profilePictureURL: {
                description:
                  "This must be a valid URL, which means it needs to follow the usual URL formatting and encoding rules. For example, any space character will need to be encoded as `%20`. We recommend using your programming language's standard URL encoding function, such as `encodeURI` in Javascript.",
                type: ['null', 'string'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              addGroups: {
                description:
                  "A list of group IDs this user should be made a member of.  It is an error to specify a group that doesn't exist or one that is also being removed in the same call.  It is not an error to add a user to a group they're already a member of.",
                type: 'string[]',
                items: { type: 'string' },
              },
              removeGroups: {
                description:
                  "A list of group IDs this user should stop being a member of.  It is an error to specify a group that doesn't exist or one that is also being added in the same call.  It is not an error to remove a user from a group they are not a member of.",
                type: 'string[]',
                items: { type: 'string' },
              },
            },
            propertyOrder: [
              'name',
              'email',
              'shortName',
              'status',
              'profilePictureURL',
              'metadata',
              'addGroups',
              'removeGroups',
            ],
            required: [],
            description:
              "A description of the representation of this bot in the Cord UI, i.e., the bot's name, profile picture, etc. The structure of this data is identical to that accepted by the [create/update user REST API](/rest-apis/users#Create-or-update-a-user).",
          },
        },
        propertyOrder: ['cordUser'],
        required: ['cordUser'],
      },
    },
  },
  'chatbot-anthropic': {
    messageToAnthropicMessage: {
      name: 'messageToAnthropicMessage',
      summary:
        "Converts a message from Cord's format to a one compatible with Anthropic's completion API.",
      examples: {},
      parameters: {
        propertyOrder: ['message'],
        required: ['message'],
        properties: {
          message: {
            description:
              "Message data returned by any of Cord's [message](/rest-apis/messages) or [thread](/rest-apis/threads) APIs.",
            type: 'CoreMessageData',
            properties: {
              id: {
                description:
                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                type: 'string',
              },
              authorID: {
                description: 'The ID for the user that sent the message.',
                type: 'string',
              },
              groupID: {
                description: 'The ID for the group this message belongs to.',
                type: 'string',
              },
              threadID: {
                description: 'The ID for the thread this message is part of.',
                type: 'string',
              },
              content: {
                description: 'The content of the message.',
                type: 'MessageContent',
                items: {
                  anyOf: [
                    {
                      type: 'MessageAssigneeNode',
                      properties: {
                        type: { type: 'MessageNodeType.ASSIGNEE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'indent'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageCodeNode',
                      properties: {
                        type: { type: 'MessageNodeType.CODE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageLinkNode',
                      properties: {
                        type: { type: 'MessageNodeType.LINK' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        url: { type: 'string' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'url'],
                      required: ['type', 'children', 'url'],
                    },
                    {
                      type: 'MessageMentionNode',
                      properties: {
                        type: { type: 'MessageNodeType.MENTION' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageNumberBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.NUMBER_BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        bulletNumber: { type: 'number' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'bulletNumber',
                        'indent',
                      ],
                      required: ['type', 'children', 'bulletNumber'],
                    },
                    {
                      type: 'MessageParagraphNode',
                      properties: {
                        type: { type: 'MessageNodeType.PARAGRAPH' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageQuoteNode',
                      properties: {
                        type: { type: 'MessageNodeType.QUOTE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageTextNode',
                      properties: {
                        type: { type: 'undefined' },
                        class: { type: 'string' },
                        text: { type: 'string' },
                        bold: { type: 'boolean' },
                        italic: { type: 'boolean' },
                        underline: { type: 'boolean' },
                        code: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'text',
                        'bold',
                        'italic',
                        'underline',
                        'code',
                      ],
                      required: ['text'],
                    },
                    {
                      type: 'MessageTodoNode',
                      properties: {
                        type: { type: 'MessageNodeType.TODO' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        todoID: { type: 'string' },
                        done: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'todoID',
                        'done',
                      ],
                      required: ['type', 'children', 'todoID', 'done'],
                    },
                    {
                      type: 'MessageMarkdownNode',
                      properties: {
                        type: { type: 'MessageNodeType.MARKDOWN' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                  ],
                },
              },
              plaintext: {
                description:
                  'A plaintext version of the structured message content.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                type: ['null', 'string'],
              },
              createdTimestamp: {
                description:
                  'The timestamp when this message was created.  The default value is the current time.',
                type: 'Date',
              },
              deletedTimestamp: {
                description:
                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              updatedTimestamp: {
                description:
                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              iconURL: {
                description:
                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                type: ['null', 'string'],
              },
              translationKey: {
                description:
                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                type: ['null', 'string'],
              },
              type: {
                description:
                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                type: 'string',
                enum: ['action_message', 'user_message'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'A optional space separated list of classnames to add to the message.',
                type: ['null', 'string'],
              },
              attachments: {
                description: 'The items attached to this message.',
                type: 'MessageAttachment[]',
                items: {
                  anyOf: [
                    {
                      type: 'MessageFileAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `file` for file attachments.',
                          type: '"file"',
                        },
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                    {
                      type: 'MessageAnnotationAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                          type: '"annotation"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the annotation, if any.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          ],
                        },
                        locationData: {
                          description:
                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                          type: ['null', 'string'],
                        },
                        customData: {
                          description:
                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'CustomAnnotationData',
                              properties: {
                                location: {
                                  description:
                                    'The custom location you produced for this annotation at annotation capture time.',
                                  type: 'Location',
                                },
                                coordsRelativeToTarget: {
                                  description:
                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                  type: 'object',
                                  properties: {
                                    x: { type: 'number' },
                                    y: { type: 'number' },
                                  },
                                  propertyOrder: ['x', 'y'],
                                  required: ['x', 'y'],
                                },
                                label: {
                                  description:
                                    'Your custom user-visible label for the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                              required: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                            },
                          ],
                        },
                        textContent: {
                          description:
                            'The text that was selected when creating the annotation, if any.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                      required: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                    },
                    {
                      type: 'MessageScreenshotAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                          type: '"screenshot"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'screenshot'],
                      required: ['type', 'screenshot'],
                    },
                    {
                      type: 'MessageLinkPreviewAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `link_preview` for file link previews.',
                          type: '"link_preview"',
                        },
                        id: {
                          description: 'The ID of the link preview attachment.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The url from which the preview was generated.',
                          type: 'string',
                        },
                        imageURL: {
                          description:
                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                          type: ['null', 'string'],
                        },
                        title: {
                          description:
                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                          type: ['null', 'string'],
                        },
                        description: {
                          description:
                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                      required: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                    },
                  ],
                },
              },
              reactions: {
                description: 'The reactions to this message.',
                type: 'Reaction[]',
                items: {
                  type: 'Reaction',
                  properties: {
                    reaction: {
                      description: 'The emoji reaction.',
                      type: 'string',
                    },
                    userID: {
                      description:
                        'The ID of the user who reacted to the message.',
                      type: 'string',
                    },
                    timestamp: {
                      description:
                        'The timestamp of when the reaction was created.',
                      type: 'Date',
                    },
                  },
                  propertyOrder: ['reaction', 'userID', 'timestamp'],
                  required: ['reaction', 'userID', 'timestamp'],
                },
              },
              seenBy: {
                description:
                  'A list of IDs of the users that have seen the message.',
                type: 'string[]',
                items: { type: 'string' },
              },
              skipLinkPreviews: {
                description:
                  "If set, Cord won't analyze links in the message to generate previews.",
                type: 'boolean',
              },
            },
            propertyOrder: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
            required: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
          },
        },
      },
      returns: {
        description: "Message data in Anthropic's `MessageParam` format.",
        type: 'MessageParam',
      },
    },
    anthropicCompletion: {
      name: 'anthropicCompletion',
      summary:
        "Provides a `getResponse` function which connects to [Anthropic's messages API](https://docs.anthropic.com/claude/reference/messages_post) and streams the response back to Cord.",
      examples: {},
      parameters: {
        propertyOrder: ['apiKey', 'getAnthropicMessages'],
        required: ['apiKey', 'getAnthropicMessages'],
        properties: {
          apiKey: {
            description:
              'An Anthropic API key. You can get this from [the Anthropic console](https://console.anthropic.com/settings/keys).',
            type: 'string',
          },
          getAnthropicMessages: {
            description:
              'The core of your AI logic: a function which takes a Cord thread and message (the same parameters as [`getResponse`](/chatbot-ai-sdk/base-reference#Defining-a-Chatbot-3)) and returns data suitable for sending to Anthropic. This "suitable" data can be any of the following:  \n\n1. An array of [Anthropic messages (`MessageParam`)](https://docs.anthropic.com/claude/reference/messages_post). In this case, a default model will be used (currently, `claude-3-haiku-20240307`, though this may change in the future).  \n\n2. A full set of [Anthropic `MessageCreateParams`](https://docs.anthropic.com/claude/reference/messages_post), which can specify any model (or any other parameters) that you wish. The `stream` parameter will be forced to `true` since this Cord SDK supports streaming.  \n\n3. A promise which resolves to one of the above.',
            type: '(messages: CoreMessageData[], thread: CoreThreadData) => MessageParam[] | Promise<MessageParam[]> | MessageCreateParams | Promise<...>',
          },
        },
      },
      returns: {
        description:
          'A function which can be used as the `getResponse` [for a `Chatbot` definition in the base SDK](/chatbot-ai-sdk/base-reference#Defining-a-Chatbot-3).',
        type: '(messages: CoreMessageData[], thread: CoreThreadData) => string | Promise<string | null | undefined> | AsyncIterable<string | null | undefined> | null | undefined',
      },
    },
    anthropicSimpleAssistant: {
      name: 'anthropicSimpleAssistant',
      summary:
        "Uses [Anthropic's messages API](https://docs.anthropic.com/claude/reference/messages_post) to create a simple AI assistant. This is a simple wrapper on top of `anthropicCompletion` which just injects the system prompt at the top of the list of messages. It uses a default model (currently, `claude-3-haiku-20240307`, though this may change in the future).",
      examples: {},
      parameters: {
        propertyOrder: ['apiKey', 'systemPrompt'],
        required: ['apiKey', 'systemPrompt'],
        properties: {
          apiKey: {
            description:
              'An Anthropic API key. You can get this from [the Anthropic console](https://console.anthropic.com/settings/keys).',
            type: 'string',
          },
          systemPrompt: {
            description:
              'The system prompt to use to set the behavior of the AI.',
            type: 'string',
          },
        },
      },
      returns: {
        description:
          'A function which can be used as the `getResponse` [for a `Chatbot` definition in the base SDK](/chatbot-ai-sdk/base-reference#Defining-a-Chatbot-3).',
        type: '(messages: CoreMessageData[], thread: CoreThreadData) => string | Promise<string | null | undefined> | AsyncIterable<string | null | undefined> | null | undefined',
      },
    },
  },
  'chatbot-openai': {
    messageToOpenaiMessage: {
      name: 'messageToOpenaiMessage',
      summary:
        "Converts a message from Cord's format to a one compatible with OpenAI's completion API.",
      examples: {},
      parameters: {
        propertyOrder: ['message'],
        required: ['message'],
        properties: {
          message: {
            description:
              "Message data returned by any of Cord's [message](/rest-apis/messages) or [thread](/rest-apis/threads) APIs.",
            type: 'CoreMessageData',
            properties: {
              id: {
                description:
                  'The ID for the message.  If a message is created with no ID, a random UUID-based ID will be automatically created for it.',
                type: 'string',
              },
              authorID: {
                description: 'The ID for the user that sent the message.',
                type: 'string',
              },
              groupID: {
                description: 'The ID for the group this message belongs to.',
                type: 'string',
              },
              threadID: {
                description: 'The ID for the thread this message is part of.',
                type: 'string',
              },
              content: {
                description: 'The content of the message.',
                type: 'MessageContent',
                items: {
                  anyOf: [
                    {
                      type: 'MessageAssigneeNode',
                      properties: {
                        type: { type: 'MessageNodeType.ASSIGNEE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'indent'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageCodeNode',
                      properties: {
                        type: { type: 'MessageNodeType.CODE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageLinkNode',
                      properties: {
                        type: { type: 'MessageNodeType.LINK' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        url: { type: 'string' },
                      },
                      propertyOrder: ['type', 'class', 'children', 'url'],
                      required: ['type', 'children', 'url'],
                    },
                    {
                      type: 'MessageMentionNode',
                      properties: {
                        type: { type: 'MessageNodeType.MENTION' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        user: {
                          type: 'object',
                          properties: { id: { type: 'string' } },
                          propertyOrder: ['id'],
                          required: ['id'],
                        },
                      },
                      propertyOrder: ['type', 'class', 'children', 'user'],
                      required: ['type', 'children', 'user'],
                    },
                    {
                      type: 'MessageNumberBulletNode',
                      properties: {
                        type: { type: 'MessageNodeType.NUMBER_BULLET' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        bulletNumber: { type: 'number' },
                        indent: { type: 'number' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'bulletNumber',
                        'indent',
                      ],
                      required: ['type', 'children', 'bulletNumber'],
                    },
                    {
                      type: 'MessageParagraphNode',
                      properties: {
                        type: { type: 'MessageNodeType.PARAGRAPH' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageQuoteNode',
                      properties: {
                        type: { type: 'MessageNodeType.QUOTE' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                    {
                      type: 'MessageTextNode',
                      properties: {
                        type: { type: 'undefined' },
                        class: { type: 'string' },
                        text: { type: 'string' },
                        bold: { type: 'boolean' },
                        italic: { type: 'boolean' },
                        underline: { type: 'boolean' },
                        code: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'text',
                        'bold',
                        'italic',
                        'underline',
                        'code',
                      ],
                      required: ['text'],
                    },
                    {
                      type: 'MessageTodoNode',
                      properties: {
                        type: { type: 'MessageNodeType.TODO' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                        todoID: { type: 'string' },
                        done: { type: 'boolean' },
                      },
                      propertyOrder: [
                        'type',
                        'class',
                        'children',
                        'todoID',
                        'done',
                      ],
                      required: ['type', 'children', 'todoID', 'done'],
                    },
                    {
                      type: 'MessageMarkdownNode',
                      properties: {
                        type: { type: 'MessageNodeType.MARKDOWN' },
                        class: { type: 'string' },
                        children: { type: 'MessageContent' },
                      },
                      propertyOrder: ['type', 'class', 'children'],
                      required: ['type', 'children'],
                    },
                  ],
                },
              },
              plaintext: {
                description:
                  'A plaintext version of the structured message content.',
                type: 'string',
              },
              url: {
                description:
                  "A URL where the message can be seen.  This determines where a user is sent when they click on a reference to this message, such as in a notification. If unset, it defaults to the thread's URL.",
                type: ['null', 'string'],
              },
              createdTimestamp: {
                description:
                  'The timestamp when this message was created.  The default value is the current time.',
                type: 'Date',
              },
              deletedTimestamp: {
                description:
                  'The timestamp when this message was deleted, if it was.  If unset, the message is not deleted.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              updatedTimestamp: {
                description:
                  'The timestamp when this message was last edited, if it ever was.  If unset, the message does not show as edited.',
                anyOf: [{ type: 'null' }, { type: 'Date' }],
              },
              iconURL: {
                description:
                  'The URL of the icon to show next to the message.  This is only used for `action_message` messages; other messages show the avatar of the author. If an `action_message` does not have an icon set, no icon is shown.',
                type: ['null', 'string'],
              },
              translationKey: {
                description:
                  'An optional translation key used for this message.  This is useful for system-generated messages where you might want to translate or customize them at runtime.  See [the translations documentation](/customization/translations) for more information.',
                type: ['null', 'string'],
              },
              type: {
                description:
                  'The type of message this is.  A `user_message` is a message that the author sent.  An `action_message` is a message about something that happened, such as the thread being resolved.  The default value is `user_message`.',
                type: 'string',
                enum: ['action_message', 'user_message'],
              },
              metadata: {
                description:
                  'Arbitrary key-value pairs that can be used to store additional information.',
                type: 'EntityMetadata',
              },
              extraClassnames: {
                description:
                  'A optional space separated list of classnames to add to the message.',
                type: ['null', 'string'],
              },
              attachments: {
                description: 'The items attached to this message.',
                type: 'MessageAttachment[]',
                items: {
                  anyOf: [
                    {
                      type: 'MessageFileAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `file` for file attachments.',
                          type: '"file"',
                        },
                        id: {
                          description: 'The ID of the file.',
                          type: 'string',
                        },
                        name: {
                          description: 'The name of the file.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                          type: 'string',
                        },
                        mimeType: {
                          description: 'The MIME type of the file.',
                          type: 'string',
                        },
                        size: {
                          description: 'The size of the file, in bytes.',
                          type: 'number',
                        },
                        uploadStatus: {
                          description:
                            'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                          type: 'string',
                          enum: [
                            'uploading',
                            'uploaded',
                            'failed',
                            'cancelled',
                          ],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                      required: [
                        'type',
                        'id',
                        'name',
                        'url',
                        'mimeType',
                        'size',
                        'uploadStatus',
                      ],
                    },
                    {
                      type: 'MessageAnnotationAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `annotation` for annotation attachments.',
                          type: '"annotation"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the annotation, if any.',
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'UploadedFile',
                              properties: {
                                id: {
                                  description: 'The ID of the file.',
                                  type: 'string',
                                },
                                name: {
                                  description: 'The name of the file.',
                                  type: 'string',
                                },
                                url: {
                                  description:
                                    'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                                  type: 'string',
                                },
                                mimeType: {
                                  description: 'The MIME type of the file.',
                                  type: 'string',
                                },
                                size: {
                                  description:
                                    'The size of the file, in bytes.',
                                  type: 'number',
                                },
                                uploadStatus: {
                                  description:
                                    'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                                  type: 'string',
                                  enum: [
                                    'uploading',
                                    'uploaded',
                                    'failed',
                                    'cancelled',
                                  ],
                                },
                              },
                              propertyOrder: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                              required: [
                                'id',
                                'name',
                                'url',
                                'mimeType',
                                'size',
                                'uploadStatus',
                              ],
                            },
                          ],
                        },
                        locationData: {
                          description:
                            'The opaque location data generated by Cord.  This field may or may not be set, depending on how the annotation was created.  The value will be an opaque string that can be passed to [`stringToViewportCoordinates`](/js-apis-and-hooks/annotations-api#stringToViewportCoordinates).',
                          type: ['null', 'string'],
                        },
                        customData: {
                          description:
                            "The custom location data for this annotation.  This will only be set if you're using the [Annotations API](/js-apis-and-hooks/annotations-api) to customize your annotation locations.",
                          anyOf: [
                            { type: 'null' },
                            {
                              type: 'CustomAnnotationData',
                              properties: {
                                location: {
                                  description:
                                    'The custom location you produced for this annotation at annotation capture time.',
                                  type: 'Location',
                                },
                                coordsRelativeToTarget: {
                                  description:
                                    'The offset of the annotation relative to the element identified by `location`, in pixels, at the time the annotation was captured.  The `location` and `coordsRelativeToTarget` will be supplied to the [Annotations API render handler](/js-apis-and-hooks/annotations-api#setRenderHandler-2) in order to position the annotation.',
                                  type: 'object',
                                  properties: {
                                    x: { type: 'number' },
                                    y: { type: 'number' },
                                  },
                                  propertyOrder: ['x', 'y'],
                                  required: ['x', 'y'],
                                },
                                label: {
                                  description:
                                    'Your custom user-visible label for the annotation, if any.',
                                  type: ['null', 'string'],
                                },
                              },
                              propertyOrder: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                              required: [
                                'location',
                                'coordsRelativeToTarget',
                                'label',
                              ],
                            },
                          ],
                        },
                        textContent: {
                          description:
                            'The text that was selected when creating the annotation, if any.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                      required: [
                        'type',
                        'screenshot',
                        'locationData',
                        'customData',
                        'textContent',
                      ],
                    },
                    {
                      type: 'MessageScreenshotAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `screenshot` for screenshot attachments.',
                          type: '"screenshot"',
                        },
                        screenshot: {
                          description:
                            'The screenshot attached to the message. Screenshots are attached via `screenshotOptions.captureWhen` API.',
                          type: 'UploadedFile',
                          properties: {
                            id: {
                              description: 'The ID of the file.',
                              type: 'string',
                            },
                            name: {
                              description: 'The name of the file.',
                              type: 'string',
                            },
                            url: {
                              description:
                                'The URL that a user can use to download the file.  This is a signed URL that will expire after 24 hours.',
                              type: 'string',
                            },
                            mimeType: {
                              description: 'The MIME type of the file.',
                              type: 'string',
                            },
                            size: {
                              description: 'The size of the file, in bytes.',
                              type: 'number',
                            },
                            uploadStatus: {
                              description:
                                'The status of the file upload.  `uploading` means that the user has not yet completed uploading the file, `uploaded` means the file is successfully uploaded, `failed` means the upload encountered an error, and `cancelled` means the user cancelled the upload before it was finished or the upload timed out.',
                              type: 'string',
                              enum: [
                                'uploading',
                                'uploaded',
                                'failed',
                                'cancelled',
                              ],
                            },
                          },
                          propertyOrder: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                          required: [
                            'id',
                            'name',
                            'url',
                            'mimeType',
                            'size',
                            'uploadStatus',
                          ],
                        },
                      },
                      propertyOrder: ['type', 'screenshot'],
                      required: ['type', 'screenshot'],
                    },
                    {
                      type: 'MessageLinkPreviewAttachment',
                      properties: {
                        type: {
                          description:
                            'The type of this attachment, which is always `link_preview` for file link previews.',
                          type: '"link_preview"',
                        },
                        id: {
                          description: 'The ID of the link preview attachment.',
                          type: 'string',
                        },
                        url: {
                          description:
                            'The url from which the preview was generated.',
                          type: 'string',
                        },
                        imageURL: {
                          description:
                            'URL of the image to show in the link preview. It is usually specified in the meta or og tags of the page.',
                          type: ['null', 'string'],
                        },
                        title: {
                          description:
                            "Title for the link preview. Sometimes it's the page title, sometimes it is specified in meta or og tags.",
                          type: ['null', 'string'],
                        },
                        description: {
                          description:
                            'Description for the link preview. Generated from the url provided from meta or og tags in the page.',
                          type: ['null', 'string'],
                        },
                      },
                      propertyOrder: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                      required: [
                        'type',
                        'id',
                        'url',
                        'imageURL',
                        'title',
                        'description',
                      ],
                    },
                  ],
                },
              },
              reactions: {
                description: 'The reactions to this message.',
                type: 'Reaction[]',
                items: {
                  type: 'Reaction',
                  properties: {
                    reaction: {
                      description: 'The emoji reaction.',
                      type: 'string',
                    },
                    userID: {
                      description:
                        'The ID of the user who reacted to the message.',
                      type: 'string',
                    },
                    timestamp: {
                      description:
                        'The timestamp of when the reaction was created.',
                      type: 'Date',
                    },
                  },
                  propertyOrder: ['reaction', 'userID', 'timestamp'],
                  required: ['reaction', 'userID', 'timestamp'],
                },
              },
              seenBy: {
                description:
                  'A list of IDs of the users that have seen the message.',
                type: 'string[]',
                items: { type: 'string' },
              },
              skipLinkPreviews: {
                description:
                  "If set, Cord won't analyze links in the message to generate previews.",
                type: 'boolean',
              },
            },
            propertyOrder: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
            required: [
              'id',
              'authorID',
              'groupID',
              'threadID',
              'content',
              'plaintext',
              'url',
              'createdTimestamp',
              'deletedTimestamp',
              'updatedTimestamp',
              'iconURL',
              'translationKey',
              'type',
              'metadata',
              'extraClassnames',
              'attachments',
              'reactions',
              'seenBy',
              'skipLinkPreviews',
            ],
          },
        },
      },
      returns: {
        description:
          "Message data in [OpenAI's `ChatCompletionMessageParam` format](https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages).",
        anyOf: [
          { type: 'ChatCompletionSystemMessageParam' },
          { type: 'ChatCompletionUserMessageParam' },
          { type: 'ChatCompletionAssistantMessageParam' },
          { type: 'ChatCompletionToolMessageParam' },
          { type: 'ChatCompletionFunctionMessageParam' },
        ],
      },
    },
    openaiCompletion: {
      name: 'openaiCompletion',
      summary:
        "Provides a `getResponse` function which connects to [OpenAI's completion API](https://platform.openai.com/docs/guides/text-generation/chat-completions-api) and streams the response back to Cord.",
      examples: {},
      parameters: {
        propertyOrder: ['apiKey', 'getOpenaiMessages'],
        required: ['apiKey', 'getOpenaiMessages'],
        properties: {
          apiKey: {
            description:
              'An OpenAI API key. You can get this from [the OpenAI platform website](https://platform.openai.com/api-keys).',
            type: 'string',
          },
          getOpenaiMessages: {
            description:
              'The core of your AI logic: a function which takes a Cord thread and message (the same parameters as [`getResponse`](/chatbot-ai-sdk/base-reference#Defining-a-Chatbot-3)) and returns data suitable for sending to OpenAI. This "suitable" data can be any of the following:  \n\n1. An array of [OpenAI messages (`ChatCompletionMessageParam`)](https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages). In this case, a default model will be used (currently, `gpt-4-0613`, though this may change in the future).  \n\n2. A full set of [OpenAI `CompletionParams`](https://platform.openai.com/docs/api-reference/chat/create), which can specify any model (or any other parameters) that you wish. The `stream` parameter will be forced to `true` since this Cord SDK supports streaming.  \n\n3. A promise which resolves to one of the above.',
            type: '(messages: CoreMessageData[], thread: CoreThreadData) => ChatCompletionMessageParam[] | Promise<ChatCompletionMessageParam[]> | CompletionParams | Promise<...>',
          },
        },
      },
      returns: {
        description:
          'A function which can be used as the `getResponse` [for a `Chatbot` definition in the base SDK](/chatbot-ai-sdk/base-reference#Defining-a-Chatbot-3).',
        type: '(messages: CoreMessageData[], thread: CoreThreadData) => string | Promise<string | null | undefined> | AsyncIterable<string | null | undefined> | null | undefined',
      },
    },
    openaiSimpleAssistant: {
      name: 'openaiSimpleAssistant',
      summary:
        "Uses [OpenAI's completion API](https://platform.openai.com/docs/guides/text-generation/chat-completions-api) to create a simple AI assistant. This is a simple wrapper on top of `openaiCompletion` which just injects the system prompt at the top of the list of messages. It uses a default model (currently, `gpt-4-0613`, though this may change in the future).",
      examples: {},
      parameters: {
        propertyOrder: ['apiKey', 'systemPrompt'],
        required: ['apiKey', 'systemPrompt'],
        properties: {
          apiKey: {
            description:
              'An OpenAI API key. You can get this from [the OpenAI platform website](https://platform.openai.com/api-keys).',
            type: 'string',
          },
          systemPrompt: {
            description:
              'The system prompt to use to set the behavior of the AI.',
            type: 'string',
          },
        },
      },
      returns: {
        description:
          'A function which can be used as the `getResponse` [for a `Chatbot` definition in the base SDK](/chatbot-ai-sdk/base-reference#Defining-a-Chatbot-3).',
        type: '(messages: CoreMessageData[], thread: CoreThreadData) => string | Promise<string | null | undefined> | AsyncIterable<string | null | undefined> | null | undefined',
      },
    },
  },
} as const;

