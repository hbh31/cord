worker_processes auto;

events {
  worker_connections 1000000;
}

http {

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  upstream websocket {
    server localhost:8161;
  }

  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$host" "$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/radical/access.log main;
  error_log /var/radical/error.log;

  server {
    # This is the default server instance. This defines the behaviour if we
    # receive a request for a host name that is not one of the defined host
    # names below.

    listen 80;
    server_name _;

    return 302 https://cord.com$request_uri;
    # once our domain names are all stable, we should use 301 (moved
    # permanently) instead of 302 (found - i.e. temporary redirect)
    # return 301 https://cord.com$request_uri;
  }

  server {
    listen 80;
    server_name api.cord.com;
    location / {
      proxy_pass http://localhost:8161;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_read_timeout 5m;
      proxy_send_timeout 5m;
    }
  }

  server {
    listen 80;
    server_name app.cord.com;

    # The DNS of app.cord.com should point to an AWS CloudFront instance
    # serving the site from S3. Should a request for app.cord.com nevertheless
    # reach this server (e.g. because the DNS change is still propagating), we
    # forward it to the S3 http endpoint.

    location / {
      proxy_pass http://app.cord.com.s3-website.eu-west-2.amazonaws.com;
    }
  }

  server {
    listen 80;
    server_name admin.cord.com;
    location / {
      proxy_pass http://localhost:8123;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_read_timeout 5m;
      proxy_send_timeout 5m;
    }
  }

  server {
    listen 80;
    server_name api.*;
    return 302 https://api.cord.com$request_uri;
    # once our domain names are all stable, we should use 301 (moved
    # permanently) instead of 302 (found - i.e. temporary redirect)
    # return 301 https://api.cord.com$request_uri;
  }

  server {
    listen 80;
    server_name app.*;
    return 302 https://app.cord.com$request_uri;
    # once our domain names are all stable, we should use 301 (moved
    # permanently) instead of 302 (found - i.e. temporary redirect)
    # return 301 https://app.cord.com$request_uri;
  }

  server {
    listen 80;
    server_name admin.*;
    return 302 https://admin.cord.com$request_uri;
    # once our domain names are all stable, we should use 301 (moved
    # permanently) instead of 302 (found - i.e. temporary redirect)
    # return 301 https://admin.cord.com$request_uri;
  }
}

