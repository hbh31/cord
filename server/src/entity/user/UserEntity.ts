import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';
import type {
  CreationOptional,
  InferAttributes,
  InferCreationAttributes,
} from 'sequelize';
import { DataTypes } from 'sequelize';
import type {
  UserType,
  UserState,
  UUID,
  EntityMetadata,
} from 'common/types/index.ts';
import type { AuthProviderType } from 'server/src/auth/index.ts';

export type UserEntityState = UserState;
@Table({
  tableName: 'users',
  timestamps: false,
})
export class UserEntity extends Model<
  InferAttributes<UserEntity>,
  InferCreationAttributes<UserEntity>
> {
  @PrimaryKey
  @Column({
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
  })
  id!: CreationOptional<UUID>; // Internal, autogenerated UUID

  @Column({ type: DataTypes.TIME })
  createdTimestamp!: CreationOptional<Date>;

  @Column({ type: DataTypes.TIME })
  updatedTimestamp!: CreationOptional<Date>;

  @Column({ type: DataTypes.ENUM('person', 'bot'), defaultValue: 'person' })
  userType!: CreationOptional<UserType>;

  @Column({ type: DataTypes.BOOLEAN, defaultValue: false })
  admin!: CreationOptional<boolean>;

  @Column({
    type: DataTypes.ENUM('active', 'deleted'),
    defaultValue: 'active',
    allowNull: false,
  })
  state!: CreationOptional<UserEntityState>;

  // The following fields will be populated with information from the user's respective auth provider.

  @Column({ type: DataTypes.STRING })
  name!: string | null; // the user's full name

  @Column({ type: DataTypes.DATE })
  nameUpdatedTimestamp!: Date | null;

  @Column({ type: DataTypes.STRING })
  screenName!: string | null;

  @Column({ type: DataTypes.STRING })
  email!: string | null;

  @Column({ type: DataTypes.STRING })
  profilePictureURL!: string | null;

  @Column({ type: DataTypes.DATE })
  profilePictureURLUpdatedTimestamp!: Date | null;

  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })
  externalID!: CreationOptional<string>; // provider-specific user id

  @Column({ type: DataTypes.ENUM('slack', 'platform') })
  externalProvider!: AuthProviderType | null; // the provider used to log in

  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })
  platformApplicationID!: UUID | null;

  @Column({
    type: DataTypes.JSONB,
    allowNull: false,
    defaultValue: {},
  })
  metadata!: CreationOptional<EntityMetadata>;
}
