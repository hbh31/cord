import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';
import { DataTypes } from 'sequelize';
import type { UUID } from 'common/types/index.ts';

@Table({
  tableName: 'console_users',
  timestamps: false,
})
export class ConsoleUserEntity extends Model {
  @PrimaryKey
  @Column({
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
  })
  id!: UUID; // Internal, autogenerated UUID

  @Column({ type: DataTypes.STRING, unique: true })
  email!: string;

  @Column({
    type: DataTypes.STRING,
    allowNull: true,
  })
  name: string | null | undefined;

  @Column({ type: DataTypes.STRING, allowNull: true })
  picture: string | null | undefined;

  @Column({
    type: DataTypes.UUID,
    defaultValue: null,
  })
  customerID!: UUID | null;

  @Column({
    type: DataTypes.BOOLEAN,
    defaultValue: false,
  })
  verified!: boolean;

  @Column({
    type: DataTypes.STRING,
    allowNull: true,
  })
  auth0UserID: string | null | undefined;

  @Column({
    type: DataTypes.UUID,
    defaultValue: null,
  })
  pendingCustomerID!: UUID | null;

  @Column({
    type: DataTypes.UUID,
    defaultValue: null,
  })
  loopsUserID!: string | null;

  get idForLogging(): string {
    const authSource = this.auth0UserID?.includes('|')
      ? this.auth0UserID.substring(0, this.auth0UserID.indexOf('|'))
      : 'unknown';
    return `${this.email} [${authSource}]`;
  }
}
