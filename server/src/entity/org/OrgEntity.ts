import { Table, Column, PrimaryKey, Model } from 'sequelize-typescript';
import type {
  CreationOptional,
  InferAttributes,
  InferCreationAttributes,
} from 'sequelize';
import { DataTypes } from 'sequelize';
import type { UUID, JsonObject, EntityMetadata } from 'common/types/index.ts';
import type { AuthProviderType } from 'server/src/auth/index.ts';
import { LinkedOrgsEntity } from 'server/src/entity/linked_orgs/LinkedOrgsEntity.ts';
import { asSlackBotUserAuthData } from 'server/src/slack/types.ts';
import type { SlackBotCredentials } from 'server/src/slack/util.ts';

export type OrgEntityState = 'active' | 'inactive';

@Table({
  tableName: 'orgs',
  timestamps: false,
})
export class OrgEntity extends Model<
  InferAttributes<OrgEntity>,
  InferCreationAttributes<OrgEntity>
> {
  @PrimaryKey
  @Column({
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
  })
  id!: CreationOptional<UUID>; // Internal, autogenerated UUID

  @Column({ type: DataTypes.TIME })
  createdTimestamp!: CreationOptional<Date>;

  @Column({ type: DataTypes.ENUM('inactive', 'active') })
  state!: OrgEntityState;

  // The following fields will be populated with information from the org's respective auth provider.

  @Column({ type: DataTypes.STRING })
  name!: string;

  @Column({ type: DataTypes.STRING, allowNull: true })
  domain!: string | null;

  // The following fields contain information related external auth providers (Slack, GSuite, etc).

  @Column({ type: DataTypes.STRING, unique: 'AppExternalIDUniqueness' })
  externalID!: string; // provider-specific id

  @Column({
    type: DataTypes.ENUM('slack', 'platform'),
    unique: 'AppExternalIDUniqueness',
  })
  externalProvider!: AuthProviderType; // the provider this org originated from

  @Column({ type: DataTypes.JSONB })
  externalAuthData!: JsonObject | null; // provider-specific access token

  @Column({ type: DataTypes.UUID, unique: 'AppExternalIDUniqueness' })
  platformApplicationID!: UUID | null;

  @Column({ type: DataTypes.BOOLEAN, defaultValue: false, allowNull: false })
  internal!: CreationOptional<boolean>;

  @Column({
    type: DataTypes.JSONB,
    allowNull: false,
    defaultValue: {},
  })
  metadata!: CreationOptional<EntityMetadata>;

  @Column({
    type: DataTypes.TEXT,
  })
  customSlackAppID!: string | null;

  public async getLinkedOrg(): Promise<OrgEntity | null> {
    // for now, only allow fetching the linked org for platform orgs. Once we
    // need to feth the platform org that is linked to current Slack org, then
    // we will need to update this code.
    if (this.externalProvider !== 'platform') {
      return null;
    }
    return await OrgEntity.findOne({
      include: {
        model: LinkedOrgsEntity,
        required: true,
        where: {
          sourceOrgID: this.id,
          sourceExternalProvider: this.externalProvider,
        },
      },
    });
  }

  public async loadLinkedSlackOrg() {
    if (this.externalProvider === 'slack') {
      return this;
    }
    const slackOrg = await this.getLinkedOrg();
    return slackOrg?.externalProvider === 'slack' ? slackOrg : null;
  }

  public async getSlackBotCredentials(): Promise<SlackBotCredentials | null> {
    const slackOrg = await this.loadLinkedSlackOrg();

    if (slackOrg) {
      const authData = asSlackBotUserAuthData(slackOrg.externalAuthData);
      if (authData) {
        return { org: slackOrg, ...authData };
      }
    }

    return null;
  }
}
